<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS--开发技巧</title>
    <url>/2020/11/22/15-46-40/</url>
    <content><![CDATA[<p>实际开发中，有一种情况，需要写很多<code>li</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以利用浮动让他们自然排列，</p>
<p>但由于<code>margin</code>或<code>padding</code>导致原本计划每行放四个的li，现在每行只能放三个。</p>
<p>解决方案：</p>
<ul>
<li>给<code>ul</code>一个略大的宽度，使得它可以放得下那些<code>li</code></li>
<li>超出<code>div</code>的部分可以用<code>overflow:hidden</code></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-3D转换</title>
    <url>/2020/11/30/21-33-13/</url>
    <content><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul>
<li><code>3D</code> 移动：<code>translate3d(x, y, z)</code></li>
<li><code>3D</code> 旋转：<code>rotate3d(x, y, z)</code></li>
<li>透视：<code>perspctive</code></li>
<li><code>3D</code>呈现 <code>transfrom-style</code></li>
<li>在开发中，对于复杂的案例，还是会使用js来制作，相比动画，js制作的效果更加可控，操作种类多，方便调试和修改</li>
</ul>
<span id="more"></span>

<h2 id="3D-移动-translate3d"><a href="#3D-移动-translate3d" class="headerlink" title="3D 移动 translate3d"></a><code>3D</code> 移动 <code>translate3d</code></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><code>3D</code> 移动就是在 <code>2D</code> 移动的基础上多加了一个可以移动的方向，就是 z 轴方向</li>
<li><code>transform: translateX(100px)</code>：仅仅是在 x 轴上移动</li>
<li><code>transform: translateY(100px)</code>：仅仅是在 y 轴上移动</li>
<li><code>transform: translateZ(100px)</code>：仅仅是在 z 轴上移动，<strong>必须借助透视才能看到效果</strong></li>
<li><code>transform: translate3d(x, y, z)</code>：其中x、y、z 分别指要移动的轴的方向的距离</li>
<li><strong>注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充</strong></li>
</ul>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(x, y, z)</span><br></pre></td></tr></table></figure>

<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>)</span><br><span class="line"><span class="comment">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span></span><br><span class="line">transform: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视 perspective"></a>透视 <code>perspective</code></h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul>
<li><strong>很重要</strong></li>
<li>如果想要网页<strong>产生 <code>3D</code> 效果需要透视</strong> (理解成 <code>3D</code> 物体投影在<code>2D</code>平面上)</li>
<li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li>
<li><strong>透视也称为视距</strong>，所谓的视距就是人的眼睛到屏幕的距离</li>
<li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li>
<li>透视的单位是像素</li>
</ul>
<h3 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h3><ul>
<li><strong>透视需要写在被视察元素的父盒子上面</strong></li>
<li>注意下方图片<ul>
<li><p>d：就是视距，视距就是指人的眼睛到屏幕的距离</p>
</li>
<li><p>z：就是 z 轴，z 轴越大(正值)，我们看到的物体就越大</p>
<img src="CSS3-3D转换/perspective.png"></li>
</ul>
</li>
</ul>
<p>   ​            </p>
<h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="translateZ-与-perspecitve-的区别"><a href="#translateZ-与-perspecitve-的区别" class="headerlink" title="translateZ 与 perspecitve 的区别"></a><code>translateZ</code> 与 <code>perspecitve</code> 的区别</h3><ul>
<li><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给 子元素进行设置不同的大小</li>
<li><strong>透视是改变眼睛到屏幕的观察距离，越小越立体，translateZ是改变盒子到屏幕的距离</strong></li>
</ul>
<h2 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a><code>3D</code>旋转</h2><blockquote>
<p>3D 旋转指可以让元素在三维平面内沿着 x 轴、y 轴、z 轴 或者自定义轴进行旋转</p>
</blockquote>
<h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul>
<li><code>transform: rotateX(45deg)</code> – 沿着 x 轴正方向旋转 45 度</li>
<li><code>transform: rotateY(45deg)</code> – 沿着 y 轴正方向旋转 45 度</li>
<li><code>transform: rotateZ(45deg)</code> – 沿着 z 轴正方向旋转 45 度</li>
<li><code>transform: rotate3d(x, y, z, 45deg)</code> – 沿着自定义轴旋转 45 deg 为角度</li>
</ul>
<h3 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-<span class="number">45deg</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义旋转轴"><a href="#自定义旋转轴" class="headerlink" title="自定义旋转轴"></a>自定义旋转轴</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">180deg</span>);</span><br><span class="line"> <span class="comment">/* 沿着对角线旋转 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">180deg</span>);</span><br><span class="line">  <span class="comment">/* 沿着x轴旋转 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">180deg</span>);</span><br><span class="line">  <span class="comment">/* 沿着y轴旋转 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3D呈现-transform-style"><a href="#3D呈现-transform-style" class="headerlink" title="3D呈现 transform-style"></a>3D呈现 <code>transform-style</code></h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul>
<li><strong>很重要,3D必写</strong></li>
<li>控制子元素是否开启三维立体环境</li>
<li><code>transform-style: flat</code>  代表子元素不开启 <code>3D</code> 立体空间，默认的</li>
<li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li>
<li><strong>代码写给父级，但是影响的是子盒子</strong></li>
</ul>
<h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">2s</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让子元素保持3d立体空间环境 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">60deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">60deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3D导航栏案例"><a href="#3D导航栏案例" class="headerlink" title="3D导航栏案例"></a>3D导航栏案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 一会我们需要给box 旋转 也需要透视 干脆给li加 里面的子盒子都有透视效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">perspective</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.front</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.front</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">17.5px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这个x轴一定是负值 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 我们如果有移动 或者其他样式，必须先写我们的移动 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">17.5px</span>) <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>pink老师等你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;front&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>pink老师等你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法性能</title>
    <url>/2023/06/23/20-56-15/</url>
    <content><![CDATA[<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><h4 id="什么是时间复杂度"><a href="#什么是时间复杂度" class="headerlink" title="什么是时间复杂度"></a>什么是时间复杂度</h4><p>时间复杂度是一个函数，它定性描述该算法的运行时间。</p>
<p>假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))。</p>
<p><strong>大O用来表示上界</strong>，但代表的是一般情况，而不是严格的上界。就像快排的时间复杂度是O(nlogn)，但最坏情况下应该是O(n^2)。<strong>大O是数据量级突破一个点且数据量级非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量</strong>。</p>
<p>所以我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大。</p>
<p>O(1)常数阶 &lt; O(logn)对数阶 &lt; O(n)线性阶 &lt; O(nlogn)线性对数阶 &lt; O(n^2)平方阶 &lt; O(n^3)立方阶 &lt; O(2^n)指数阶</p>
<span id="more"></span>

<h4 id="复杂表达式的化简"><a href="#复杂表达式的化简" class="headerlink" title="复杂表达式的化简"></a>复杂表达式的化简</h4><ul>
<li>去掉加法常数项</li>
<li>去掉常数系数</li>
<li>保留最高项</li>
</ul>
<h4 id="log以什么为底"><a href="#log以什么为底" class="headerlink" title="log以什么为底"></a>log以什么为底</h4><p>说logn的时候，通常忽略了底数的描述。这是因为底可以被化简掉，无论以什么为底，套上O后效果都一样</p>
<h2 id="算法为什么会超时"><a href="#算法为什么会超时" class="headerlink" title="算法为什么会超时"></a>算法为什么会超时</h2><p>程序运行的时间超过了规定的时间，一般OJ（online judge）的超时时间就是1s。如果n的规模已经足够让$O(n)$的算法运行时间超过了1s，就应该考虑log(n)的解法了。</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-动画</title>
    <url>/2020/11/28/21-02-07/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><p>动画是 <code>CSS3</code> 中最具颠覆性的特征之一，可通过设置多个节点来精确的控制一个或者一组动画，从而实现复杂的动画效果</p>
</li>
<li><p>相比过渡，动画可以实现更多变化，更多控制，连续自动播放等效果</p>
</li>
</ul>
<h2 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h2><ul>
<li>先定义动画</li>
<li>在调用定义好的动画</li>
</ul>
<span id="more"></span>

<h3 id="定义动画"><a href="#定义动画" class="headerlink" title="定义动画"></a>定义动画</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用动画"><a href="#使用动画" class="headerlink" title="使用动画"></a>使用动画</h3>   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">	/* 调用动画 */</span><br><span class="line"></span><br><span class="line">    animation-name: 动画名称;</span><br><span class="line"> 	<span class="comment">&lt;!--  持续时间  --&gt;</span></span><br><span class="line"> 	animation-duration: 持续时间;</span><br><span class="line">     <span class="comment">&lt;!-- 缺一不可 --&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动画序列"><a href="#动画序列" class="headerlink" title="动画序列"></a>动画序列</h3><ul>
<li>0% 是动画的开始，100 % 是动画的完成，这样的规则就是动画序列</li>
<li>在 @keyframs 中规定某项 CSS 样式，就由创建当前样式逐渐改为新样式的动画效果</li>
<li>动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</li>
<li>用百分比来规定变化发生的时间，或用 <code>from</code> 和 <code>to</code>，等同于 0% 和 100%</li>
<li>可<strong>设置多个动画节点</strong> 0% 、25% 、75% 、100%</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">      <span class="attribute">animation-name</span>: move;</span><br><span class="line">      <span class="attribute">animation-duration</span>: <span class="number">0.5s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@keyframes</span> move&#123;</span><br><span class="line">      <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0px</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">500px</span>, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="动画常见属性"><a href="#动画常见属性" class="headerlink" title="动画常见属性"></a>动画常见属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@keyframes</td>
<td>规定动画</td>
</tr>
<tr>
<td>animation</td>
<td>所有动画属性的简写属性，除了animation-play-state属性</td>
</tr>
<tr>
<td>animation-name</td>
<td>规定@keyframes动画的名称。( 必须的)</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定动画完成一个周期所花费的秒或毫秒 ，默认是0。( 必须的)</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线,默认是”ease”</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定动画何时开始,默认是0。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>规定动画被播放的次数，默认是1，还有infinite</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定动画是否在下一周期逆向播放，默认是”normal”,alternate逆播放</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>规定动画结束后状态，保持forwards回到起始backwards</td>
</tr>
</tbody></table>
<h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="comment">/* 动画名称 */</span></span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="comment">/* 动画花费时长 */</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/* 动画速度曲线 */</span></span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease-in-out;</span><br><span class="line">  <span class="comment">/* 动画等待多长时间执行 */</span></span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/* 规定动画播放次数 infinite: 无限循环 */</span></span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="comment">/* 是否逆行播放 */</span></span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="comment">/* 动画结束之后的状态 */</span></span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 规定动画是否暂停或者播放 */</span></span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简写方式"><a href="#简写方式" class="headerlink" title="简写方式"></a>简写方式</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span></span><br><span class="line"><span class="attribute">animation</span>: name duration timing-function delay iteration-count direction fill-mode</span><br></pre></td></tr></table></figure>

<h4 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h4><ul>
<li>简写属性里面不包含 <code>animation-paly-state</code></li>
<li>暂停动画 <code>animation-paly-state: paused</code>; 经常和鼠标经过等其他配合使用</li>
<li>要想动画走回来，而不是直接调回来：<code>animation-direction: alternate</code></li>
<li>盒子动画结束后，停在结束位置：<code>animation-fill-mode: forwards</code></li>
</ul>
<h4 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h4>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: move <span class="number">2s</span> linear <span class="number">1s</span> infinite alternate forwards;</span><br></pre></td></tr></table></figure>
<h2 id="热点图案例"><a href="#热点图案例" class="headerlink" title="热点图案例"></a>热点图案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.map</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">747px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">616px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">media/map.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.city</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">227px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">193px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.tb</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.dotted</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#09f</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.city</span> <span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">&quot;pulse&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 属性选择器，选择以pulse开头的 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 保证我们小波纹在父盒子里面水平垂直居中 放大之后就会中心向四周发散 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">#009dfd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 阴影效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: pulse <span class="number">1.2s</span> linear infinite;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 调用动画 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.city</span> <span class="selector-tag">div</span><span class="selector-class">.pulse2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 增加权重或用！important */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 延时播放动画 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.city</span> <span class="selector-tag">div</span><span class="selector-class">.pulse3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation-delay</span>: <span class="number">0.8s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> pulse &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;&#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">70%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* transform: scale(5);  我们不要用scale 因为他会让 阴影变大*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;city tb&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pulse3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h2><ul>
<li><code>animation-timing-function</code>: 规定动画的速度曲线，默认是<code>ease</code></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。匀速</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快,在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>steps(4)</td>
<td>分步数完成动画</td>
</tr>
</tbody></table>
<h3 id="代码演示-3"><a href="#代码演示-3" class="headerlink" title="代码演示"></a>代码演示</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="attribute">animation</span>: move <span class="number">4s</span> <span class="built_in">steps</span>(<span class="number">24</span>) forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> move &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">480px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打字机案例"><a href="#打字机案例" class="headerlink" title="打字机案例"></a>打字机案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让我们的文字强制一行内显示 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* steps 就是分几步来完成我们的动画 有了steps 就不要在写 ease 或者linear 了 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: w <span class="number">4s</span> <span class="built_in">steps</span>(<span class="number">10</span>) forwards;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> w &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>世纪佳缘我在这里等你<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="奔跑的熊-案例"><a href="#奔跑的熊-案例" class="headerlink" title="奔跑的熊 案例"></a>奔跑的熊 案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;      </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">media/bear.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 我们元素可以添加多个动画， 用逗号分隔 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">animation</span>: bear <span class="number">1s</span> <span class="built_in">steps</span>(<span class="number">8</span>) infinite, move <span class="number">3s</span> forwards;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> bear &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-position</span>: -<span class="number">1600px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">            <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/* margin-left: -100px; */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-选择器</title>
    <url>/2020/11/26/16-00-45/</url>
    <content><![CDATA[<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a><code>CSS3</code></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>在 <code>CSS2</code> 的基础上拓展、新增的样式</li>
</ul>
<h3 id="发展现状"><a href="#发展现状" class="headerlink" title="发展现状"></a>发展现状</h3><ul>
<li>移动端支持优于 <code>PC</code> 端</li>
<li><code>CSS3</code> 目前还草案，在不断改进中</li>
<li><code>CSS3</code> 相对 <code>H5</code>，应用非常广泛</li>
</ul>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E[att]</td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td>E[att&#x3D; “val”]</td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td>E[att^&#x3D;”val”]</td>
<td>匹配具有att属性、且值以val开头的E元素</td>
</tr>
<tr>
<td>E[att$&#x3D; “val”]</td>
<td>匹配具有att属性、且值以val结尾的E元素</td>
</tr>
<tr>
<td>E[att*&#x3D;”val”]</td>
<td>匹配具有att属性、且值中含 有val的E元素</td>
</tr>
</tbody></table>
<span id="more"></span>

<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* 选择具有disabled属性的button */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 选择type值=search的input */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择class为black开头的span */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class^=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择class为black结尾的span */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class$=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择class包含black的span */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class*=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><h3 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h3><table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E:first-child</td>
<td>匹配父元素中的第一个子元素E</td>
</tr>
<tr>
<td>E:last-child</td>
<td>匹配父元素中最后一个E元素</td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>匹配父元素中的第n个子元素E</td>
</tr>
<tr>
<td>E:first-of-type</td>
<td>指定类型E的第一个</td>
</tr>
<tr>
<td>E:last-of-type</td>
<td>指定类型E的最后一个</td>
</tr>
<tr>
<td>E:nth-of-type(n)</td>
<td>指定类型E的第n个</td>
</tr>
</tbody></table>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ul中第一个li标签 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul中最后一个li标签 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ul中第三个li元素 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="十、nth-child-参数详解"><a href="#十、nth-child-参数详解" class="headerlink" title="十、nth-child 参数详解"></a>十、<code>nth-child</code> 参数详解</h4><ol>
<li><p>nth-child 详解</p>
<ul>
<li><p>注意：本质上就是选中第几个子元素</p>
</li>
<li><p>n 可以是数字、关键字、公式</p>
</li>
<li><p>n 如果是数字，就是选中第几个</p>
</li>
<li><p>常见的关键字有 <code>even</code> 偶数、<code>odd</code> 奇数</p>
</li>
<li><p>常见的公式如下(如果 n 是公式，则从 0 开始计算)</p>
</li>
<li><p>但是第 0 个元素或者超出了元素的个数会被忽略</p>
</li>
</ul>
</li>
</ol>
<p>  ​</p>
<ol start="2">
<li>代码演示</li>
</ol>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*n 是公式，从 0 开始计算 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 偶数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 奇数 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n + <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightsalmon;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 选择第 0 5 10 15 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: orangered;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* n + 5 就是从第5个开始往后选择 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: peru;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* -n + 5 前五个 */</span></span><br><span class="line">  <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(-n + <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: tan;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="nth-child-和-nt-of-type-的区别"><a href="#nth-child-和-nt-of-type-的区别" class="headerlink" title="nth-child 和  nt-of-type 的区别"></a><code>nth-child</code> 和  <code>nt-of-type</code> 的区别</h4><ol>
<li>代码演示</li>
</ol>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">3</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li><p>区别</p>
<ul>
<li><code>nth-child</code>  选择父元素里面的第几个子元素，不管是第几个类型</li>
<li><code>nt-of-type</code>  选择指定类型的元素</li>
</ul>
</li>
</ol>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><h3 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h3><table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>::before</td>
<td>在元素内部的前面插入内容</td>
</tr>
<tr>
<td>::after</td>
<td>在元素内部的后面插入内容</td>
</tr>
</tbody></table>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><code>before</code> 和 <code>after</code> 必须配合 <code>content</code> 属性使用</li>
<li><code>before</code> 在内容前面，after 在内容后面</li>
<li><code>before</code> 和 <code>after</code> 创建的是一个元素，但是属于<strong>行内元素</strong></li>
<li>创建出来的元素在 <code>Dom</code> 中查找不到，所以称为伪元素</li>
<li>伪元素和标签选择器一样，权重为 1</li>
</ul>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid lightcoral;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span>,</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;德&#x27;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: lightskyblue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;道&#x27;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: mediumaquamarine;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid lightseagreen;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\ea50&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>在元素内部插入</li>
<li>简化结构</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--三大特性</title>
    <url>/2020/11/03/15-31-00/</url>
    <content><![CDATA[<h2 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h2><blockquote>
<p>如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉。</p>
</blockquote>
<ul>
<li>样式冲突，遵循的原则是<font color="red">就近原则。</font> 那个样式离着结构近，就执行那个样式。</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><blockquote>
<p>子标签会继承父标签的某些样式，如文本颜色和字号。</p>
</blockquote>
<ul>
<li>恰当地使用继承可以简化代码，降低CSS样式的复杂性。比如有很多子级孩子都需要某个样式，可以给父级指定一个，这些孩子继承过来就好了。</li>
</ul>
<span id="more"></span>

<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a><strong>优先级</strong></h2><blockquote>
<p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，此时，</p>
</blockquote>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，就会出现优先级的问题，此时表现出哪个选择器的样式，就要计算权重</li>
</ul>
<h4 id="权重计算公式"><a href="#权重计算公式" class="headerlink" title="权重计算公式"></a>权重计算公式</h4><table>
<thead>
<tr>
<th>标签选择器</th>
<th>计算权重公式</th>
</tr>
</thead>
<tbody><tr>
<td>继承或者 *</td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>每个元素（标签选择器）</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>每个类，伪类</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>每个ID</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>每个行内样式 style&#x3D;””</td>
<td>1,0,0,0</td>
</tr>
<tr>
<td>每个!important  重要的</td>
<td>∞ 无穷大</td>
</tr>
</tbody></table>
<ul>
<li>值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">     <span class="attribute">color</span>: pink<span class="meta">!important</span>;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="权重叠加"><a href="#权重叠加" class="headerlink" title="权重叠加"></a>权重叠加</h4><p>我们经常用交集选择器，后代选择器等，是有多个基础选择器组合而成，那么此时，就会出现权重叠加。</p>
<p>就是一个简单的加法计算</p>
<ul>
<li>div ul  li   ——&gt;      0,0,0,3</li>
<li>.nav ul li   ——&gt;      0,0,1,2</li>
<li>a:hover      —–—&gt;   0,0,1,1</li>
<li>.nav a       ——&gt;      0,0,1,1</li>
</ul>
<p>注意： </p>
<blockquote>
<p>数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 &#x3D;0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p>
</blockquote>
<h4 id="继承的权重是0"><a href="#继承的权重是0" class="headerlink" title="继承的权重是0"></a>继承的权重是0</h4>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--定位</title>
    <url>/2020/11/03/15-34-40/</url>
    <content><![CDATA[<h2 id="定位模型"><a href="#定位模型" class="headerlink" title="定位模型"></a>定位模型</h2><ul>
<li><p>定位 &#x3D; 定位模式 + 边偏移</p>
</li>
<li><p>static：静态定位</p>
</li>
<li><p>relative：相对定位</p>
</li>
<li><p>absolute：绝对定位</p>
</li>
<li><p>fixed：固定定位</p>
</li>
<li><p>sticky：磁贴定位模型</p>
</li>
</ul>
<span id="more"></span>

<h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 static"></a>静态定位 static</h2><p>静态定位 &#x2F; 常规定位 &#x2F; 自然定位</p>
<p>特点：</p>
<ol>
<li>没有边偏移，是元素默认定位方式，按标准流特性摆放位置，相当于无定位</li>
</ol>
<h2 id="相对定位和绝对定位"><a href="#相对定位和绝对定位" class="headerlink" title="相对定位和绝对定位"></a>相对定位和绝对定位</h2><p>特点：</p>
<ol>
<li><p>relative（相对定位）：<font color="red">不脱离常规流，</font>保留所在位置，并以自己原本所在位置为基准</p>
</li>
<li><p>absolute（绝对定位）：<font color="red">脱离常规流，</font>以带有定位的最近的祖先元素为基准，若祖先元素均没有定位，则以浏览器为基准</p>
</li>
<li><p>在实际开发中经常会使用<font color="red">子绝父相</font>，即子元素绝对定位，父元素用相对定位,这样子元素实现覆盖同时父元素可以保留位置，不影响后面的布局</p>
</li>
<li><p>绝对定位的元素无法用margin:auto实现居中</p>
<ul>
<li><p>需要给元素设置 top：50%，然后再 margin-top:负本身高度的一半。实现垂直居中<br> 先走父盒子的一半，再回自身的一半</p>
</li>
<li><p>需要给元素设置 left：50%，然后再 margin-left:负本身宽度的一半。实现水平居中</p>
</li>
</ul>
</li>
</ol>
<h2 id="固定定位-fix"><a href="#固定定位-fix" class="headerlink" title="固定定位 fix"></a>固定定位 fix</h2><p>是绝对定位的一种特殊形式</p>
<p>特点：</p>
<ol>
<li><p><font color="red">完全脱标</font> 不占位置</p>
</li>
<li><p>只认浏览器可视窗口+边偏移来设置元素位置</p>
<ul>
<li><strong>跟父元素没有任何关系</strong></li>
<li><strong>不随滚动条滚动</strong></li>
</ul>
</li>
</ol>
<p>将盒子固定在版心的旁边：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">left</span>:<span class="number">50%</span></span><br><span class="line"><span class="comment">/* 浏览器的50% */</span></span><br><span class="line">margin-left:<span class="built_in">-</span>(版心宽度的一半)<span class="built_in">-</span>(自己的宽度)</span><br><span class="line"><span class="comment">/* 若不想紧贴版心，可再减一些距离 */</span></span><br></pre></td></tr></table></figure>

<h2 id="sticky模型（CSS3）"><a href="#sticky模型（CSS3）" class="headerlink" title="sticky模型（CSS3）"></a>sticky模型（CSS3）</h2><p>磁贴定位 &#x2F; 粘性定位 &#x2F; 吸附定位</p>
<p>作用：relative + fixed 的完美结合，制造出吸附效果</p>
<p>特点：</p>
<ol>
<li><p>如果产生偏移，原位置还是会在常规流中</p>
</li>
<li><p>如果它的最近父元素有滚动，那么它的偏移标尺就是最近的父元素</p>
</li>
<li><p>如果最近父元素没有滚动，那么它的偏移标尺是视口</p>
</li>
<li><p>上下左右的偏移规则</p>
</li>
<li><p>top等定位属性更像是条件，而非是坐标</p>
</li>
</ol>
<h2 id="定位的堆叠顺序"><a href="#定位的堆叠顺序" class="headerlink" title="定位的堆叠顺序"></a>定位的堆叠顺序</h2><ol>
<li>当有多个带定位盒子在同一位置时，<strong>后来者居上</strong>，即后面的带定位盒子会覆盖前面的带定位盒子</li>
<li>使用 z-index 可以调整堆放顺序<ul>
<li>属性值为整数，可为正为负或为零，数值越大、盒子越靠上，如 z-index:2</li>
</ul>
</li>
</ol>
<h2 id="定位会改变显示模式-display"><a href="#定位会改变显示模式-display" class="headerlink" title="定位会改变显示模式(display)"></a>定位会改变显示模式(display)</h2><p>绝对定位和固定定位默认转换为行内块<br>由于行内块元素的宽度随内容宽度改变，很多情况下不满足开发需要，所以通常需要单写宽度</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-2D转换</title>
    <url>/2020/11/27/13-20-21/</url>
    <content><![CDATA[<ul>
<li><code>2D</code> 转换是改变标签在二维平面上的位置和形状</li>
<li>移动: <code>translate</code></li>
<li>旋转: <code>rotate</code></li>
<li>缩放: <code>scale</code></li>
</ul>
<span id="more"></span>

<h2 id="移动-translate"><a href="#移动-translate" class="headerlink" title="移动 translate"></a>移动 <code>translate</code></h2><ul>
<li>x 就是 x 轴上水平移动</li>
<li>y 就是 y 轴上水平移动</li>
</ul>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x, y)</span><br><span class="line">transform: <span class="built_in">translateX</span>(n)</span><br><span class="line">transfrom: <span class="built_in">translateY</span>(n)</span><br></pre></td></tr></table></figure>

<h3 id="重点知识点"><a href="#重点知识点" class="headerlink" title="重点知识点"></a>重点知识点</h3><ul>
<li><code>2D</code> 的移动主要是指 水平、垂直方向上的移动</li>
<li><code>translate</code> 最大的优点就是<font color = red><strong>不影响其他元素的位置</strong></font><ul>
<li>定位和margin也可以实现移动，但会影响其他元素</li>
</ul>
</li>
<li>参数可以用百分数 <code>transform: translateX(100px)</code>，是相对于本身的宽度和高度来进行计算的</li>
<li><strong>对行内标签没有效果</strong></li>
</ul>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 平移 */</span></span><br><span class="line">  <span class="comment">/* 水平垂直移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100px, 100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translateX(100px) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translate(0, 100px) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translateX(100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转 rotate"></a>旋转 <code>rotate</code></h2><blockquote>
<p>2d旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转</p>
</blockquote>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">30deg</span>); </span><br><span class="line">   <span class="comment">/* 顺时针 */</span></span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span><br><span class="line">   <span class="comment">/* 逆时针 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="设置元素旋转中心点-transform-origin"><a href="#设置元素旋转中心点-transform-origin" class="headerlink" title="设置元素旋转中心点(transform-origin)"></a>设置元素旋转中心点(transform-origin)</h3><blockquote>
<p>旋转中心点默认是中心点，也可以自己设置</p>
</blockquote>
<h4 id="transform-origin-基础语法"><a href="#transform-origin-基础语法" class="headerlink" title="transform-origin 基础语法"></a><code>transform-origin</code> 基础语法</h4>   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure>

<h4 id="重要知识点"><a href="#重要知识点" class="headerlink" title="重要知识点"></a>重要知识点</h4><ul>
<li>注意后面的参数 x 和 y 用空格隔开</li>
<li>x y 默认旋转的中心点是元素的中心 (50% 50%)，等价于 <code>center</code>  <code>center</code></li>
<li>还可以给 x y 设置像素或者方位名词(<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>、<code>center</code>)</li>
</ul>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;黑马&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: left bottom;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">0.4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 鼠标经过div 里面的before 复原 */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放 scale"></a>缩放 <code>scale</code></h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x, y)</span><br></pre></td></tr></table></figure>

<h3 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h3><ul>
<li>注意，x 与 y 之间使用逗号进行分隔</li>
<li><code>transform: scale(1, 1)</code>: 宽高都放大一倍，相当于没有放大</li>
<li><code>transform: scale(2, 2)</code>: 宽和高都放大了二倍</li>
<li><code>transform: scale(2)</code>: 如果只写了一个参数，第二个参数就和第一个参数一致</li>
<li><code>transform: scale(0.5, 0.5)</code>: 缩小</li>
<li><code>scale</code> 最大的优势：<strong>可以设置转换中心点缩放</strong>，默认以中心点缩放，而且<strong>不影响其他盒子</strong><ul>
<li>设置中心点：<code>transform-origin: left bottom</code></li>
</ul>
</li>
</ul>
<h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="comment">/* 注意，数字是倍数的含义，所以不需要加单位 */</span></span><br><span class="line">   <span class="comment">/* transform: scale(2, 2) */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 实现等比缩放，同时修改宽与高 */</span></span><br><span class="line">   <span class="comment">/* transform: scale(2) */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 小于 1 就等于缩小*/</span></span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="放大图片案例"><a href="#放大图片案例" class="headerlink" title="放大图片案例"></a>放大图片案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;media/scale.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="放大按钮案例"><a href="#放大按钮案例" class="headerlink" title="放大按钮案例"></a>放大按钮案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">4s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2D-转换综合写法以及顺序问题"><a href="#2D-转换综合写法以及顺序问题" class="headerlink" title="2D 转换综合写法以及顺序问题"></a><code>2D</code> 转换综合写法以及顺序问题</h2><h3 id="知识要点-1"><a href="#知识要点-1" class="headerlink" title="知识要点"></a>知识要点</h3><ul>
<li>同时使用多个转换，其格式为 <code>transform: translate() rotate() scale()</code></li>
<li><strong>顺序会影响到转换的效果(先旋转会改变坐标轴方向)</strong></li>
<li>但我们同时有位置或者其他属性的时候，要将位移放到最前面</li>
</ul>
<h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3-浏览器私有前缀</title>
    <url>/2020/12/01/11-56-16/</url>
    <content><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote>
<p>为了兼容老版本，新版本的浏览器无需添加</p>
</blockquote>
<h2 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h2><ul>
<li>-moz-：<code>Firefox</code>私有属性</li>
<li>-ms-：<code>ie</code>私有属性</li>
<li>-webkit-：<code>Safari</code>、<code>Chrome</code>私有属性</li>
<li>-o-：<code>Opera</code>私有属性</li>
</ul>
<span id="more"></span>

<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br><span class="line">-moz-<span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br><span class="line">-o-<span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br><span class="line">-webkit-<span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--标签显示模式</title>
    <url>/2020/11/03/14-30-56/</url>
    <content><![CDATA[<h2 id="块级元素-block"><a href="#块级元素-block" class="headerlink" title="块级元素 block"></a>块级元素 block</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</span><br></pre></td></tr></table></figure>
<ul>
<li>特点：<ul>
<li>自己独占一行</li>
<li>宽度默认是容器（父级宽度）的100%</li>
<li>高度，宽度、外边距以及内边距都可以控制。</li>
<li>是一个容器及盒子，里面可以放行内或者块级元素。</li>
</ul>
</li>
<li>注意：<ul>
<li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，特别是 p 不能放div </li>
<li>同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="行内元素-inline"><a href="#行内元素-inline" class="headerlink" title="行内元素 inline"></a>行内元素 inline</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等</span><br><span class="line">&lt;span&gt;标签最典型的行内元素。有的地方也称内联元素</span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<ul>
<li><p>相邻行内元素在一行上，一行可以显示多个。</p>
</li>
<li><p>高、宽直接设置是无效的。</p>
</li>
<li><p>默认宽度就是它本身内容的宽度。</p>
</li>
<li><p><strong>行内元素只能容纳文本或则其他行内元素。</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="行内块元素-inline-block"><a href="#行内块元素-inline-block" class="headerlink" title="行内块元素 inline-block"></a>行内块元素 inline-block</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性</span><br></pre></td></tr></table></figure>

<ul>
<li><p>特点：</p>
<ul>
<li>和相邻行内元素（行内块）在一行上,但中间有<font color='red'><strong>空白缝隙</strong></font>。一行可以显示多个</li>
<li>默认宽度就是它本身内容的宽度。</li>
<li>高度，行高、外边距以及内边距都可以控制。</li>
</ul>
</li>
</ul>
<h2 id="区别比较"><a href="#区别比较" class="headerlink" title="区别比较"></a>区别比较</h2><table>
<thead>
<tr>
<th>元素模式</th>
<th>元素排列</th>
<th>设置样式</th>
<th>默认宽度</th>
<th>包含</th>
</tr>
</thead>
<tbody><tr>
<td>块级元素</td>
<td>一行只能放一个块级元素</td>
<td>可以设置宽度高度</td>
<td>容器的100%</td>
<td>容器级可以包含任何标签</td>
</tr>
<tr>
<td>行内元素</td>
<td>一行可以放多个行内元素</td>
<td>不可以直接设置宽度高度</td>
<td>它本身内容的宽度</td>
<td>容纳文本或则其他行内元素</td>
</tr>
<tr>
<td>行内块元素</td>
<td>一行放多个行内块元素</td>
<td>可以设置宽度和高度</td>
<td>它本身内容的宽度</td>
<td></td>
</tr>
</tbody></table>
<h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><ul>
<li>块转行内：display:inline;</li>
<li>行内转块：display:block;</li>
<li>块、行内元素转换为行内块： display: inline-block;</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--浮动</title>
    <url>/2020/11/03/15-32-10/</url>
    <content><![CDATA[<blockquote>
<p>让多个块级元素同一行显示,去除同行元素难以去除的间距</p>
</blockquote>
<ul>
<li><p>浮动只会影响后面的元素，对前面的元素没有影响</p>
</li>
<li><p>要让三个块级盒子一行内显示，必须三个都浮动</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器 &#123; float: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>none</strong></td>
<td>元素不浮动（<strong>默认值</strong>）</td>
</tr>
<tr>
<td><strong>left</strong></td>
<td>元素向<strong>左</strong>浮动</td>
</tr>
<tr>
<td><strong>right</strong></td>
<td>元素向<strong>右</strong>浮动</td>
</tr>
</tbody></table>
<blockquote>
<p>浮动的盒子，把自己原来的位置给下面标准流的盒子，不占有原来位置，是脱离标准流的，俗称 “脱标”。</p>
</blockquote>
<blockquote>
<p><strong>特别注意</strong>：浮动元素会改变display属性， 类似转换为了行内块，但是元素之间没有空白缝隙 </p>
</blockquote>
<span id="more"></span>

<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h4 id="浮动元素与父盒子的关系"><a href="#浮动元素与父盒子的关系" class="headerlink" title="浮动元素与父盒子的关系"></a>浮动元素与父盒子的关系</h4><ul>
<li>子盒子的浮动参照父盒子对齐</li>
<li>不会与父盒子的边框重叠，也不会超过父盒子的内边距</li>
</ul>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>父盒子很多情况下不方便给高度，(例如子盒子里有一大段字，一个屏幕占不下时) 若子盒子为标准流，会撑开父盒子，但若子盒子为浮动，就不会占位置，最后父盒子高度为0，影响下面的标准流盒子。</p>
<p><strong>所以清除浮动是为了清除父级元素高度为0时由于子级元素浮动造成的影响</strong></p>
<ul>
<li><p>方法一：在浮动元素后使用一个空元素（简单方便但添加了无意义的标签，不推荐）</p>
</li>
<li><p>方法二：给浮动元素的父级元素添加 <code>overflow:hidden</code> (简洁但当内容较多需要换行时不会自动换行，导致内容被隐藏)</p>
</li>
<li><p>方法三：为父级元素添加CSS3的 :after 伪元素(不用单独加标签但在IE6-7有自己的写法，淘宝百度等代表)</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--盒子模型</title>
    <url>/2020/11/03/15-32-00/</url>
    <content><![CDATA[<blockquote>
<p>盒子模型有元素的内容、边框（border）、内边距（padding）、和外边距（margin）组成。</p>
</blockquote>
<blockquote>
<p>盒子里面的文字和图片等元素是 内容区域</p>
</blockquote>
<blockquote>
<p>盒子的厚度 我们成为 盒子的边框 </p>
</blockquote>
<blockquote>
<p>盒子内容与边框的距离是内边距</p>
</blockquote>
<blockquote>
<p>盒子与盒子之间的距离是外边距</p>
</blockquote>
<span id="more"></span>

<h2 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 border"></a>边框 border</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : border-width || border-style || border-color </span><br><span class="line">border: <span class="number">1px</span> solid red;  </span><br><span class="line"><span class="comment">/* 没有顺序  */</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td align="center">定义边框粗细，单位是px</td>
</tr>
<tr>
<td>border-style</td>
<td align="center">边框的样式</td>
</tr>
<tr>
<td>border-color</td>
<td align="center">边框颜色</td>
</tr>
</tbody></table>
<ul>
<li><p>边框的样式：</p>
<ul>
<li>none：没有边框即忽略所有边框的宽度（默认值）</li>
<li>solid：边框为单实线(最为常用的)</li>
<li>dashed：边框为虚线  </li>
<li>dotted：边框为点线</li>
</ul>
</li>
<li><p>很多情况下，我们不需要指定4个边框，我们是可以单独给4个边框分别指定的。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">上边框</th>
<th align="left">下边框</th>
<th align="left">左边框</th>
<th align="left">右边框</th>
</tr>
</thead>
<tbody><tr>
<td align="left">border-top-style:样式;</td>
<td align="left">border-bottom-style:样式;</td>
<td align="left">border-left-style:样式;</td>
<td align="left">border-right-style:样式;</td>
</tr>
<tr>
<td align="left">border-top-width:宽度;</td>
<td align="left">border- bottom-width:宽度;</td>
<td align="left">border-left-width:宽度;</td>
<td align="left">border-right-width:宽度;</td>
</tr>
<tr>
<td align="left">border-top-color:颜色;</td>
<td align="left">border- bottom-color:颜色;</td>
<td align="left">border-left-color:颜色;</td>
<td align="left">border-right-color:颜色;</td>
</tr>
<tr>
<td align="left">border-top:宽度 样式 颜色;</td>
<td align="left">border-bottom:宽度 样式 颜色;</td>
<td align="left">border-left:宽度 样式 颜色;</td>
<td align="left">border-right:宽度 样式 颜色;</td>
</tr>
</tbody></table>
<h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><ul>
<li><p>通过表格的<code>cellspacing=&quot;0&quot;</code>,将单元格与单元格之间的距离设置为0，</p>
</li>
<li><p>但是两个单元格之间的边框会出现重叠，从而使边框变粗</p>
</li>
<li><p>通过css属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>&#123; <span class="attribute">border-collapse</span>:collapse; &#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li>collapse 单词是合并的意思</li>
<li>border-collapse:collapse; 表示相邻边框合并在一起。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">	<span class="selector-tag">table</span> &#123;</span><br><span class="line">		<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">		<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">		<span class="attribute">text-align</span>: center;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="selector-tag">table</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">		<span class="attribute">border-collapse</span>: collapse;  <span class="comment">/*合并相邻边框*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 padding"></a>内边距 padding</h2><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>padding-left</td>
<td align="left">左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td align="left">右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td align="left">上内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td align="left">下内边距</td>
</tr>
</tbody></table>
<blockquote>
<p>简写</p>
</blockquote>
<table>
<thead>
<tr>
<th>值的个数</th>
<th>表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>1个值</td>
<td>padding：上下左右内边距;</td>
</tr>
<tr>
<td>2个值</td>
<td>padding: 上下内边距    左右内边距 ；</td>
</tr>
<tr>
<td>3个值</td>
<td>padding：上内边距   左右内边距   下内边距；</td>
</tr>
<tr>
<td>4个值</td>
<td>padding: 上内边距 右内边距 下内边距 左内边距 ；</td>
</tr>
</tbody></table>
<ul>
<li><p>问题</p>
<p>会撑大原来的盒子</p>
</li>
<li><p>解决：</p>
<p>通过给设置了宽高的盒子，减去相应的内边距的值，维持盒子原有的大小</p>
</li>
</ul>
<h2 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h2><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td>margin-left</td>
<td align="left">左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td align="left">右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td align="left">上外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td align="left">下外边距</td>
</tr>
</tbody></table>
<h3 id="块级盒子水平居中"><a href="#块级盒子水平居中" class="headerlink" title="块级盒子水平居中"></a>块级盒子水平居中</h3><ul>
<li>盒子必须指定了宽度（width）</li>
<li><strong>左右的外边距都设置为auto</strong></li>
</ul>
<p>常见的写法，以下下三种都可以。</p>
<ul>
<li>margin-left: auto;   margin-right: auto;</li>
<li>margin: auto;</li>
<li>margin: 0 auto;</li>
</ul>
<h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更灵活方便地控制网页中的元素，制作网页时，我们需要将元素的默认内外边距清除</p>
<p>代码： </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   <span class="attribute">padding</span>:<span class="number">0</span>;         <span class="comment">/* 清除内边距 */</span></span><br><span class="line">   <span class="attribute">margin</span>:<span class="number">0</span>;          <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：  </p>
<ul>
<li>行内元素为了照顾兼容性， 尽量只设置左右内外边距， 不要设置上下内外边距。</li>
</ul>
<h3 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a><font color="red">外边距合并</font></h3><p>使用margin定义块元素的<strong>垂直外边距</strong>时，可能会出现外边距的合并。</p>
<h4 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h4><ul>
<li>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom</li>
<li>下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和</li>
<li><strong>取两个值中的较大者</strong>这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</li>
</ul>
<p><strong>解决方案：尽量给只给一个盒子添加margin值</strong>。</p>
<h4 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h4><ul>
<li>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框</li>
<li>父元素的上外边距会与子元素的上外边距发生合并</li>
<li>合并后的外边距为两者中的较大者</li>
</ul>
<p><strong>解决方案：</strong></p>
<ol>
<li>可以为父元素定义上边框。</li>
<li>可以为父元素定义上内边距</li>
<li>可以为父元素添加overflow:hidden。</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--背景</title>
    <url>/2020/11/03/15-30-58/</url>
    <content><![CDATA[<h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none | url (url) </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td align="center">无背景图（默认的）</td>
</tr>
<tr>
<td>url</td>
<td align="center">使用绝对或相对地址指定背景图像</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : <span class="built_in">url</span>(<span class="string">images/demo.png</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>提倡背景图片后面的地址，url不要加引号。</li>
</ul>
<span id="more"></span>

<h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span> : repeat | no-repeat | repeat-x | repeat-y </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>repeat</td>
<td align="center">背景图像在纵向和横向上平铺（默认的）</td>
</tr>
<tr>
<td>no-repeat</td>
<td align="center">背景图像不平铺</td>
</tr>
<tr>
<td>repeat-x</td>
<td align="center">背景图像在横向上平铺</td>
</tr>
<tr>
<td>repeat-y</td>
<td align="center">背景图像在纵向平铺</td>
</tr>
</tbody></table>
<h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a><strong>背景位置(position)</strong></h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span> : length || length</span><br><span class="line"></span><br><span class="line">background-position : position || position </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td align="center">百分数 | 由浮点数字和单位标识符组成的长度值</td>
</tr>
<tr>
<td>position</td>
<td align="center">top | center | bottom | left | center | right   方位名词</td>
</tr>
</tbody></table>
<ul>
<li>注意：<ul>
<li>必须先指定background-image属性</li>
<li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li>
<li>如果指定两个值，两个值都是方位名字，则两个值前后顺序无关，比如left  top和top  left效果一致</li>
<li>如果只指定了一个方位名词，另一个值默认居中对齐。</li>
<li>如果position 后面是精确坐标， 那么第一个，肯定是 x  第二的一定是y</li>
<li>如果只指定一个数值,那该数值一定是x坐标，另一个默认垂直居中</li>
<li>如果指定的两个值是 精确单位和方位名字混合使用，则第一个值是x坐标，第二个值是y坐标</li>
</ul>
</li>
</ul>
<p><strong>实际工作用的最多的，就是背景图片居中对齐。</strong></p>
<h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><ul>
<li><p>背景附着就是解释背景是滚动的还是固定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-attachment : scroll | fixed </span><br></pre></td></tr></table></figure></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td>scroll</td>
<td align="center">背景图像是随对象内容滚动</td>
</tr>
<tr>
<td>fixed</td>
<td align="center">背景图像固定</td>
</tr>
</tbody></table>
<h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><ul>
<li>background：属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</li>
<li>background: 背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</li>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y  scroll center top ;</span><br></pre></td></tr></table></figure>


<h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>最后一个参数是alpha 透明度  取值范围 0~1之间</li>
<li>我们习惯把0.3 的 0 省略掉  这样写  background: rgba(0, 0, 0, .3);</li>
<li>注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不受影响</li>
<li>因为是CSS3 ，所以 低于 ie9 的版本是不支持的。</li>
</ul>
<h2 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结"></a>背景总结</h2><table>
<thead>
<tr>
<th>属性</th>
<th align="left">作用</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td>background-color</td>
<td align="left">背景颜色</td>
<td align="left">预定义的颜色值&#x2F;十六进制&#x2F;RGB代码</td>
</tr>
<tr>
<td>background-image</td>
<td align="left">背景图片</td>
<td align="left">url(图片路径)</td>
</tr>
<tr>
<td>background-repeat</td>
<td align="left">是否平铺</td>
<td align="left">repeat&#x2F;no-repeat&#x2F;repeat-x&#x2F;repeat-y</td>
</tr>
<tr>
<td>background-position</td>
<td align="left">背景位置</td>
<td align="left">length&#x2F;position    分别是x  和 y坐标， 切记 如果有 精确数值单位，则必须按照先X 后Y 的写法</td>
</tr>
<tr>
<td>background-attachment</td>
<td align="left">背景固定还是滚动</td>
<td align="left">scroll&#x2F;fixed</td>
</tr>
<tr>
<td>背景简写</td>
<td align="left">更简单</td>
<td align="left">背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;  他们没有顺序</td>
</tr>
<tr>
<td>背景透明</td>
<td align="left">让盒子半透明</td>
<td align="left">background: rgba(0,0,0,0.3);   后面必须是 4个值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--选择器</title>
    <url>/2020/11/03/14-30-45/</url>
    <content><![CDATA[<h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><ul>
<li>ID选择器  (唯一标识,不能定义相同名字的两个id) 以#开头<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;认识html标签&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #stress &#123;   //为该id设置样式   以#开头</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;三年级时，我还是一个&lt;span id=&quot;stress&quot;&gt;胆小如鼠&lt;/span&gt;的小女孩&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>类选择器(可以有多个相同的类)  以.开头<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;认识html标签&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .stress &#123;      //为该类添加样式</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;勇气&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;三年级时，我还是一个&lt;span class=&quot;stress&quot;&gt;胆小如鼠&lt;/span&gt;   //设类</span><br><span class="line">的小女孩&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
特别地<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.stress&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">.bigsize&#123;</span><br><span class="line">    font-size:25px;</span><br><span class="line">&#125;         //可以且只可以使用类选择器词列表方法为一个元素同时设置多个样式。</span><br><span class="line">&lt;p&gt;到了&lt;span class=&quot;stress bigsize&quot;&gt;三年级&lt;/span&gt;下学期时，我们班上了一节公开课...&lt;/p&gt;</span><br></pre></td></tr></table></figure></li>
<li>标签选择器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;标签选择器&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">h1&#123;   //为该标签设置样式</span><br><span class="line"> font-weight:normal;</span><br><span class="line"> color:red;</span><br><span class="line">&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;勇气&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;三年级时，我还是一个胆小如鼠的小女孩&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul>
<li><p>子选择器(使所有第一代子元素都有样式)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;子选择器&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .food&gt;li &#123;   //子选择器，作用域为类名下的所有第一代li子元素</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;食物&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;food&quot;&gt;</span><br><span class="line">        &lt;li&gt;水果        //第一代子元素  在作用域内</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;香蕉&lt;/li&gt;   //第三代子元素  作用域外</span><br><span class="line">                &lt;li&gt;苹果&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;梨&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;蔬菜  </span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;白菜&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;油菜&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;卷心菜&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通用选择器(全局选择器,对所有标签生效)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;* 选择符&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    * &#123;    // 对所有标签生效</span><br><span class="line">        color:red;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;勇气&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;三年级时，我还是一个胆小如鼠的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p><strong>后代选择器(使所有后代子元素都有样式)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;后代选择器&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .first span &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .food li &#123;  //后代选择器，作用域为类名下的所有后代的li子元素</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul class=&quot;food&quot;&gt;</span><br><span class="line">        &lt;li&gt;水果</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;香蕉&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;苹果&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;梨&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;蔬菜</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;白菜&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;油菜&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;卷心菜&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>伪类选择器(为标签的状态设置样式)</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;伪类选择符&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    a:hover &#123; // 伪类选择器  //对a标签生效,鼠标放上去后颜色变为红色且字体变大</span><br><span class="line">        color: red;</span><br><span class="line">        font-size:20px;</span><br><span class="line">    &#125;</span><br><span class="line">//a:link  未访问的链接</span><br><span class="line">//a:visited  已访问的链接</span><br><span class="line">//a:hover 鼠标移动到的链接</span><br><span class="line">//a:active 选定的链接</span><br><span class="line">//按照lvha的顺序，以上尽量不要颠倒</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;a&gt;胆小如鼠&lt;/a&gt;的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。&lt;/p&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>分组选择器(简化代码)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;分组选择符&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">   .first,#second span&#123;color:green;&#125;  //为first类和second下的span标签设置样式 </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;勇气&lt;/h1&gt;</span><br><span class="line">    &lt;p class=&quot;first&quot;&gt;三年级时，我还是一个胆小如鼠的小女孩，上课从来不敢回答老师提出的问题，生怕回答错了老师会批评我。&lt;/p&gt;</span><br><span class="line">    &lt;p id=&quot;second&quot;&gt;到了三年级下学期时，我们班上了一节公开课，老师提出了一个很&lt;span&gt;简单&lt;/span&gt;的问题。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
<li>交集选择器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;交集选择符&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">     p.red&#123;color:green;&#125; </span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class=&quot;red&quot;&gt;到了三年级下学期时，我们班上了一节公开课&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<strong>并集选择器(用逗号隔开)</strong></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--logo优化</title>
    <url>/2020/11/14/20-56-38/</url>
    <content><![CDATA[<h2 id="网站logo优化"><a href="#网站logo优化" class="headerlink" title="网站logo优化"></a>网站logo优化</h2><h3 id="logo里放一个h1标签"><a href="#logo里放一个h1标签" class="headerlink" title="logo里放一个h1标签"></a>logo里放一个h1标签</h3><ul>
<li>用于提权，告诉搜索引擎，这个地方很重要</li>
</ul>
<span id="more"></span>

<h3 id="h1里放a标签"><a href="#h1里放a标签" class="headerlink" title="h1里放a标签"></a>h1里放a标签</h3><ul>
<li>用于点击logo时返回首页，并将a转换成块级元素，给大小。并<strong>将logo作为背景图片给a</strong></li>
</ul>
<h3 id="a里放网站名称"><a href="#a里放网站名称" class="headerlink" title="a里放网站名称"></a>a里放网站名称</h3><ul>
<li><p>为了搜索引擎收录我们，但是<strong>文字不能显示出来被用户看到</strong>，具体做法为：</p>
<ul>
<li><p>要用<code>text-indent</code>(首行缩进) 移到盒子外面<code>text-indent: -9999px</code>，然后<code>overflow:hidden</code>   (淘宝的做法)</p>
</li>
<li><p>或者</p>
</li>
<li><p>直接给<code>font-size: 0</code>;  就看不到文字了  (京东的做法)。</p>
</li>
</ul>
</li>
<li><p>最后给a一个<code>title</code>,这样鼠标放到logo上就可以看到提示文字了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础--网页布局总结</title>
    <url>/2020/11/04/14-52-28/</url>
    <content><![CDATA[<p>一个完整的网页，有标准流 、 浮动 、 定位 一起完成布局的。每个都有自己的专门用法。</p>
<h4 id="1-标准流"><a href="#1-标准流" class="headerlink" title="1). 标准流"></a>1). 标准流</h4><p>可以让盒子上下排列 或者 左右排列</p>
<h4 id="2-浮动"><a href="#2-浮动" class="headerlink" title="2). 浮动"></a>2). 浮动</h4><p>可以让多个块级元素一行显示  或者 左右对齐盒子   浮动的盒子就是按照顺序左右排列 </p>
<h4 id="3-定位"><a href="#3-定位" class="headerlink" title="3). 定位"></a>3). 定位</h4><p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来显示，但是每个盒子需要测量数值。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--ico图标</title>
    <url>/2020/11/10/20-57-13/</url>
    <content><![CDATA[<h3 id="使用ico图标"><a href="#使用ico图标" class="headerlink" title="使用ico图标"></a>使用ico图标</h3><ul>
<li><p>首先把icon_name.ico 这个图标放到根目录下。</p>
</li>
<li><p>再html里面，  head 之间 引入 代码。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;icon_name.ico&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span>/&gt;</span>     </span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="制作ico图标"><a href="#制作ico图标" class="headerlink" title="制作ico图标"></a>制作ico图标</h3><p>将图片转换为ico</p>
<ul>
<li>借助于第三方转换网站：<a href="http://www.bitbug.net/">http://www.bitbug.net/</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--margin负值的用途</title>
    <url>/2020/11/08/14-40-16/</url>
    <content><![CDATA[<h2 id="margin负值之美"><a href="#margin负值之美" class="headerlink" title="margin负值之美"></a>margin负值之美</h2><h3 id="1-负边距-定位：水平垂直居中"><a href="#1-负边距-定位：水平垂直居中" class="headerlink" title="1). 负边距+定位：水平垂直居中"></a>1). 负边距+定位：水平垂直居中</h3><pre><code>一个绝对定位的盒子， 利用父级盒子的50%，然后往左(上)走**自己宽度的一半**，可以实现盒子水平垂直居中。
</code></pre>
<h3 id="2-压住盒子相邻边框"><a href="#2-压住盒子相邻边框" class="headerlink" title="2). 压住盒子相邻边框"></a>2). 压住盒子相邻边框</h3><pre><code>用绝对定位和margin负值，将后一个或下一个盒子的边框盖住
</code></pre>
<h3 id="3-突出显示盒子"><a href="#3-突出显示盒子" class="headerlink" title="3). 突出显示盒子"></a>3). 突出显示盒子</h3><pre><code>鼠标经过的盒子，边框变色
</code></pre>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--代码规范</title>
    <url>/2020/11/10/20-26-44/</url>
    <content><![CDATA[<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul>
<li><p>HTML规范</p>
<ul>
<li>基于 <a href="http://www.w3.org/">W3C</a>、<a href="https://developer.apple.com/">苹果开发者</a> 等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。</li>
</ul>
</li>
<li><p>图片规范</p>
<ul>
<li>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</li>
</ul>
</li>
<li><p>CSS规范</p>
<ul>
<li>统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</li>
</ul>
</li>
<li><p>命名规范</p>
<ul>
<li>从 <code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code> 的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="HTML-规范"><a href="#HTML-规范" class="headerlink" title="HTML 规范"></a>HTML 规范</h2><h3 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h3><p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>HTML5标准模版</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5标准模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>更多地区语言参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)</span><br><span class="line">zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)</span><br><span class="line">zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)</span><br><span class="line">zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)</span><br></pre></td></tr></table></figure>

<h3 id="charset-字符集合"><a href="#charset-字符集合" class="headerlink" title="charset 字符集合"></a>charset 字符集合</h3><p>一般情况下统一使用 “UTF-8” 编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;GBK&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><h4 id="HTML代码大小写"><a href="#HTML代码大小写" class="headerlink" title="HTML代码大小写"></a>HTML代码大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;DEMO&quot;&gt;&lt;/div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;DIV CLASS=&quot;DEMO&quot;&gt;&lt;/DIV&gt;</span><br></pre></td></tr></table></figure>
<h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&quot; &gt;</span><br><span class="line">&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&quot; &gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&quot; &gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;name&quot; checked=&quot;checked&quot; &gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=text&gt;	</span><br><span class="line">&lt;input type=&#x27;text&#x27;&gt;</span><br><span class="line">&lt;input type=&quot;radio&quot; name=&quot;name&quot; checked &gt;</span><br></pre></td></tr></table></figure>
<h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more&amp;gt;&amp;gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;#&quot;&gt;more&gt;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;jdc&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;	</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;	</span><br><span class="line">&lt;p&gt; </span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;span&gt;&lt;/span&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;div&gt;&lt;/div&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h2><h3 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a>内容图</h3><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
<li><strong>PC平台单张的图片的大小不应大于 200KB。</strong></li>
</ul>
<h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
<h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 (Compact)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc&#123; display: block;width: 50px;&#125;</span><br></pre></td></tr></table></figure>

<p>一种是展开格式（Expanded）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>团队约定</strong></p>
<p>统一使用展开格式书写样式</p>
<h3 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 推荐 */</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display:block;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">/* 不推荐 */</span><br><span class="line">.JDC&#123;</span><br><span class="line">	DISPLAY:BLOCK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>不使用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="selector-id">#jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">div</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进-1"><a href="#代码缩进-1" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h3><p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123; </span><br><span class="line">    width: 100%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc&#123; </span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逗号分隔的取值，逗号之后一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为单个css选择器或新申明开启新行</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>, </span><br><span class="line"><span class="selector-class">.jdc_logo</span>, </span><br><span class="line"><span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>,jdc_logo,<span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;<span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba(255,255,255,.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba( 255, 255, 255, 0.5 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性值十六进制数值能用简写的尽量用简写</p>
<p><em>推荐：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要为 <code>0</code> 指明单位</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性值引号"><a href="#属性值引号" class="headerlink" title="属性值引号"></a>属性值引号</h3><p>css属性值需要用到引号时，统一使用单引号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&#x27;Hiragino Sans GB&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;Hiragino Sans GB&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h3><p>建议遵循以下顺序：</p>
<ol>
<li>布局定位属性：display &#x2F; position &#x2F; float &#x2F; clear &#x2F; visibility &#x2F; overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>自身属性：width &#x2F; height &#x2F; margin &#x2F; padding &#x2F; border &#x2F; background</li>
<li>文本属性：color &#x2F; font &#x2F; text-decoration &#x2F; text-align &#x2F; vertical-align &#x2F; white- space &#x2F; break-word</li>
<li>其他属性（CSS3）：content &#x2F; cursor &#x2F; border-radius &#x2F; box-shadow &#x2F; text-shadow &#x2F; background:linear-gradient …</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.mozilla.org/css/base/content.css">mozilla官方属性顺序推荐</a></p>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><ul>
<li>项目文件夹：pinyougou</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
<li>产品类图片文件夹： upload</li>
<li>字体类文件夹： fonts</li>
</ul>
<h3 id="ClassName命名"><a href="#ClassName命名" class="headerlink" title="ClassName命名"></a>ClassName命名</h3><p>ClassName的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong> “_” 连接</p>
<p>.nav_top</p>
<h4 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h4><p><strong>注意</strong>：ad、banner、gg、guanggao 等有机会和广告挂勾的字眠不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;ad&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这种广告的英文或拼音类名不应该出现</p>
<p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;fuck&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;jer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;sm&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;gcd&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;div class=&quot;ass&quot;&gt;&lt;/div&gt; </span><br><span class="line">&lt;div class=&quot;KMT&quot;&gt;&lt;/div&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td>关于</td>
</tr>
<tr>
<td>account</td>
<td>账户</td>
</tr>
<tr>
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr>
<td>article</td>
<td>文章</td>
</tr>
<tr>
<td>aside</td>
<td>边栏</td>
</tr>
<tr>
<td>audio</td>
<td>音频</td>
</tr>
<tr>
<td>avatar</td>
<td>头像</td>
</tr>
<tr>
<td>bg,background</td>
<td>背景</td>
</tr>
<tr>
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td>品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr>
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
</tr>
<tr>
<td>chart</td>
<td>图表</td>
</tr>
<tr>
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
</tr>
<tr>
<td>col,column</td>
<td>列</td>
</tr>
<tr>
<td>comment</td>
<td>评论</td>
</tr>
<tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>container</td>
<td>容器</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td>默认</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>details</td>
<td>细节</td>
</tr>
<tr>
<td>disabled</td>
<td>不可用</td>
</tr>
<tr>
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr>
<td>error</td>
<td>错误</td>
</tr>
<tr>
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td>专题</td>
</tr>
<tr>
<td>fewer</td>
<td>收起</td>
</tr>
<tr>
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td>图</td>
</tr>
<tr>
<td>filter</td>
<td>筛选</td>
</tr>
<tr>
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>forum</td>
<td>论坛</td>
</tr>
<tr>
<td>gallery</td>
<td>画廊</td>
</tr>
<tr>
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr>
<td>header</td>
<td>页头</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>hide</td>
<td>隐藏</td>
</tr>
<tr>
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr>
<td>home</td>
<td>主页</td>
</tr>
<tr>
<td>icon</td>
<td>图标</td>
</tr>
<tr>
<td>info,information</td>
<td>信息</td>
</tr>
<tr>
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr>
<td>links</td>
<td>链接</td>
</tr>
<tr>
<td>login</td>
<td>登录</td>
</tr>
<tr>
<td>logout</td>
<td>退出</td>
</tr>
<tr>
<td>logo</td>
<td>标志</td>
</tr>
<tr>
<td>main</td>
<td>主体</td>
</tr>
<tr>
<td>menu</td>
<td>菜单</td>
</tr>
<tr>
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr>
<td>module</td>
<td>模块</td>
</tr>
<tr>
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr>
<td>msg,message</td>
<td>消息</td>
</tr>
<tr>
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr>
<td>next</td>
<td>下一页</td>
</tr>
<tr>
<td>nub</td>
<td>小块</td>
</tr>
<tr>
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr>
<td>output</td>
<td>输出</td>
</tr>
<tr>
<td>pagination</td>
<td>分页</td>
</tr>
<tr>
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr>
<td>preview</td>
<td>预览</td>
</tr>
<tr>
<td>previous</td>
<td>上一页</td>
</tr>
<tr>
<td>primary</td>
<td>主要</td>
</tr>
<tr>
<td>progress</td>
<td>进度条</td>
</tr>
<tr>
<td>promotion</td>
<td>促销</td>
</tr>
<tr>
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr>
<td>reg,register</td>
<td>注册</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>search</td>
<td>搜索</td>
</tr>
<tr>
<td>secondary</td>
<td>次要</td>
</tr>
<tr>
<td>section</td>
<td>区块</td>
</tr>
<tr>
<td>selected</td>
<td>已选</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
<tr>
<td>show</td>
<td>显示</td>
</tr>
<tr>
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr>
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
</tr>
<tr>
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr>
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr>
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr>
<td>summary</td>
<td>摘要</td>
</tr>
<tr>
<td>tab</td>
<td>标签页</td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
</tr>
<tr>
<td>txt,text</td>
<td>文本</td>
</tr>
<tr>
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>tips</td>
<td>提示</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>video</td>
<td>视频</td>
</tr>
<tr>
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr>
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--元素显示与隐藏</title>
    <url>/2020/11/06/17-44-25/</url>
    <content><![CDATA[<h2 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h2><ul>
<li><p>目的</p>
<p>让一个元素在页面中消失或者显示出来</p>
</li>
<li><p>场景</p>
</li>
</ul>
<blockquote>
<p> 类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现</p>
</blockquote>
<span id="more"></span>

<h3 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a><strong>display 显示</strong></h3><ul>
<li><p>display 设置或检索对象是否及如何显示。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: none </span><br><span class="line"><span class="comment">/*隐藏对象*/</span></span><br><span class="line"></span><br><span class="line">display：block </span><br><span class="line"><span class="comment">/*除了转换为块级元素之外，同时还有显示元素的意思。*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<!-- more -->
<ul>
<li>特点： 隐藏之后，<strong>不再保留位置</strong>。<!-- more -->
实际开发场景：</li>
</ul>
<blockquote>
<p>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</p>
</blockquote>
<h3 id="visibility-可见性-了解"><a href="#visibility-可见性-了解" class="headerlink" title="visibility 可见性 (了解)"></a>visibility 可见性 (了解)</h3><ul>
<li><p>设置或检索是否显示对象。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>：visible ; 　</span><br><span class="line"><span class="comment">/*对象可视*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">visibility</span>：hidden; 　 </span><br><span class="line"><span class="comment">/* 对象隐藏*/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>特点： 隐藏之后，<strong>继续保留原有位置</strong>。</p>
</li>
</ul>
<h3 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a><strong>overflow 溢出</strong></h3><ul>
<li><strong>当对象的内容超过其指定高度及宽度时如何管理内容</strong>。</li>
</ul>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>visible</strong></td>
<td>不剪切内容也不添加滚动条</td>
</tr>
<tr>
<td><strong>hidden</strong></td>
<td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td>
</tr>
<tr>
<td><strong>scroll</strong></td>
<td>不管超出内容否，总是显示滚动条</td>
</tr>
<tr>
<td><strong>auto</strong></td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<p>实际开发场景：</p>
<ol>
<li>清除浮动</li>
<li>隐藏超出内容，不允许内容超过父盒子。</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table>
<thead>
<tr>
<th>属性</th>
<th>区别</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><strong>display</strong></td>
<td>隐藏对象，不保留位置</td>
<td>配合后面js做特效，比如下拉菜单，原先没有，鼠标经过，显示下拉菜单， 应用极为广泛</td>
</tr>
<tr>
<td><strong>visibility</strong></td>
<td>隐藏对象，保留位置</td>
<td>使用较少</td>
</tr>
<tr>
<td><strong>overflow</strong></td>
<td>只是隐藏超出大小的部分</td>
<td>1. 可以清除浮动 2. 保证盒子里面的内容不会超出该盒子范围</td>
</tr>
</tbody></table>
<h2 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h2><h3 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h3><ul>
<li>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>:normal </span><br><span class="line"><span class="comment">/* 默认处理方式 */</span></span><br><span class="line"></span><br><span class="line">white-space:nowrap </span><br><span class="line"><span class="comment">/* 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。 */</span></span><br></pre></td></tr></table></figure>

<h3 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h3><ul>
<li>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span> : clip </span><br><span class="line"><span class="comment">/* 不显示省略标记（...），而是简单的裁切  */</span></span><br><span class="line"></span><br><span class="line">text-overflow：ellipsis </span><br><span class="line"><span class="comment">/* 当对象内文本溢出时显示省略标记（...） */</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>一定要首先强制一行内显示，再次和overflow属性  搭配使用</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*1. 先强制一行内显示文本*/</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*2. 超出的部分隐藏*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*3. 文字用省略号替代超出的部分*/</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--圆角边框和盒子阴影</title>
    <url>/2020/11/03/15-32-01/</url>
    <content><![CDATA[<h2 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h2><ul>
<li>语法：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:length;  </span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中每一个值可以为 数值或百分比的形式。 </p>
</li>
<li><p>技巧： 让一个正方形  变成圆圈 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">border-radius: 50%;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>矩形的圆角就不要用百分比了，因为百分比会是表示高度和宽度的一半。</li>
<li>而我们这里矩形就只用高度的一半就好了,精确单位。</li>
</ul>
<span id="more"></span>

<h2 id="盒子阴影-CSS3"><a href="#盒子阴影-CSS3" class="headerlink" title="盒子阴影(CSS3)"></a>盒子阴影(CSS3)</h2><ul>
<li>语法:</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>:水平阴影 垂直阴影 模糊距离（虚实）  阴影尺寸（影子大小）  阴影颜色  内/外阴影；</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需。水平阴影位置，允许为负</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必需。垂直阴影位置，允许为负</td>
</tr>
<tr>
<td>blur</td>
<td>可选。模糊距离</td>
</tr>
<tr>
<td>spread</td>
<td>可选。阴影尺寸</td>
</tr>
<tr>
<td>color</td>
<td>可选。阴影颜色</td>
</tr>
<tr>
<td>inset</td>
<td>可选。将外部阴影(outset)改为内部阴影</td>
</tr>
</tbody></table>
<ul>
<li>前两个属性是必须写的。其余的可以省略。</li>
<li>外阴影 (outset) 是默认的 但是不能写           想要内阴影可以写  inset</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">			<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">			<span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">			<span class="comment">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span></span><br><span class="line">			<span class="comment">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span></span><br><span class="line">			<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span>  <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">4</span>);</span><br><span class="line">			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--垂直对齐</title>
    <url>/2020/11/07/18-12-11/</url>
    <content><![CDATA[<h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><ul>
<li>有宽度的块级元素居中对齐，是margin: 0 auto;</li>
<li>让文字居中对齐，是 text-align: center;</li>
</ul>
<p>vertical-align 垂直对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline |top |middle |bottom </span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>设置或检索对象内容的垂直对其方式。</p>
<ul>
<li><p>注意：</p>
<p>vertical-align 不影响块级元素中的内容对齐，它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>，</p>
<p>特别是行内块元素， <strong>通常用来控制图片&#x2F;表单与文字的对齐</strong>。</p>
</li>
</ul>
<h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p>
<h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><ul>
<li><p>原因：</p>
<ul>
<li><p>图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。</p>
</li>
<li><p>就是图片底侧会有一个空白缝隙。</p>
</li>
</ul>
</li>
<li><p>解决的方法就是：  </p>
<ul>
<li><p>给img vertical-align:middle | top| bottom等等。  让图片不要和基线对齐。</p>
</li>
<li><p>给img 添加 display：block; 转换为块级元素就不会存在问题了。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--三角形</title>
    <url>/2020/11/08/14-40-41/</url>
    <content><![CDATA[<h3 id="CSS三角形之美"><a href="#CSS三角形之美" class="headerlink" title="CSS三角形之美"></a>CSS三角形之美</h3><blockquote>
<p>可以用CSS绘制三角形</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid red;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid green;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid blue;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid <span class="number">#000</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>我们用css边框可以模拟三角效果</li>
<li>宽度高度为0</li>
<li>我们4个边框都要写， 只<strong>保留需要的边框颜色</strong>，其余的不能省略，都改为transparent 透明就好了</li>
<li>为了照顾兼容性 低版本的浏览器，加上 font-size: 0;  line-height: 0;</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--字体图标</title>
    <url>/2020/11/10/21-42-32/</url>
    <content><![CDATA[<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><blockquote>
<p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。很多情况下希望我们的图标是可以缩放的。此时可用字体图标（iconfont).</p>
</blockquote>
<span id="more"></span>

<h3 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h3><p>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..<br>但是<font color="red">本质其实是文字，</font>可以很随意的改变颜色、产生阴影、透明效果等等…<br>本身体积更小，但携带的信息并没有削减。<br>几乎支持所有的浏览器<br>移动端设备必备良药…</p>
<!-- more -->

<h3 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p>
<ol>
<li>上传生成字体包</li>
</ol>
<ul>
<li>当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。<br>​</li>
</ul>
<p>推荐网站：</p>
<ul>
<li><p>icomoon字库</p>
<p>  <a href="http://icomoon.io/">http://icomoon.io</a></p>
<p>  IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p>
</li>
<li><p>阿里icon font字库</p>
<p>  <a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></p>
<p>  这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p>
</li>
</ul>
<ol start="2">
<li>下载兼容字体包</li>
</ol>
<ul>
<li>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</li>
</ul>
<p>当然，我们不需要自己专门的图标，是想网上找几个图标使用， 直接到刚才的网站上找喜欢的下载使用吧。</p>
<ol start="3">
<li>字体引入到HTML</li>
</ol>
<ul>
<li><p>得到压缩包之后，我们得知字体图标 本质就是 字体文件。 注意这个压缩包不要删掉，我们后面还有用的。</p>
</li>
<li><p>最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p>
<ul>
<li><p>首先把 fonts文件夹放入我们 根目录下 。</p>
</li>
<li><p>html标签内里面添加结构</p>
</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">span</span>&gt;&lt;/<span class="selector-tag">span</span>&gt;  </span><br><span class="line">&lt;!-- 这个结构是看不见的 --&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>在样式里面声明字体： 告诉别人我们自己定义的字体(一定注意字体文件路径的问题)</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:  <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.eot?7kkyc2#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.ttf?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.woff?7kkyc2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;fonts/icomoon.svg?7kkyc2#icomoon&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>给盒子使用字体</li>
</ul>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">		<span class="attribute">font-family</span>: <span class="string">&quot;icomoon&quot;</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>追加字体图标</li>
</ol>
<ul>
<li><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p>
</li>
<li><p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p>
</li>
</ul>
<h3 id="拓展-常见字体格式"><a href="#拓展-常见字体格式" class="headerlink" title="拓展 常见字体格式"></a>拓展 常见字体格式</h3><p>不同浏览器所支持的字体格式是不一样的，我们有必要了解一下有关字体格式的知识。</p>
<ol>
<li>TureType(.ttf)格式</li>
</ol>
<p>.ttf字体是Windows和Mac的最常见的字体，是一种RAW格式，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p>
<ol start="2">
<li>OpenType(.otf)格式</li>
</ol>
<p>.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，支持这种字体的浏览器有Firefox3.5+、Chrome4.0+、Safari3.1+、Opera10.0+、iOS Mobile、Safari4.2+；</p>
<ol start="3">
<li>Web Open Font Format(.woff)格式</li>
</ol>
<p>woff字体是Web字体中最佳格式，他是一个开放的TrueType&#x2F;OpenType的压缩版本，同时也支持元数据包的分离，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p>
<ol start="4">
<li>Embedded Open Type(.eot)格式</li>
</ol>
<p>.eot字体是IE专用字体，可以从TrueType创建此格式字体，支持这种字体的浏览器有IE4+；</p>
<ol start="5">
<li>SVG(.svg)格式</li>
</ol>
<p>.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p>
<p>了解了上面的知识后，我们就需要为不同的浏览器准备不同格式的字体，通常我们会通过字体生成工具帮我们生成各种格式的字体，因此无需过于在意字体格式间的区别差异。</p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--滑动门</title>
    <url>/2020/11/08/14-39-34/</url>
    <content><![CDATA[<blockquote>
<p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p>
</blockquote>
<blockquote>
<p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。最常见于各种导航栏的滑动门。</p>
</blockquote>
<p><a href="http://weixin.qq.com/">http://weixin.qq.com/</a></p>
<h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和 盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p>
<span id="more"></span>

<p>一般的经典布局都是这样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- a元素用于构造左边门 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>导航栏内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- span元素用于构造右边门 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/wx.jpg</span>) repeat-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>  <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat left ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">33px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/to.png</span>) no-repeat right ;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">./images/ao.png</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>a设置<strong>背景左侧</strong>，padding撑开合适宽度。    </li>
<li>span设置<strong>背景右侧</strong>， padding撑开合适宽度 剩下由文字继续撑开宽度。<br>背景需要足够长，否则文字会撑开所有背景</li>
<li>之所以a包含span就是因为整个导航都是可以点击的。</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--用户界面样式</title>
    <url>/2020/11/06/18-05-09/</url>
    <content><![CDATA[<blockquote>
<p>所谓的界面样式， 就是更改一些用户操作样式，以便提高更好的用户体验。</p>
<ul>
<li>更改用户的鼠标样式 (滚动条因为兼容性非常差，我们不研究) </li>
<li>表单轮廓等。</li>
<li>防止表单域拖拽</li>
</ul>
</blockquote>
<span id="more"></span>

<h2 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h2><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><strong>default</strong></td>
<td>小白  默认</td>
</tr>
<tr>
<td><strong>pointer</strong></td>
<td>小手</td>
</tr>
<tr>
<td><strong>move</strong></td>
<td>移动</td>
</tr>
<tr>
<td><strong>text</strong></td>
<td>文本</td>
</tr>
<tr>
<td><strong>not-allowed</strong></td>
<td>禁止</td>
</tr>
</tbody></table>
<p> 鼠标放我身上查看效果哦：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:default&quot;</span>&gt;</span>我是小白<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>我是小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:move&quot;</span>&gt;</span>我是移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:text&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;cursor:not-allowed&quot;</span>&gt;</span>我是文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="outline"><a href="#outline" class="headerlink" title="outline"></a>outline</h2><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。 </p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">outline</span> : outline-color ||outline-style || outline-width </span><br></pre></td></tr></table></figure>

<p> 但是我们都不关心可以设置多少，我们平时都是去掉的。 li  </p>
<p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;outline: 0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h2><p>实际开发中，我们文本域右下角不可以拖拽： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">style</span>=<span class="string">&quot;resize: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>属性</th>
<th>用途</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><strong>鼠标样式</strong></td>
<td>更改鼠标样式cursor</td>
<td>样式很多，重点记住 pointer</td>
</tr>
<tr>
<td><strong>轮廓线</strong></td>
<td>表单默认outline</td>
<td>outline轮廓线，我们一般直接去掉;border是边框，会经常用</td>
</tr>
<tr>
<td>防止拖拽</td>
<td>主要针对文本域resize</td>
<td>防止用户随意拖拽文本域，造成页面布局混乱，resize:none</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--精灵技术</title>
    <url>/2020/11/08/09-30-48/</url>
    <content><![CDATA[<h2 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h2><blockquote>
<p>当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p>
</blockquote>
<blockquote>
<p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。</p>
</blockquote>
<blockquote>
<p> <strong>为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度。</strong></p>
</blockquote>
<p>由此出现了CSS精灵技术</p>
<span id="more"></span>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><blockquote>
<p>所谓精灵技术其实是将网页中的一些背景图像整合到一张大图中（精灵图），这样各个网页元素通常只需要精灵图中不同位置的某个小图，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。</p>
</blockquote>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>我们需要使用CSS的</p>
<ul>
<li>background-image、</li>
<li>background-repeat</li>
<li>background-position属性进行背景定位，</li>
<li>其中最关键的是使用background-position属性精确地定位。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>首先我们知道，css精灵技术主要针对于背景图片，插入的图片是不需要这个技术的。</p>
<ol>
<li>精确测量每个小背景图片的大小和位置。</li>
<li>给盒子指定小背景图片时，背景定位基本都是<strong>负值</strong>。</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--过渡&amp;获取焦点</title>
    <url>/2020/11/22/14-51-18/</url>
    <content><![CDATA[<h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p>
</blockquote>
<blockquote>
<p>过渡动画:是<strong>从一个状态渐渐的过渡到另外一个状态</strong></p>
</blockquote>
<blockquote>
<p>可以让我们页面更好看，更动感十足，虽然 低版本浏览器不支持（ie9以下版本） 但是不会影响页面布局。</p>
</blockquote>
<blockquote>
<p>经常和 :hover 一起 搭配使用。</p>
</blockquote>
<span id="more"></span>

<h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式:"></a>语法格式:</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性  花费时间  运动曲线  何时开始;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>CSS</th>
</tr>
</thead>
<tbody><tr>
<td>transition</td>
<td>简写属性，用于在一个属性中设置四个过渡属性。</td>
<td>3</td>
</tr>
<tr>
<td>transition-property</td>
<td>规定应用过渡的 CSS 属性的名称。</td>
<td>3</td>
</tr>
<tr>
<td>transition-duration</td>
<td>定义过渡效果花费的时间。默认是 0。</td>
<td>3</td>
</tr>
<tr>
<td>transition-timing-function</td>
<td>规定过渡效果的时间曲线。默认是<code>ease</code>。</td>
<td>3</td>
</tr>
<tr>
<td>transition-delay</td>
<td>规定过渡效果何时开始。默认是 0。</td>
<td>3</td>
</tr>
</tbody></table>
<ul>
<li><p>属性</p>
<ul>
<li>属性就是想要变化的css属性，宽度、高度、背景颜色、内外边距都可以 。</li>
<li>如果想要所有的属性都变化过渡，写一个<code>all</code>就可以。</li>
</ul>
</li>
<li><p>花费时间</p>
<ul>
<li>transition-duration  花费时间,<strong>必须写单位</strong>,s或ms</li>
</ul>
</li>
<li><p>运动曲线(可省略)</p>
<ul>
<li>linear 匀速</li>
<li>ease(默认)  逐渐变慢</li>
<li>ease-in 加速</li>
<li>ease-out 减速</li>
<li>ease-in-out 先加速后减速</li>
</ul>
</li>
<li><p>何时开始(可省略)</p>
<ul>
<li>默认是0s，鼠标触发就立即开始，可以设置延迟触发时间</li>
</ul>
</li>
</ul>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span></span><br><span class="line">    <span class="attribute">transition</span>: width <span class="number">0.6s</span> ease <span class="number">0s</span>, height <span class="number">0.3s</span> ease-in <span class="number">1s</span>;</span><br><span class="line">    <span class="comment">/* 若有多组属性，用逗号隔开 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;  </span><br><span class="line">    <span class="comment">/* 鼠标经过盒子，我们的宽度变为400 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: all <span class="number">0.6s</span>;  </span><br><span class="line"><span class="comment">/* 所有属性都变化用all就可以了，后面俩个属性可以省略 */</span></span><br></pre></td></tr></table></figure>

<h4 id="常见效果："><a href="#常见效果：" class="headerlink" title="常见效果："></a>常见效果：</h4><ol>
<li>按钮变换底色</li>
<li>图片移动</li>
<li>小米效果 （阴影效果）</li>
<li>传智导航栏效果 等等</li>
</ol>
<h2 id="获取焦点-CSS3"><a href="#获取焦点-CSS3" class="headerlink" title="获取焦点(CSS3)"></a>获取焦点(CSS3)</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p><code>:focus</code> 伪类选择器用于选取获得焦点的元素(主要指表单元素),提供获取焦点后的样式，实现动画效果</p>
</blockquote>
<h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid transparent;</span><br><span class="line">  <span class="comment">/* transparent:透明色 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">  <span class="comment">/* 配合过渡一起使用更佳 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取焦点后，宽度变成80px，边框变颜色 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS拓展--网站优化三大标签</title>
    <url>/2020/11/10/21-34-47/</url>
    <content><![CDATA[<h2 id="网站优化三大标签"><a href="#网站优化三大标签" class="headerlink" title="网站优化三大标签"></a>网站优化三大标签</h2><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！</p>
<p>常见的搜索引擎，比如百度，谷歌，雅虎，搜狗等等..</p>
<p>SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。</p>
<span id="more"></span>

<h3 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h3><p>title具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。</p>
<p>建议：</p>
<p>首页标题：网站名（产品名）- 网站的介绍    </p>
<p>例如：</p>
<p>品优购-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p>
<p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p>
<h3 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description  网站说明"></a>Description  网站说明</h3><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。<br>我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。</p>
<p>品优购网：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;品优购JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ol>
<li>描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。</li>
<li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。</li>
<li>补充在 title  和 keywords  中未能充分表述的说明.</li>
<li>用英文逗号 关键词1,关键词2</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Keywords-关键字"><a href="#Keywords-关键字" class="headerlink" title="Keywords 关键字"></a>Keywords 关键字</h3><p>Keywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。</p>
<p>品优购网：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;Keywords&quot; content=&quot;网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,品优购&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>小米网：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;小米,小米6,红米Note4,小米MIX,小米商城&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>我们的网页要做的优秀，符合搜索引擎的要求，才可以让搜索引擎优先显示我们的网页。</li>
</ol>
<p>所以我们的网站要做很多的优化， 其中就有这三大标签。</p>
<ol start="2">
<li>一般情况下，三大标签里面的优化词，都是专门的优化人员写的，我们大概了解一下规范就可以了。</li>
<li>我们的主要任务是，能写出这三大标签， 然后把优化人员给我们的内容，添加到里面。</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS经典布局-登录注册</title>
    <url>/2020/11/23/15-41-01/</url>
    <content><![CDATA[<h2 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><ul>
<li>由一个居中的大盒子包裹</li>
<li>里面的每一行是一个<code>li</code>,由<code>ul</code>包裹</li>
<li>标题是<code>label</code>标签</li>
<li>输入文本框是<code>input</code>标签</li>
<li>提示信息是<code>span</code>标签</li>
<li>提示信息前的×和√是图片,作为<code>i</code>标签的背景图片</li>
<li><strong><font weight=bold> <code>ul</code>外面包裹表单域<code>form</code></font></strong></li>
</ul>
<span id="more"></span>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register_area&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register_header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fl&quot;</span>&gt;</span>注册新用户<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fr&quot;</span>&gt;</span>我有账号,去<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register_form&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表单域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;phone&quot;</span>&gt;</span>手机号:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;error_icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>手机号码格式不正确，请从新输入<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span>短信验证码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>登录密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;success_icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>恭喜您输入正确<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;safe&quot;</span>&gt;</span></span><br><span class="line">                    安全程度</span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;ruo&quot;</span>&gt;</span>弱<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;zhong&quot;</span>&gt;</span>中<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;qiang&quot;</span>&gt;</span>强<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;con_password&quot;</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;con_password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;inp&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;success_icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>恭喜您输入正确<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>同意协议并注册</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>《知果果用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;完成注册&quot;</span> <span class="attr">class</span>=<span class="string">&quot;over&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.register_area</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">520px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.register_header</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fl</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fr</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c81623</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.register_form</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.register_form</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.register_form</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inp</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">238px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#df3033</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error_icon</span>,</span><br><span class="line"><span class="selector-class">.success_icon</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/error.png</span>) no-repeat;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="comment">/* 行内块中图片和文字垂直对齐 */</span></span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#40b83f</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success_icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../img/success.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.safe</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">187px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#b2b2b2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.safe</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ruo</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#de1111</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.zhong</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#40b83f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.qiang</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f79100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.agree</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.agree</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.agree</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#1ba1e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.over</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c81623</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">130px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git--拉取仓库更新代码</title>
    <url>/2020/07/05/21-08-04/</url>
    <content><![CDATA[<h2 id="在仓库代码有更新的情况下拉取更新代码"><a href="#在仓库代码有更新的情况下拉取更新代码" class="headerlink" title="在仓库代码有更新的情况下拉取更新代码"></a>在仓库代码有更新的情况下拉取更新代码</h2><p>首先取决于你是否想要保存本地修改。（<a href="https://blog.csdn.net/nakiri_arisu/article/details/80259531#yes">是</a> &#x2F;<a href="https://blog.csdn.net/nakiri_arisu/article/details/80259531#no">否</a>）</p>
<h3 id="是"><a href="#是" class="headerlink" title="是"></a>是</h3><p>我们有如下三部曲</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash  //保存工作现场</span><br><span class="line">git pull origin master  // 拉取仓库代码</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p><code>git stash</code>的时候会把你本地快照，然后<code>git pull</code> 就不会阻止你了，pull完之后这时你的代码并没有保留你的修改。惊了！ 别急，我们之前好像做了什么？</p>
<h4 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h4><p>这时候执行 <code>git stash pop</code> 可以从git栈中获取到最近一次<strong>stash</strong>进去的内容，恢复工作区的内容，并且会删除栈中对应的stash</p>
<p>这时候你去本地看会发现发生冲突的本地修改还在，这时候你该commit push啥的就悉听尊便了。</p>
<h3 id="否"><a href="#否" class="headerlink" title="否"></a>否</h3><p>既然不想保留本地的修改，那好办。直接将本地的状态恢复到上一个commit id 。然后用远程的代码直接覆盖本地就好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard </span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git--推送到项目笔记</title>
    <url>/2020/07/08/21-08-23/</url>
    <content><![CDATA[<h2 id="首先，我们要在git-Bash里面创建版本库"><a href="#首先，我们要在git-Bash里面创建版本库" class="headerlink" title="首先，我们要在git Bash里面创建版本库"></a>首先，我们要在git Bash里面创建版本库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit //创建新文件夹</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure>

<ol>
<li><code>fork</code>github上仓库</li>
<li>通过<code>git init</code>命令将该文件夹初始化</li>
<li><code>git clone &lt;http/SSH&gt;</code>克隆远程库到本地库</li>
<li><code>git remote add &lt;别用名&gt; &lt;http/SSH&gt;</code>关联远程库（一定要关联自己克隆的远程库）</li>
<li>可以通过<code>git remote -v</code>来查看关联的远程库</li>
<li><code>git checkout -b &lt;branch&gt;</code>来创建新的分支</li>
<li><code>vim &lt;filename&gt;</code>编写文件</li>
<li><code>git add</code> <code>git commit -m &quot;&lt;提交说明&gt;&quot;</code>将文件提交到本地库里。</li>
<li>通过<code>git push -u &lt;别用名&gt; &lt;branch&gt;</code>将修改推送到自己克隆的远程库中</li>
<li>在github上面的仓库上可以看到自己的修改</li>
<li>在Comparing changes界面中点击pull request</li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git--笔记</title>
    <url>/2020/06/05/21-07-32/</url>
    <content><![CDATA[<h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><ul>
<li>Git是分布式版本控制系统</li>
<li>集中式VS分布式，SVN VS Git</li>
</ul>
<ol>
<li>SVN和Git主要的区别在于历史版本维护的位置</li>
<li>Git本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而SVN的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行。</li>
<li>这样的好处在于：</li>
</ol>
<ul>
<li>自己可以在脱机环境查看开发的版本历史。</li>
<li>多人开发时如果充当中央仓库的Git仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。</li>
</ul>
<hr>
<span id="more"></span>
<h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a><strong>创建版本库</strong></h3><h4 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure>

<h4 id="添加文件到Git仓库"><a href="#添加文件到Git仓库" class="headerlink" title="添加文件到Git仓库"></a>添加文件到Git仓库</h4><p>包括两步：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add &lt;file&gt;</span><br><span class="line">$ git commit -m &quot;description&quot;</span><br></pre></td></tr></table></figure>
<p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，-m后面输入的是本次提交的说明，可以输入任意内容。</p>
<h4 id="查看当前路径"><a href="#查看当前路径" class="headerlink" title="查看当前路径"></a>查看当前路径</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br></pre></td></tr></table></figure>

<h4 id="退出vi编辑器"><a href="#退出vi编辑器" class="headerlink" title="退出vi编辑器"></a>退出vi编辑器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Esc : wq</span><br></pre></td></tr></table></figure>

<h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a><strong>查看工作区状态</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a><strong>查看修改内容</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">$ git diff --cached</span><br><span class="line">$ git diff HEAD -- &lt;file&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li>
<li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li>
<li><code>git diff HEAD -- &lt;file&gt;</code> 可以查看工作区和版本库里面最新版本的区别</li>
</ul>
<h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a><strong>查看提交日志</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure>

<h3 id="简化日志输出信息"><a href="#简化日志输出信息" class="headerlink" title="简化日志输出信息"></a><strong>简化日志输出信息</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">$ git log --oneline   省略部分版本号</span><br></pre></td></tr></table></figure>

<h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a><strong>查看命令历史</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h3 id="查看文件修改状况"><a href="#查看文件修改状况" class="headerlink" title="查看文件修改状况"></a><strong>查看文件修改状况</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">$ git diff HEAD -- &lt;filename&gt;.txt 可以查看工作区和版本库里面最新版本的区别</span><br></pre></td></tr></table></figure>

<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a><strong>版本回退</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p>以上命令是返回上一个版本，在Git中，用HEAD表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>。</p>
<h3 id="回退指定版本号"><a href="#回退指定版本号" class="headerlink" title="回退指定版本号"></a><strong>回退指定版本号</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br></pre></td></tr></table></figure>

<p><code>commit_id</code>是版本号，是一个用SHA1计算出的序列</p>
<h3 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a><strong>工作区、暂存区和版本库</strong></h3><p>工作区：在电脑里能看到的目录； 版本库：在工作区有一个隐藏目录<code>.git</code>，是Git的版本库。 Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。</p>
<p>进一步解释一些命令：</p>
<ul>
<li><code>git add</code>实际上是把文件添加到暂存区</li>
<li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/16731485-06ed812d42c5ea6a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="工作区，暂存区，版本库之间关系图"></p>
<hr>
<h2 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a><strong>设置签名</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">项目级别：</span><br><span class="line"></span><br><span class="line">$ git config user.name tom-pro</span><br><span class="line">$ git config user.email goodMorning@qq.com</span><br><span class="line"></span><br><span class="line">系统用户级别：</span><br><span class="line"></span><br><span class="line">$ git config --global user.name tom-pro</span><br><span class="line">$ git config --global user.email goodMorning@qq.com</span><br><span class="line"></span><br><span class="line">显示用户名与邮箱：</span><br><span class="line"></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>
<p>作用：区分不同开发人员的身份</p>
<p>命令：</p>
<pre><code>项目级别/仓库级别：仅在当前本地库范围内有效

系统用户级别：登录当前操作系统的用户范围
</code></pre>
<p>级别优先级：</p>
<pre><code>就近原则：项目级别优先于系统用户级别

二者都没有，则Git Bash显示错误
</code></pre>
<p>工作区：</p>
<pre><code>就是能在电脑里看到的目录
</code></pre>
<p>版本库：</p>
<pre><code>工作区都有一个隐藏目录.git，这个不算工作区，而是Git的版本库

Git的版本库里存了很多东西，最重要的是称为stage（或者叫index）的暂存区，还有Git自动创建的第一个分支master，以及指向master的一个指针叫HEAD。    
</code></pre>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a><strong>撤销修改</strong></h3><h4 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;  也可还原删除</span><br></pre></td></tr></table></figure>

<p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p>
<ol>
<li><p>一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
</li>
<li><p>一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
</li>
</ol>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<h4 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h4><p>分两步： 第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>第二步，撤销工作区的修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>小结：</p>
<ol>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>。</li>
<li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了第一步，第二步按第一步操作。</li>
<li>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</li>
</ol>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p><code>git rm &lt;file&gt;</code>相当于执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm &lt;file&gt;</span><br><span class="line">$ git add &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p>进一步的解释</p>
<p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？ </p>
<p>A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了</p>
<p>Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的text.txt也删除了，怎么恢复？</p>
<p>A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset head text.txt</span><br><span class="line">$ git checkout -- text.txt</span><br></pre></td></tr></table></figure>
<p>Q：如果真的想从版本库里面删除文件怎么做？ </p>
<p>A：执行g<code>it commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p>
<h3 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a><strong>查看目录</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;filename&gt; 一次显示整个文件</span><br><span class="line">cat &gt;filename 只能创建新文件，不能编辑已有文件</span><br><span class="line">cat file1 file2 &gt; file 将几个文件合并为一个文件</span><br></pre></td></tr></table></figure>

<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a><strong>远程仓库</strong></h3><h4 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure>
<h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/username/repositoryname.git</span><br></pre></td></tr></table></figure>
<h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<p><code>-u</code> 表示第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p>
<h4 id="从远程克隆"><a href="#从远程克隆" class="headerlink" title="从远程克隆"></a>从远程克隆</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/usern/repositoryname.git</span><br></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>;</p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；<br>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>
<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
<hr>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a><strong>分支</strong></h2><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支"></a>合并某分支到当前分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph</span><br></pre></td></tr></table></figure>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p>
<h4 id="普通模式合并分支"><a href="#普通模式合并分支" class="headerlink" title="普通模式合并分支"></a>普通模式合并分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;description&quot; &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。</p>
<h4 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure>
<h4 id="查看工作现场"><a href="#查看工作现场" class="headerlink" title="查看工作现场"></a>查看工作现场</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<h4 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a>恢复工作现场</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash drop 删除stash内容</span><br><span class="line">$ git stash apply 恢复工作现场，但stash内容不删除</span><br><span class="line">$ git stash pop  恢复工作现场的同时将stash内容删除</span><br></pre></td></tr></table></figure>
<h4 id="强行删除一个没有合并过的分支"><a href="#强行删除一个没有合并过的分支" class="headerlink" title="强行删除一个没有合并过的分支"></a>强行删除一个没有合并过的分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -D &lt;branchname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure>
<h4 id="在本地创建和远程分支对应的分支"><a href="#在本地创建和远程分支对应的分支" class="headerlink" title="在本地创建和远程分支对应的分支"></a>在本地创建和远程分支对应的分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout -b branch-name origin/branch-name</span><br></pre></td></tr></table></figure>
<p>本地和远程分支的名称最好一致。</p>
<h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch --set-upstream branch-name origin/branch-name；</span><br></pre></td></tr></table></figure>
<h4 id="从本地推送分支"><a href="#从本地推送分支" class="headerlink" title="从本地推送分支"></a>从本地推送分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin branch-name</span><br></pre></td></tr></table></figure>
<p>如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>
<h4 id="从远程抓取分支"><a href="#从远程抓取分支" class="headerlink" title="从远程抓取分支"></a>从远程抓取分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>
<p>如果有冲突，要先处理冲突。</p>
<h4 id="从远程抓取分支（变基）"><a href="#从远程抓取分支（变基）" class="headerlink" title="从远程抓取分支（变基）"></a>从远程抓取分支（变基）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure>
<p>如果有冲突，要先处理冲突。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git rebase --abort 会放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；</span><br><span class="line"></span><br><span class="line">git rebase --skip 则会将引起冲突的commits丢弃掉（慎用！！）；</span><br><span class="line"></span><br><span class="line">git rebase --continue 合并冲突，结合&quot;git add 文件&quot;命令一起用与修复冲突，提示开发者，一步一步地有没有解决冲突。（fix conflicts and then run “git rebase --continue”）</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a><strong>标签</strong></h2><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h4 id="新建一个标签"><a href="#新建一个标签" class="headerlink" title="新建一个标签"></a>新建一个标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为HEAD，也可以指定一个commit id。</p>
<h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure>
<p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息。</p>
<h4 id="PGP签名标签"><a href="#PGP签名标签" class="headerlink" title="PGP签名标签"></a>PGP签名标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</span><br></pre></td></tr></table></figure>
<p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签。</p>
<h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure>
<h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签"></a>推送一个本地标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure>
<h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d &lt;tagname&gt;</span><br></pre></td></tr></table></figure>
<h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h3 id="多屏控制方式"><a href="#多屏控制方式" class="headerlink" title="多屏控制方式"></a><strong>多屏控制方式</strong></h3><pre><code>空格向下翻页

b向上翻页
  
q退出
</code></pre>
<hr>
<h2 id="变基"><a href="#变基" class="headerlink" title="变基"></a><strong>变基</strong></h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br><span class="line">git rebase master</span><br><span class="line">将&lt;branch&gt;的分支变基到master上</span><br></pre></td></tr></table></figure>

<p>在分支和master上都有修改时，直接使用<code>git merge &lt;branch&gt;</code>合并会有冲突。</p>
<p><code>git rebase master</code>这条指令是将branch的修改到master之前的提交上，再将这个修改合并到master的修改上，注意，这时，之前branch分支仍然存在，需删掉分支。</p>
<p>变基的根本目的是使提交路线成为一条直线。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --onto master server client</span><br></pre></td></tr></table></figure>

<p>取出client分支，找出client和server的共同祖先之后的修改，将client变基到master分支上，再切换到master分支（git checkout master），将client合并到master上，则不会发生冲突，server保持不变。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法</title>
    <url>/2022/02/10/00-00-00/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Vue-是什么？"><a href="#Vue-是什么？" class="headerlink" title="Vue 是什么？"></a>Vue 是什么？</h3><ul>
<li>官网：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></li>
<li>Vue 是一套用于构建用户界面的渐进式js框架</li>
<li>声明式渲染→组件系统→客户端路由→集中式状态管理→项目构建</li>
<li>灵活：在一个库和一套完整框架之间自如伸缩 ；高效：20kB运行大小，超快虚拟 DOM</li>
<li>vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合</li>
</ul>
<span id="more"></span>

<p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p>
<ul>
<li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li>
<li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li>
<li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="使用Vue将helloworld-渲染到页面上"><a href="#使用Vue将helloworld-渲染到页面上" class="headerlink" title="使用Vue将helloworld  渲染到页面上"></a>使用Vue将helloworld  渲染到页面上</h3><p>Vue语法会编译成原生语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--插值表达式，支持基本计算--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;1 + 2&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">//元素挂载位置,值是CSS选择器或者DOM元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;  <span class="comment">//模型数据（值是一个对象）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue模板语法"><a href="#Vue模板语法" class="headerlink" title="Vue模板语法"></a>Vue模板语法</h2><h3 id="前端渲染方式"><a href="#前端渲染方式" class="headerlink" title="前端渲染方式"></a>前端渲染方式</h3><ul>
<li><p>原生js拼接字符串 </p>
<ul>
<li>缺点：不同开发人员的代码风格差别很大，后期不易维护</li>
</ul>
</li>
<li><p>使用前端模板引擎 </p>
<ul>
<li>缺点：没有专门提供事件机制</li>
</ul>
</li>
<li><p>使用vue特有的模板语法</p>
</li>
</ul>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>官网：<a href="https://cn.vuejs.org/v2/api">https://cn.vuejs.org/v2/api</a></p>
<ul>
<li>本质就是自定义属性</li>
<li>Vue中指定都是以 v- 开头</li>
</ul>
<h4 id="v-cloak指令"><a href="#v-cloak指令" class="headerlink" title="v-cloak指令"></a>v-cloak指令</h4><ul>
<li><p>防止页面加载时出现闪烁问题</p>
</li>
<li><p>在数据渲染完之后，v-cloak 属性会被自动去除</p>
</li>
<li><p>原理：为插值语法添加v-cloak属性，先隐藏，待数据渲染完后，该属性自动去除，元素自然显示出来</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*1、通过属性选择器选择到 带有属性 v-cloak的标签 让他隐藏*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2、 让带有插值语法的标签添加 v-cloak 属性 </span></span><br><span class="line"><span class="comment">    在数据渲染完场之后，v-cloak 属性会被自动去除，</span></span><br><span class="line"><span class="comment">    也就是对应的标签会变为可见--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span>  <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="数据绑定指令"><a href="#数据绑定指令" class="headerlink" title="数据绑定指令"></a>数据绑定指令</h4><ol>
<li><h5 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h5></li>
</ol>
<ul>
<li>v-text指令用于将数据填充到标签中，作用与插值表达式类似，但是没有闪动问题，比插值表达式更简洁</li>
<li>不解析html标签</li>
<li>注意：此处为单向绑定，数据对象上的值改变，插值会发生变化；但是当插值发生变化并不会影响数据对象的值</li>
</ul>
<ol start="2">
<li><h5 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h5></li>
</ol>
<ul>
<li><p>用法和v-text 相似  但是他可以将HTML片段填充到标签中</p>
</li>
<li><p>可能有安全问题, 一般只在可信任内容上使用 <code>v-html</code>，<strong>不能</strong>用在用户提交的内容上，本网站内部数据可以使用，来自第三方的数据不可以用</p>
</li>
<li><p>它与v-text区别在于v-text输出的是纯文本，浏览器不会对其再进行html解析，但v-html会将其当html标签解析后输出。</p>
</li>
</ul>
<ol start="3">
<li><h5 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h5></li>
</ol>
<ul>
<li>显示原始信息  跳过编译过程</li>
<li>跳过这个元素和它的子元素的编译过程。</li>
<li><strong>一些不需要编译的静态的内容 加这个指令可以加快渲染</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Hello Vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Hello Vue--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--HTML--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;msg1&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--&#123;&#123;msg&#125;&#125;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg1</span>: <span class="string">&#x27;&lt;h1&gt;HTML&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h4><h5 id="什么是数据的响应式"><a href="#什么是数据的响应式" class="headerlink" title="什么是数据的响应式"></a>什么是数据的响应式</h5><p>数据的变化导致页面内容的变化</p>
<h5 id="什么是数据绑定"><a href="#什么是数据绑定" class="headerlink" title="什么是数据绑定"></a>什么是数据绑定</h5><p>就是将数据填充到标签中，前面介绍的插值表达式和数据绑定指令就是在做数据绑定</p>
<h5 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h5><ul>
<li>只编译一次，显示内容之后不具有响应式功能</li>
<li>应用场景：如果显示的信息后续不需要再修改，可以使用v-once，这样可以提高性能。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 即使data里面定义了msg 后期我们修改了 仍然显示的是第一次data里面存储的数据即 Hello Vue.js  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><ul>
<li>当数据发生变化的时候，视图也就发生变化</li>
<li>当视图发生变化的时候，数据也会跟着同步变化</li>
<li>比如表单的输入域</li>
</ul>
<h4 id="v-model指令"><a href="#v-model指令" class="headerlink" title="v-model指令"></a>v-model指令</h4><ul>
<li>限制在 <code>&lt;input&gt;&lt;select&gt;&lt;textarea&gt;components</code>中使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当表单域中内容变化时，上面div中的内容会跟着变化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Hello Vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="mvvm设计思想"><a href="#mvvm设计思想" class="headerlink" title="mvvm设计思想"></a>mvvm设计思想</h4><ul>
<li>MVC 是后端的分层开发概念； MVVM是前端视图层的概念，主要关注于 视图层分离，MVVM把前端的视图层，分为了 三部分(M)Model, (V)View , (VM)ViewModel</li>
<li>m   model  <ul>
<li>数据层   Vue 中数据层都放在 data 里面</li>
</ul>
</li>
<li>v   view   视图、模板，本质是DOM  <ul>
<li>Vue  中  view      即 我们的HTML页面</li>
</ul>
</li>
<li>vm  view-model    控制器  实现控制逻辑   将数据和视图层建立联系      <ul>
<li>vm 即  Vue 的实例  就是 vm</li>
</ul>
</li>
</ul>
<p>![](E:\Tb前端资源笔记\17-21 Vue.js项目实战开发\17-19vue基础\笔记\images\1.jpg)</p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><h4 id="v-on指令"><a href="#v-on指令" class="headerlink" title="v-on指令"></a>v-on指令</h4><ul>
<li><p>用来绑定事件的</p>
</li>
<li><p>形式如：v-on:click，缩写为 @click;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--data中的num在按钮的控制下自增，会实时反映到标签中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--基本用法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--简写--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用函数--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这种方式会默认传递事件对象参数作为第一个参数，即$event--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle1&#x27;</span>&gt;</span>点击2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事件对象$event--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle2(123,$event)&#x27;</span>&gt;</span>点击3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="attr">methods</span>: &#123; <span class="comment">// methods中主要是定义一些函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">handle1</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">            	&#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//handle1: function(event)&#123;  //接受默认传递的事件对象参数</span></span></span><br><span class="line"><span class="language-javascript">            	<span class="comment">//	console.log(event.target.innerHTML);</span></span></span><br><span class="line"><span class="language-javascript">        		<span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">handle2</span>: <span class="keyword">function</span>(<span class="params">p,event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//在函数中想要使用data里面的数据一定要加this</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 这里的this是Vue的实例对象</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === vm);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="修饰符（在官网中有更多修饰符）"><a href="#修饰符（在官网中有更多修饰符）" class="headerlink" title="修饰符（在官网中有更多修饰符）"></a>修饰符（在官网中有更多修饰符）</h5><ul>
<li><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求。</p>
</li>
<li><p>Vue 不推荐我们操作DOM    为了解决这个问题，Vue.js 为 <code>v-on</code> 提供了<strong>事件修饰符</strong></p>
</li>
<li><p>修饰符是由点开头的指令后缀来表示的</p>
</li>
<li><p>事件修饰符</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--.stop 阻止冒泡--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle0&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.stop</span>=<span class="string">&#x27;handle1&#x27;</span>&gt;</span>点击1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--.prevent 阻止默认行为--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.prevent</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</span><br></pre></td></tr></table></figure>

<ul>
<li>按键修饰符</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">常用的按键修饰符</span><br><span class="line">.enter =&gt;    enter键</span><br><span class="line">.tab =&gt; tab键</span><br><span class="line">.delete (捕获“删除”和“退格”按键) =&gt;  删除键</span><br><span class="line">.esc =&gt; 取消键</span><br><span class="line">.space =&gt;  空格键</span><br><span class="line">.up =&gt;  上</span><br><span class="line">.down =&gt;  下</span><br><span class="line">.left =&gt;  左</span><br><span class="line">.right =&gt;  右</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        用户名：</span><br><span class="line">        <span class="comment">&lt;!--在用户名输入框中点击删除键会触发clearContent函数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.delete</span>=<span class="string">&#x27;clearContent&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;uname&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        密码：</span><br><span class="line">        <span class="comment">&lt;!--在密码输入框中点击删除键会触发handleSubmit函数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keyup.f1</span>=<span class="string">&#x27;handleSubmit&#x27;</span> <span class="attr">v-model</span>=<span class="string">&#x27;pwd&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handleSubmit&#x27;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>自定义按键修饰符</p>
<p>官方只提供了部分常用的按键修饰符，我们可以自定义按键修饰符来使用未定义的按键</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue在编译时会使用按键的keyCode值，</span></span><br><span class="line"><span class="comment">    因此v-on:keydown.enter就等于v-on:keydown.13--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--所以我们可以通过keyCode来使用键盘上任一个按键作为修饰符</span></span><br><span class="line"><span class="comment">    但是使用数字不直观，我们可以给keycode起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-on:keydown.aa</span>=<span class="string">&quot;prompt()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">keyCodes</span>.<span class="property">aa</span> = <span class="number">116</span>; <span class="comment">//给116这个键值起别名</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">prompt</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;我是键值为116的键！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><h4 id="v-bind指令可以绑定属性"><a href="#v-bind指令可以绑定属性" class="headerlink" title="v-bind指令可以绑定属性"></a>v-bind指令可以绑定属性</h4><ul>
<li>v-bind 指令被用来响应地更新 HTML 属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将属性和数据绑定在一起，可以动态变化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 修改URL地址</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">url</span> = <span class="string">&#x27;http://itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="v-model的低层实现原理分析"><a href="#v-model的低层实现原理分析" class="headerlink" title="v-model的低层实现原理分析"></a>v-model的低层实现原理分析</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;msg&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;msg=$event.target.value&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户输入时触发input，将输入的数据赋值给模型中的数据</span></span><br><span class="line"><span class="comment">同时又有模型中的数据通过v-bind反映给视图，这样就实现了双向数据绑定--&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h3><h4 id="class样式处理"><a href="#class样式处理" class="headerlink" title="class样式处理"></a>class样式处理</h4><ul>
<li>我们可以给v-bind:class 一个对象或数组，以动态地切换class。</li>
<li>注意：v-bind:class指令可以与普通的class特性共存</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--传递对象，key是css选择器，value是定义的bool值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active: isActive,error: isError&#125;&quot;</span>&gt;</span>测试样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--传递数组--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;[activeClass, errorClass]&#x27;</span>&gt;</span>测试样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传递对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isActive</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 控制isActive的值在true和false之间进行切换</span></span></span><br><span class="line"><span class="language-javascript">          	<span class="variable language_">this</span>.<span class="property">isActive</span> = !<span class="variable language_">this</span>.<span class="property">isActive</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">isError</span> = !<span class="variable language_">this</span>.<span class="property">isError</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 传递数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">activeClass</span>: <span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">errorClass</span>: <span class="string">&#x27;error&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">//直接操作值来控制</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">activeClass</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">errorClass</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="绑定对象和绑定数组-的细节"><a href="#绑定对象和绑定数组-的细节" class="headerlink" title="绑定对象和绑定数组 的细节"></a>绑定对象和绑定数组 的细节</h5><ul>
<li>二者可以结合使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;[activeClass,&#123;test: isTest&#125;]&#x27;</span>&gt;</span>测试样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>有更好的写法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.error</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--防止类名过多而造成的体验差--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;arrClasses&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;objClasses&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">arrClasses</span>: [<span class="string">&#x27;active&#x27;</span>,<span class="string">&#x27;error&#x27;</span>],<span class="comment">//数组写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">objClasses</span>: &#123; <span class="comment">//对象写法</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">active</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">error</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">objClasses</span>.<span class="property">error</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认的class如何处理？默认的class会保留</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--base样式会保留--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;base&quot;</span> <span class="attr">v-bind:class</span>=<span class="string">&#x27;objClasses&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>绑定对象的时候 对象的属性 即要渲染的类名 对象的属性值对应的是 data 中的数据 </li>
<li>绑定数组的时候数组里面存的是data 中的数据</li>
</ul>
<h4 id="style样式处理"><a href="#style样式处理" class="headerlink" title="style样式处理"></a>style样式处理</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&#x27;&#123;border: borderStyle, width: widthStyle&#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&#x27;objStyles&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&#x27;[objStyles, overrideStyles]&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">borderStyle</span>: <span class="string">&#x27;1px solid blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">widthStyle</span>: <span class="string">&#x27;100px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">objStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">border</span>: <span class="string">&#x27;1px solid green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">width</span>: <span class="string">&#x27;200px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">overrideStyles</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">border</span>: <span class="string">&#x27;5px solid orange&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">backgroundColor</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">heightStyle</span> = <span class="string">&#x27;100px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">objStyles</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul>
<li>v-if</li>
<li>v-else</li>
<li>v-else-if</li>
<li>v-show</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;score&gt;=90&#x27;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&#x27;score&gt;=80&#x27;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&#x27;score&gt;60&#x27;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>比较差<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#x27;flag&#x27;</span>&gt;</span>测试v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*v-show控制元素是否显示 display:none*/</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">score</span>: <span class="number">95</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">flag</span> = !<span class="variable language_">this</span>.<span class="property">flag</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-show-和-v-if的区别"><a href="#v-show-和-v-if的区别" class="headerlink" title="v-show 和 v-if的区别"></a>v-show 和 v-if的区别</h4><ul>
<li><p>v-if控制元素是否渲染到页面 </p>
</li>
<li><p>v-show控制元素是否显示（已经渲染到了页面）</p>
<ul>
<li>v-show只编译一次，后面其实就是控制css，而v-if不停的销毁和创建，故v-show性能更好一点。</li>
</ul>
</li>
<li><p>v-if是动态的向DOM树内添加或者删除DOM元素</p>
<ul>
<li>v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件</li>
</ul>
</li>
</ul>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><p>遍历数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>水果列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--遍历数组--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in fruits&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--提供索引号--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in fruits&#x27;</span>&gt;</span>&#123;&#123;item+index&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--key的值要唯一，作用是帮助Vue区分元素，提高性能--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组中存放对象时的遍历方法--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item, index) in myFruits&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.ename&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.cname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fruits</span>: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">myFruits</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">ename</span>: <span class="string">&#x27;apple&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">cname</span>: <span class="string">&#x27;苹果&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">ename</span>: <span class="string">&#x27;orange&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">cname</span>: <span class="string">&#x27;橘子&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">ename</span>: <span class="string">&#x27;banana&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">cname</span>: <span class="string">&#x27;香蕉&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>遍历对象<code>v-for=&#39;(value,key,index) in obj&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&#x27;(value,key,index) in obj&#x27;</span>&gt;</span>&#123;&#123;v+k+i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// key:value</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">uname</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">13</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>不推荐</strong>同时使用 <code>v-if</code> 和 <code>v-for</code></li>
<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;v==13&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(v,k,i) in obj&#x27;</span>&gt;</span>&#123;&#123;v+k+i&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--13 age 1--&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="选项卡案例"><a href="#选项卡案例" class="headerlink" title="选项卡案例"></a>选项卡案例</h2><h4 id="1、-HTML-结构"><a href="#1、-HTML-结构" class="headerlink" title="1、 HTML 结构"></a>1、 HTML 结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  tab栏  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>lemon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--  对应显示的图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/apple.png&quot;</span>&lt;/<span class="attr">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/orange.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/lemon.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、-提供模板数据"><a href="#2、-提供模板数据" class="headerlink" title="2、 提供模板数据"></a>2、 提供模板数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">list</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;img/apple.png&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;img/orange.png&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;lemon&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;img/lemon.png&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h4 id="3、-把数据渲染到页面"><a href="#3、-把数据渲染到页面" class="headerlink" title="3、 把数据渲染到页面"></a>3、 把数据渲染到页面</h4><ul>
<li><p>把tab栏 中的数替换到页面上</p>
<ul>
<li>把 data 中 title  利用 v-for 循环渲染到页面上 </li>
<li>把 data 中 path利用 v-for 循环渲染到页面上</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                  <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">                    1、绑定key的作用 提高Vue的性能 </span></span><br><span class="line"><span class="comment">                    2、 key 需要是唯一的标识 所以需要使用id， 也可以使用index ，</span></span><br><span class="line"><span class="comment">						index 也是唯一的 </span></span><br><span class="line"><span class="comment">                    3、 item 是 数组中对应的每一项  </span></span><br><span class="line"><span class="comment">                    4、 index 是 每一项的 索引</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>  <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item, index) in list&#x27;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span>  <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//  指定 操作元素 是 id 为app 的 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;apple&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/apple.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;orange&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/orange.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;lemon&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/lemon.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4、-给每一个tab栏添加事件-并让选中的高亮"><a href="#4、-给每一个tab栏添加事件-并让选中的高亮" class="headerlink" title="4、 给每一个tab栏添加事件,并让选中的高亮"></a>4、 给每一个tab栏添加事件,并让选中的高亮</h4><ul>
<li><p>4.1 、让默认的第一项tab栏高亮</p>
<ul>
<li>tab栏高亮 通过添加类名active 来实现   （CSS  active 的样式已经提前写好）<ul>
<li>在data 中定义一个 默认的  索引 currentIndex  为  0 </li>
<li>给第一个li 添加 active 的类名  <ul>
<li>通过动态绑定class 来实现   第一个li 的索引为 0     和 currentIndex   的值刚好相等</li>
<li>currentIndex     &#x3D;&#x3D;&#x3D;  index  如果相等  则添加类名 active  否则 添加 空类名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>4.2 、让默认的第一项tab栏对应的div 显示 </p>
<ul>
<li>实现思路 和 第一个 tab 实现思路一样  只不过 这里控制第一个div 显示的类名是 current</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	   <span class="comment">&lt;!-- 动态绑定class   有 active   类名高亮  无 active   不高亮--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>  <span class="attr">:class</span>=<span class="string">&#x27;currentIndex==index?&quot;active&quot;:&quot;&quot;&#x27;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span></span></span><br><span class="line"><span class="tag">           &gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 动态绑定class   有 current  类名显示  无 current  隐藏--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&#x27;currentIndex==index?&quot;current&quot;:&quot;&quot;&#x27;</span> </span></span><br><span class="line"><span class="tag">       </span></span><br><span class="line"><span class="tag">       <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item, index) in list&#x27;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- :  是 v-bind 的简写   绑定属性使用 v-bind --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span>  <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">currentIndex</span>: <span class="number">0</span>, <span class="comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;apple&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/apple.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;orange&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/orange.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;lemon&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/lemon.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>4.3 、点击每一个tab栏 当前的高亮 其他的取消高亮 </p>
<ul>
<li><p>给每一个li添加点击事件    </p>
</li>
<li><p>让当前的索引 index  和  当前 currentIndex 的  值 进项比较 </p>
</li>
<li><p>如果相等 则当前li  添加active 类名 当前的 li 高亮  当前对应索引的 div 添加 current 当前div 显示 其他隐藏</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--  通过v-on 添加点击事件   需要把当前li 的索引传过去 </span></span><br><span class="line"><span class="comment">				--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-on:click</span>=<span class="string">&#x27;change(index)&#x27;</span>		           			</span></span><br><span class="line"><span class="tag">                    <span class="attr">:class</span>=<span class="string">&#x27;currentIndex==index?&quot;active&quot;:&quot;&quot;&#x27;</span>                   </span></span><br><span class="line"><span class="tag">                    <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in list&#x27;</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&#x27;currentIndex==index?&quot;current&quot;:&quot;&quot;&#x27;</span> </span></span><br><span class="line"><span class="tag">                 <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item, index) in list&#x27;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span>  <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">currentIndex</span>: <span class="number">0</span>, <span class="comment">// 选项卡当前的索引  默认为 0  </span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">list</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;apple&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/apple.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;orange&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/orange.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">title</span>: <span class="string">&#x27;lemon&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">path</span>: <span class="string">&#x27;img/lemon.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">change</span>: <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 通过传入过来的索引来让当前的  currentIndex  和点击的index 值 相等 </span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//  从而实现 控制类名    </span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="声明式编程"><a href="#声明式编程" class="headerlink" title="声明式编程"></a>声明式编程</h3><p>模板的结构和最终显示的效果基本一致</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>常用特性</title>
    <url>/2022/02/11/00-00-00/</url>
    <content><![CDATA[<h2 id="表单操作"><a href="#表单操作" class="headerlink" title="表单操作"></a>表单操作</h2><span id="more"></span>

<ol>
<li><p>Input 单行文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;uname&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>textarea 多行文本</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>个人简介：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&#x27;desc&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">desc</span>: <span class="string">&#x27;nihao&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>select 下拉选择</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>职业：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&#x27;occupation&#x27;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>请选择职业...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>教师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>软件工程师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>律师<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// occupation: 3  //单选</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">occupation</span>: [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>],<span class="comment">//多选</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>radio 单选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;gender&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>checkbox 多选框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ball&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ball&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sing&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sing&quot;</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;hobby&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;code&quot;</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">hobby</span>: [<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="表单域修饰符"><a href="#表单域修饰符" class="headerlink" title="表单域修饰符"></a>表单域修饰符</h3><ul>
<li>number：转化为数值 </li>
<li>trim：去掉开始和结尾的空格 </li>
<li>lazy : 将input事件切换为change事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&#x27;age&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&#x27;info&#x27;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--input事件每当输入字符时都会触发；change事件失去焦点触发--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p>内置指令不满足需求</p>
<h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用自定义指令，要加v-  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 自定义全局指令</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span> &#123; <span class="comment">//指令名称 focus</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 钩子函数，代表何时触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123; <span class="comment">//业务逻辑</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el表示指令所绑定元素</span></span></span><br><span class="line"><span class="language-javascript">        el.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--带参数的自定义指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--参数通过=传递，实参要从data中取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-color</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binding.<span class="property">value</span>.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="局部指令"><a href="#局部指令" class="headerlink" title="局部指令"></a>局部指令</h3><ul>
<li>局部指令，需要定义在 directives 的选项 用法和全局用法一样 </li>
<li>局部指令只能在当前组件里面使用 </li>
<li>当全局指令和局部指令同名时以局部指令为准</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">bind</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    el.<span class="property">style</span>.<span class="property">backgroundColor</span> = 									binding.<span class="property">value</span>.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">focus</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    el.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h2><ul>
<li>模板中放入太多的逻辑会让模板过重且难以维护 使用计算属性可以让模板更加的简洁 </li>
<li>计算属性是基于它们的响应式依赖进行缓存的 </li>
<li>computed比较适合对多个变量或者对象进行处理后返回一个结果值，多个变量中的某一个值发生了变 化则我们监控的这个值也就会发生变化</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;div&gt;&#123;&#123;msg.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)&#125;&#125;&lt;/div&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--逻辑有点复杂，不易阅读和维护--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseString&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;Nihao&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reverseString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="计算属性与方法的区别"><a href="#计算属性与方法的区别" class="headerlink" title="计算属性与方法的区别"></a>计算属性与方法的区别</h4><ul>
<li><p>计算属性是基于它们的响应式依赖进行缓存的</p>
<ul>
<li>值不变时，会缓存之前计算的结果，若多次用到则直接从缓存中取</li>
</ul>
</li>
<li><p>方法不存在缓存</p>
</li>
</ul>
<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>![](E:\Tb前端资源笔记\17-21 Vue.js项目实战开发\17-19vue基础\笔记\images\2.png)</p>
<ul>
<li>使用watch来监听和响应数据的变化 </li>
<li>一般用于异步或者开销较大的操作 </li>
<li>watch 中的属性 一定是data 中 已经存在的数据 </li>
<li>当需要监听一个对象的改变时，普通的watch方法无法监听到对象内部属性的改变，只有data中的数据才能够监听到变化，此时就需要deep属性对对象进行深度监听</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;firstName&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;lastName&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&#x27;Jim&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&#x27;Green&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: <span class="string">&#x27;Jim Green&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        	<span class="comment">//val是变化后的最新值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123; <span class="comment">//监听firstName</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">fullName</span> = val + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123; <span class="comment">//监听lastName</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + val;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="侦听器的应用"><a href="#侦听器的应用" class="headerlink" title="侦听器的应用"></a>侦听器的应用</h3><p>验证用户名是否可用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.lazy</span>=<span class="string">&#x27;uname&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;tip&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">uname</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tip</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">checkName</span>: <span class="keyword">function</span>(<span class="params">uname</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 模拟接口调用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//setTimeout中this是window</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (uname == <span class="string">&#x27;admin&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        that.<span class="property">tip</span> = <span class="string">&#x27;用户名已存在&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        that.<span class="property">tip</span> = <span class="string">&#x27;用户名可以使用&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">uname</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 调用后台接口验证用户名</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">checkName</span>(val);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 修改提示信息</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">tip</span> = <span class="string">&#x27;正在验证...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>数据格式化，比如将字符串格式化为首字母大写</p>
<ul>
<li>过滤器可以用在两个地方：双花括号插值和v-bind表达式。</li>
<li>过滤器应该被添加在JavaScript表达式的尾部，由“管道”符号指示</li>
<li>过滤器不改变data ，只是改变渲染的结果，并返回过滤后的版本</li>
<li>全局注册时是filter，没有s的。而局部过滤器是filters，是有s的。二者的区别在于局部注册的过滤器只能在注册它的父组件中使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&#x27;msg&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--可以绑定多个过滤器，将前一个过滤器的输出作为后一个过滤器的输入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | upper | lower&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-bind绑定属性，绑定的属性值是过滤后的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:abc</span>=<span class="string">&#x27;msg | upper&#x27;</span>&gt;</span>测试数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义全局过滤器，会自动获取定义地方的数据传给val</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;lower&#x27;</span>, <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toLowerCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">msg</span>: <span class="string">&#x27;nihao&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">filters</span>: &#123; <span class="comment">//定义局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">upper</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;date | format(‘yyyy-MM-dd&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(‘format’, <span class="keyword">function</span>(<span class="params">value, arg1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// arg1是日期格式参数</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><h3 id="主要阶段"><a href="#主要阶段" class="headerlink" title="主要阶段"></a>主要阶段</h3><ul>
<li>挂载 (初始化相关属性)<ul>
<li>beforeCreate</li>
<li>created</li>
<li>beforeMount</li>
<li><strong>mounted</strong></li>
</ul>
</li>
<li>更新 (元素或组件的变更操作)<ul>
<li>beforeUpdate</li>
<li>updated</li>
</ul>
</li>
<li>销毁 (销毁相关属性)<ul>
<li>beforeDestroy</li>
<li>destroyed</li>
</ul>
</li>
</ul>
<h3 id="Vue实例的产生过程"><a href="#Vue实例的产生过程" class="headerlink" title="Vue实例的产生过程"></a>Vue实例的产生过程</h3><ol>
<li><p>beforeCreate 在实例初始化之后，数据观测和事件配置之前被调用。 </p>
</li>
<li><p>created 在实例创建完成后被立即调用。</p>
</li>
<li><p>beforeMount 在挂载开始之前被调用。</p>
</li>
<li><p><strong>mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。在这之后可以调用后台接口获取数据，填充到模板里</strong></p>
</li>
<li><p>beforeUpdate 数据更新时调用，发生在虚拟DOM打补丁之前。 </p>
</li>
<li><p>updated 由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。</p>
</li>
<li><p>beforeDestroy 实例销毁之前调用。</p>
</li>
<li><p>destroyed 实例销毁后调用</p>
</li>
</ol>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="变异方法"><a href="#变异方法" class="headerlink" title="变异方法"></a>变异方法</h3><p>会改变原始数组中的数据</p>
<table>
<thead>
<tr>
<th>push()</th>
<th>往数组最后面添加一个元素，成功返回当前数组的长度</th>
</tr>
</thead>
<tbody><tr>
<td>pop()</td>
<td>删除数组的最后一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td>shift()</td>
<td>删除数组的第一个元素，成功返回删除元素的值</td>
</tr>
<tr>
<td>unshift()</td>
<td>往数组最前面添加一个元素，成功返回当前数组的长度</td>
</tr>
<tr>
<td>splice()</td>
<td>有三个参数，第一个是想要删除的元素的下标（必选），第二个是想要删除的个数（必选）， 第三个是删除 后想要在原位置替换的值</td>
</tr>
<tr>
<td>sort()</td>
<td>使数组按照字符编码默认从小到大排序,成功返回排序后的数组</td>
</tr>
<tr>
<td>reverse()</td>
<td>将数组倒序，成功返回倒序后的数组</td>
</tr>
</tbody></table>
<h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><p>不会改变原始数组，会返回一个新数组</p>
<table>
<thead>
<tr>
<th>filter</th>
<th>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</th>
</tr>
</thead>
<tbody><tr>
<td>concat</td>
<td>方法用于连接两个或多个数组。该方法不会改变现有的数组</td>
</tr>
<tr>
<td>slice</td>
<td>方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组</td>
</tr>
</tbody></table>
<p>通过索引也可以操作数组，但并不是响应式的，为此vue提供了一个方法来实现响应</p>
<h3 id="动态数组响应式数据"><a href="#动态数组响应式数据" class="headerlink" title="动态数组响应式数据"></a>动态数组响应式数据</h3><p><code>Vue.set(a,b,c)</code> 让触发视图重新更新一遍，数据动态起来</p>
<p> a是要更改的数据 、 b是数据的第几项、 c是更改后的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handle&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">list</span>: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// vm.list[1] = &#x27;lemon&#x27;; </span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//通过索引可以修改数据，但视图不会改变</span></span></span><br><span class="line"><span class="language-javascript">    		<span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">list</span>, <span class="number">2</span>, <span class="string">&#x27;lemon&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//利用set方法实现响应式</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：这个方法也可以处理对象的属性</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS经典布局--轮播图</title>
    <url>/2020/11/20/14-28-25/</url>
    <content><![CDATA[<h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><blockquote>
<p>图片由<code>ul&gt;li</code>标签包裹</p>
</blockquote>
<blockquote>
<p>下方的选择器由<code>ol&gt;li</code>标签的圆点构成，CSS提供样式</p>
</blockquote>
<blockquote>
<p>左右箭头要用<code>a</code>包裹</p>
</blockquote>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html结构 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;focus&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左右箭头 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow-l&quot;</span>&gt;</span>&lt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;arrow-r&quot;</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 箭头要用字体图标 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 轮播图 图片布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;upload/focus.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 底部指示器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css样式 */</span></span><br><span class="line"><span class="selector-class">.focus</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">720px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">455px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arrow-l</span>,</span><br><span class="line"><span class="selector-class">.arrow-r</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/* 垂直居中 */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arrow-r</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子绝父相 */</span></span><br><span class="line"><span class="selector-class">.circle</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="comment">/* 鼠标经过时变成小手 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 后面配合js实现转换效果 */</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>组件化开发</title>
    <url>/2022/02/12/00-00-00/</url>
    <content><![CDATA[<h2 id="组件化开发思想"><a href="#组件化开发思想" class="headerlink" title="组件化开发思想"></a>组件化开发思想</h2><ul>
<li>标准</li>
<li>分治</li>
<li>重用</li>
<li>组合</li>
</ul>
<span id="more"></span>

<h3 id="组件化规范：Web-Components"><a href="#组件化规范：Web-Components" class="headerlink" title="组件化规范：Web Components"></a>组件化规范：Web Components</h3><ul>
<li>我们希望尽可能多的重用代码</li>
<li>自定义组件的方式不太容易（html、css和js） </li>
<li>多次使用组件可能导致冲突</li>
</ul>
<p>Web Components 通过创建封装好功能的定制元素解决上述问题，但是还没有被所有的浏览器支持</p>
<p>官网：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components">https://developer.mozilla.org/zh-CN/docs/Web/Web_Components</a></p>
<p>Vue部分实现了上述规范</p>
<h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(组件名称,&#123;</span><br><span class="line">	data:组件数据,</span><br><span class="line">	template:组件模板内容</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通过组件名称来使用组件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--组件可以重用，且相互之间数据是独立的--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">//注意这里data属性要提供一个函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;<span class="comment">//通过return语句返回数据</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次				&lt;/button&gt;&#x27;</span>, <span class="comment">//模板字符串，引用该组件后要展示的内容</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">count</span> ++;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">// 仍然需要</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ul>
<li><p><strong>data必须是函数</strong></p>
</li>
<li><p><strong>组件模板内容必须是单个根元素</strong></p>
<ul>
<li><pre><code class="js">template:&#39;&lt;div&gt;&lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;&lt;button&gt;测试&lt;/button&gt;&lt;/div&gt;&#39;, //单个div根元素 √
    
template: &#39;&lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;&lt;button&gt;测试&lt;/button&gt;&#39;,//两个button都是根元素 ×
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 组件模板内容可以是模板字符串（ES6）</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    // 反引号</span><br><span class="line">    template: </span><br><span class="line">    `&lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;handle&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span><br><span class="line">      &lt;button&gt;测试123&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;`,</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>组件命名方式</p>
<ul>
<li><p>驼峰方式</p>
<ul>
<li><code>Vue.component(&#39;MyComponent&#39;, &#123; /* ... */ &#125;)</code></li>
</ul>
</li>
<li><p>短横线方式</p>
<ul>
<li><code>Vue.component(&#39;my-component&#39;, &#123;&#125;)</code></li>
</ul>
</li>
<li><p>使用驼峰式命名组件，那么在使用组件的时候，只能在字符串模板中用驼峰的方式使用组件，但是在普通的标签模板中，必须使用短横线的方式使用组件</p>
<ul>
<li><pre><code class="html">&lt;div id=&quot;app&quot;&gt;
    &lt;button-counter&gt;&lt;/button-counter&gt;
    &lt;!--这里必须用短横线方式，驼峰转短横线--&gt;
    &lt;!--js可以用驼峰，html要用短横线--&gt;
    &lt;hello-world&gt;&lt;/hello-world&gt;
&lt;/div&gt;
  &lt;script type=&quot;text/javascript&quot;&gt;
    Vue.component(&#39;HelloWorld&#39;, &#123; //驼峰方式命名
      data: function()&#123;
        return &#123;
          msg: &#39;HelloWorld&#39;
        &#125;
      &#125;,
      template: &#39;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#39;
    &#125;);
    Vue.component(&#39;button-counter&#39;, &#123;
      data: function()&#123;
        return &#123;
          count: 0
        &#125;
      &#125;,
      template: `
        &lt;div&gt;
          &lt;button @click=&quot;count++&quot;&gt;点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;
          &lt;HelloWorld&gt;&lt;/HelloWorld&gt;
        &lt;/div&gt;`
        // 组件里可以用别的组件
    &#125;)
    var vm = new Vue(&#123;
      el: &#39;#app&#39;,
      data: &#123; &#125;
    &#125;);
  &lt;/script&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 局部注册</span><br><span class="line"></span><br><span class="line">局部组件只能在注册他的父组件中使用</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">var ComponentA = &#123; /* ... */ &#125;</span><br><span class="line">var ComponentB = &#123; /* ... */ &#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">    components: &#123;</span><br><span class="line">        &#x27;component-a&#x27;: ComponentA,</span><br><span class="line">        &#x27;component-b&#x27;: ComponentB,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--只可以在注册它的父组件中使用--&gt;</span><br><span class="line">    &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">    &lt;test-com&gt;&lt;/test-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    Vue.component(&#x27;test-com&#x27;,&#123;</span><br><span class="line">        // 不能在别的组件中使用</span><br><span class="line">      template: &#x27;&lt;div&gt;Test&lt;hello-world&gt;&lt;/hello-world&gt;&lt;/div&gt;&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    var HelloWorld = &#123;</span><br><span class="line">      data: function()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          msg: &#x27;HelloWorld&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: &#x27;&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &#x27;#app&#x27;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        &#x27;hello-world&#x27;: HelloWorld,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Vue调试工具"><a href="#Vue调试工具" class="headerlink" title="Vue调试工具"></a>Vue调试工具</h2><p>可以展现组件间的层次关系，对数据进行调试</p>
<h3 id="安装调试工具"><a href="#安装调试工具" class="headerlink" title="安装调试工具"></a>安装调试工具</h3><p>在官网-&gt;生态系统-&gt;工具找到Devtools，打开GitHub仓库</p>
<p>①克隆仓库 </p>
<p>② 安装依赖包 <code>npm install</code></p>
<p>③ 构建 <code>npm run build</code></p>
<p> ④ 打开Chrome扩展页面</p>
<p> ⑤ 选中开发者模式 </p>
<p>⑥ 加载已解压的扩展，选择shells&#x2F;chrome</p>
<h2 id="组件间数据交互"><a href="#组件间数据交互" class="headerlink" title="组件间数据交互"></a>组件间数据交互</h2><h3 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--静态方式，通过属性传递值,只能传递字符串--&gt;</span>                      传递</span><br><span class="line">    <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">title</span>=<span class="string">&#x27;来自父组件的值&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过v-bind动态绑定   静态方式和动态方式可结合使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:title</span>=<span class="string">&#x27;ptitle&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;hello&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>, &#123; <span class="comment">//子组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>], <span class="comment">// 子组件接收的值                 接收</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;子组件本身的数据&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&#123;&#123;msg+&quot;--&quot;+title+&quot;--&quot; + content&#125;&#125;&lt;/div&gt;&#x27;</span>    使用</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//接收的值在模板中使用</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; <span class="comment">//顶级父组件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pmsg</span>: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">ptitle</span>: <span class="string">&#x27;动态绑定属性&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="props属性名规则"><a href="#props属性名规则" class="headerlink" title="props属性名规则"></a>props属性名规则</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在html中是短横线方式的,html大小写不敏感 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">menu-title</span>=<span class="string">&quot;nihao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span>                        </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(‘menu-item&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 在 JavaScript 中是驼峰式的</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        props: [‘menuTitle&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">menuTitle</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="props属性值类型"><a href="#props属性值类型" class="headerlink" title="props属性值类型"></a>props属性值类型</h4><p>String、Number、Boolean、Array、Object</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用v-bind绑定才能得到正确的数据类型--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用属性传递值只能传递字符串--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">menu-item</span> <span class="attr">:pstr</span>=<span class="string">&#x27;pstr&#x27;</span> <span class="attr">:pnum</span>=<span class="string">&#x27;12&#x27;</span> <span class="attr">:pboo</span>=<span class="string">&#x27;true&#x27;</span> <span class="attr">:parr</span>=<span class="string">&#x27;parr&#x27;</span> <span class="attr">pobj</span>=<span class="string">&#x27;pobj&#x27;</span>&gt;</span>	<span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        Vue.component(&#x27;menu-item&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            props: [&#x27;pstr&#x27;,&#x27;pnum&#x27;, &#x27;pboo&#x27;, &#x27;parr&#x27;, &#x27;pobj&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> pstr&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> pnum&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> pboo&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;index&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;(item,index) in parr&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">typeof</span> pobj&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> //未用v-bind，传递了pobj字符串</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                pmsg: &#x27;父组件中内容&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                pstr: &#x27;hello&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                parr: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                pobj: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    name: &#x27;lisi&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    age: 12</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="子组件传值给父组件"><a href="#子组件传值给父组件" class="headerlink" title="子组件传值给父组件"></a>子组件传值给父组件</h3><p>props传递数据原则：<strong>单向数据流</strong>，即只允许父组件向子组件传递数据，不推荐 (但没有禁止) 子组件直接操纵或修改父组件的数据</p>
<h4 id="子组件自定义事件发给父组件"><a href="#子组件自定义事件发给父组件" class="headerlink" title="子组件自定义事件发给父组件"></a>子组件自定义事件发给父组件</h4><p><code>&lt;button v-on:click=&#39;$emit(&quot;enlarge-text&quot;)&#39;&gt;扩大字体&lt;/button&gt;</code></p>
<h4 id="父组件监听子组件事件并完成业务逻辑"><a href="#父组件监听子组件事件并完成业务逻辑" class="headerlink" title="父组件监听子组件事件并完成业务逻辑"></a>父组件监听子组件事件并完成业务逻辑</h4><p><code>&lt;menu-item v-on:enlarge-text=&#39;fontSize += 0.1&#39;&gt;&lt;/menu-item&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&#x27;&#123;fontSize:fontSize+&quot;px&quot;&#125;&#x27;</span>&gt;</span>&#123;&#123;pmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用$event接收子组件传递的参数5--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">menu-item</span> @<span class="attr">enlarge-text</span>=<span class="string">&#x27;handle($event)&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">menu-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;menu-item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">          &lt;button @click=&#x27;enlargeText&#x27;&gt;扩大父组件中字体大小&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/div&gt;`</span></span></span><br><span class="line"><span class="language-javascript">      ,<span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">enlargeText</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.$emit(<span class="string">&quot;enlarge-text&quot;</span>,<span class="number">5</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pmsg</span>: <span class="string">&#x27;父组件中内容&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fontSize</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">fontSize</span> += val;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="兄弟组件数据交互"><a href="#兄弟组件数据交互" class="headerlink" title="兄弟组件数据交互"></a>兄弟组件数据交互</h3><p>需要定义事件中心来管理组件之间的通信</p>
<p>![](E:\Tb前端资源笔记\17-21 Vue.js项目实战开发\17-19vue基础\笔记\images\4.png)</p>
<ol>
<li>定义单独的事件中心管理组件间的通信</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> eventHub = <span class="keyword">new</span> <span class="title class_">Vue</span>(); <span class="comment">//构建一个新的vue实例对象</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>监听事件与销毁事件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventHub.$on(<span class="string">&#x27;add-todo&#x27;</span>, addTodo)</span><br><span class="line">eventHub.$off(<span class="string">&#x27;add-todo&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li>触发事件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventHub.$emit(‘add-todo<span class="string">&#x27;, id)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;handle&#x27;</span>&gt;</span>销毁事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test-tom</span>&gt;</span><span class="tag">&lt;/<span class="name">test-tom</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test-jerry</span>&gt;</span><span class="tag">&lt;/<span class="name">test-jerry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> hub = <span class="keyword">new</span> <span class="title class_">Vue</span>(); <span class="comment">//事件中心</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;test-tom&#x27;</span>, &#123; <span class="comment">//定义tom组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;<span class="attr">num</span>: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;TOM:&#123;&#123;num&#125;&#125;&lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">mounted</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//此时模板已经就绪</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 定义tom-event事件并监听，等待兄弟触发</span></span></span><br><span class="line"><span class="language-javascript">      hub.$on(<span class="string">&#x27;tom-event&#x27;</span>, <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;<span class="variable language_">this</span>.<span class="property">num</span> += val;&#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;test-jerry&#x27;</span>, &#123; <span class="comment">//定义Jerry组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;JERRY:&#123;&#123;num&#125;&#125;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;&lt;button @click=&#x27;handle&#x27;&gt;点击&lt;/button&gt;&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">      &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 触发兄弟组件的事件，并传递参数1</span></span></span><br><span class="line"><span class="language-javascript">        hub.$emit(<span class="string">&#x27;tom-event&#x27;</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        hub.$off(<span class="string">&#x27;tom-event&#x27;</span>);<span class="comment">//销毁事件</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>父组件向子组件传递模板内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件，并为该组件的插槽提供内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span>有bug发生<span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果不提供内容，那么slot中的内容会显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert-box</span>&gt;</span><span class="tag">&lt;/<span class="name">alert-box</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;alert-box&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 插槽标签<span class="tag">&lt;<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>ERROR:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具名插槽就是有名字的插槽--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过插槽名称来确定将内容插入到哪个插槽--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--向同一个插槽中提供多个内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不加名称就放到默认插槽中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span>底部信息信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">&lt;!--另一种向插槽提供内容的方法是template标签--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  Vue.component(&#x27;base-layout&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 有name属性的是具名插槽，没有的是默认插槽</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    data: &#123;&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>应用场景：父组件对子组件的内容进行加工处理</p>
<p>既可以复用插槽，又可以个性化插槽</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--传递list数组作为参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fruit-list</span> <span class="attr">:list</span>=<span class="string">&#x27;list&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父组件通过template标签填充插槽--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过slot-scope属性得到子组件绑定的数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&#x27;slotProps&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&#x27;slotProps.info.id==3&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123;slotProps.info.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fruit-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  Vue.component(&#x27;fruit-list&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 接收参数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    props: [&#x27;list&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // info是自定义属性，绑定了item数据</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template:</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&#x27;item.id&#x27;</span> <span class="attr">v-for</span>=<span class="string">&#x27;item in list&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:info</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  var vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      list: [&#123;id: 1,name: &#x27;apple&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             &#123;id: 2,name: &#x27;orange&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             &#123;id: 3,name: &#x27;banana&#x27;&#125;]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//总框架</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">CartTitle</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">``</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">CartList</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">``</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">CartTotal</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">``</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 局部组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-cart&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div class=&#x27;cart&#x27;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;cart-title&gt;&lt;/cart-title&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;cart-list&gt;&lt;/cart-list&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;cart-total&gt;&lt;/cart-total&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;/div&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//三个子组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;cart-title&#x27;</span>: <span class="title class_">CartTitle</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;cart-list&#x27;</span>: <span class="title class_">CartList</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;cart-total&#x27;</span>: <span class="title class_">CartTotal</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由</title>
    <url>/2022/02/15/00-00-00/</url>
    <content><![CDATA[<h2 id="路由的基本概念与原理"><a href="#路由的基本概念与原理" class="headerlink" title="路由的基本概念与原理"></a>路由的基本概念与原理</h2><p>路由是一个比较广义和抽象的概念，路由的本质就是<strong>对应关系</strong>。</p>
<p>在开发中，路由分为前端路由和后端路由</p>
<span id="more"></span>

<h3 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h3><p>概念：根据不同的用户 URL 请求，返回不同的内容 </p>
<p>本质：URL 请求地址与服务器资源之间的对应关系</p>
<p>早期网站都使用后端路由渲染每个网页，但存在性能问题（如表单验证）</p>
<p>Ajax前端渲染（前端渲染提高性能，但是不支持浏览器的前进后退操作）</p>
<p>SPA（Single Page Application）单页面应用程序：整个网站只有一个页面，内 容的变化通过Ajax局部更新实现、同时支持浏览器地址栏的前进和后退操作 </p>
<p>SPA实现原理之一：基于URL地址的hash（hash的变化会导致浏览器记录访问历史的变化、但是hash的变化不会触发新的URL请求）</p>
<p>在实现SPA过程中，最核心的技术点就是前端路由</p>
<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p><strong>概念</strong>：根据不同的用户事件，显示不同的页面内容 </p>
<p><strong>本质</strong>：用户事件与事件处理函数之间的对应关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义的模拟路由</span></span><br><span class="line"><span class="comment">// 监听 window 的 onhashchange 事件，根据获取到的最新的 hash 值，切换要显示的组件的名称</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="comment">// 通过 location.hash 获取到最新的 hash 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>Vue.js官方的路由管理器，用于SPA应用程序开发</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p>引入相关的库文件 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 vue 文件，为全局 window 对象挂载 Vue 构造函数 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入 vue-router 文件，为全局 window 对象挂载 VueRouter 构造函数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加路由链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- router-link 是 vue 中提供的标签，默认会被渲染为a标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 属性默认会被渲染为 href 属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 属性的值默认会被渲染为 # 开头的 hash 地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加路由填充位 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 路由填充位（也叫做路由占位符） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将来通过路由规则匹配到的组件，将会被渲染到 router-view 所在的位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义路由组件 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Register</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Register&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置路由规则并创建路由实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建路由实例对象 </span></span><br><span class="line"> <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">     <span class="comment">// routes 是路由规则数组</span></span><br><span class="line">     <span class="attr">routes</span>: [</span><br><span class="line">         <span class="comment">// 每个路由规则都是一个配置对象，其中至少包含 path 和 component 两个属性：</span></span><br><span class="line">         <span class="comment">// path 表示当前路由规则匹配的 hash 地址</span></span><br><span class="line">         <span class="comment">// component 表示当前路由规则对应要展示的组件</span></span><br><span class="line">         &#123;<span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,<span class="attr">component</span>: <span class="title class_">User</span>&#125;,</span><br><span class="line">         &#123;<span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,<span class="attr">component</span>: <span class="title class_">Register</span>&#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>把路由挂载到 Vue 根实例中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 为了能够让路由规则生效，必须把路由对象挂载到 vue 实例对象上</span></span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue_2.5.22.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./lib/vue-router_3.0.2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义路由组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title class_">Register</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;Register 组件&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">routes</span>: [ <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Register</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建 vm 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 指定控制的区域</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 挂载路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// router: router</span></span></span><br><span class="line"><span class="language-javascript">      router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><p>概念：用户访问地址 A 时，强制跳转到地址C ,从而展示特定的组件页面, 比如默认展示首页 </p>
<p>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// path 表示需要被重定向的原地址，redirect 表示将要被重定向到的新地址</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,<span class="comment">//当用户访问默认地址时，会跳转到user页面</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/user&#x27;</span>,<span class="attr">component</span>: <span class="title class_">User</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/register&#x27;</span>,<span class="attr">component</span>: <span class="title class_">Register</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="vue-router嵌套路由"><a href="#vue-router嵌套路由" class="headerlink" title="vue-router嵌套路由"></a>vue-router嵌套路由</h2><h3 id="什么是嵌套路由"><a href="#什么是嵌套路由" class="headerlink" title="什么是嵌套路由"></a>什么是嵌套路由</h3><ul>
<li>点击父级路由链接显示模板内容</li>
<li>模板内容中又有子级路由链接</li>
<li>点击子级路由链接显示子级模板内容</li>
</ul>
<p>![](E:\Tb前端资源笔记\17-21 Vue.js项目实战开发\17-19vue基础\笔记\images\5.png)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 被 vm 实例所控制的区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const User = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: &#x27;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>User 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Register = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Register 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 子路由链接 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/register/tab2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 子路由的占位符 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Tab1 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab1 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Tab2 = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span>tab2 子组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 创建路由实例对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    // 所有的路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#123; path: &#x27;/&#x27;, redirect: &#x27;/user&#x27;&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#123; path: &#x27;/user&#x27;, component: User &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      // children 数组表示子路由规则</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#123; path: &#x27;/register&#x27;, component: Register, children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#123; path: &#x27;/register/tab1&#x27;, component: Tab1 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#123; path: &#x27;/register/tab2&#x27;, component: Tab2 &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      ] &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br></pre></td></tr></table></figure>



<h2 id="vue-router动态路由匹配"><a href="#vue-router动态路由匹配" class="headerlink" title="vue-router动态路由匹配"></a>vue-router动态路由匹配</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/1&quot;</span>&gt;</span>User1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/2&quot;</span>&gt;</span>User2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/3&quot;</span>&gt;</span>User3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--上面三个链接只有id不一样，可以共用一个路由规则--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//通过$route.params接受传递过来的参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;&lt;h1&gt;User&#123;&#123;$route.params.id&#125;&#125;&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建路由实例对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 所有的路由规则</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/user&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 动态路径参数</span></span></span><br><span class="line"><span class="language-javascript">      &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="更好的参数传递方法"><a href="#更好的参数传递方法" class="headerlink" title="更好的参数传递方法"></a>更好的参数传递方法</h3><p>$route与对应路由形成高度耦合，不够灵活，所以可以使用props将组件和路由解耦</p>
<ol>
<li><p>props指定为bool类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 如果 props 被设置为 true，route.params 将会被设置为组件属性</span></span><br><span class="line">        &#123; <span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>: <span class="title class_">User</span>,<span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>], <span class="comment">// 使用 props 接收路由参数</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;用户ID：&#123;&#123; id &#125;&#125;&lt;/div&gt;&#x27;</span> <span class="comment">// 使用路由参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>props指定为对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 如果 props 是一个对象，它会被按原样设置为组件属性</span></span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/user/:id&#x27;</span>,component : <span class="title class_">User</span>, <span class="attr">props</span>:&#123;<span class="attr">uname</span>:<span class="string">&#x27;lisi&#x27;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;用户信息：&#123;&#123; uname + &#x27;</span>---<span class="string">&#x27; + age&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>props为函数类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 如果 props 是一个函数，则这个函数接收 route 对象为自己的形参</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,<span class="attr">component</span>: <span class="title class_">User</span>, </span><br><span class="line">         <span class="comment">//可以返回静态数据，也可以通过route返回动态匹配的数据</span></span><br><span class="line">        <span class="attr">props</span>: <span class="function"><span class="params">route</span> =&gt;</span> (&#123; <span class="attr">uname</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">id</span>: route.<span class="property">params</span>.<span class="property">id</span> &#125;)&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;用户信息：&#123;&#123; uname + &#x27;</span>---<span class="string">&#x27; + age + &#x27;</span>---<span class="string">&#x27; + id&#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="vue-router命名路由"><a href="#vue-router命名路由" class="headerlink" title="vue-router命名路由"></a>vue-router命名路由</h2><p>为了更加方便的表示路由的路径，可以给路由规则起一个别名，即为“命名路由”。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="comment">//为路由规则起名字</span></span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--路由链接可以为name属性传值来代替物理地址，同时可以传递参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--也可以用编程式导航的方法--&gt;</span></span><br><span class="line">router.push(&#123; name: &#x27;user&#x27;, params: &#123; id: 123 &#125;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="vue-router编程式导航"><a href="#vue-router编程式导航" class="headerlink" title="vue-router编程式导航"></a>vue-router编程式导航</h2><h3 id="页面导航的两种方式"><a href="#页面导航的两种方式" class="headerlink" title="页面导航的两种方式"></a>页面导航的两种方式</h3><ul>
<li>声明式导航：通过点击链接实现导航的方式，叫做声明式导航 <ul>
<li>例如：普通网页中的<code>&lt;a&gt;&lt;/a&gt;</code>链接 或 vue 中的<code>&lt;router-link&gt;&lt;/router-link&gt;</code></li>
</ul>
</li>
<li>编程式导航：通过调用JavaScript形式的API实现导航的方式，叫做编程式导航 <ul>
<li>例如：普通网页中的 location.href</li>
</ul>
</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>常用的编程式导航 API 如下：</p>
<ul>
<li><code>this.$router.push(&#39;hash地址&#39;)</code> </li>
<li><code>this.$router.go(n)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;&lt;button @click=&quot;goRegister&quot;&gt;跳转到注册页面&lt;/button&gt;&lt;/div&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">goRegister</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 用编程的方式控制路由跳转</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/register&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// push方法的参数规则</span></span><br><span class="line"> <span class="comment">// 字符串(路径名称)</span></span><br><span class="line"> router.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line"> <span class="comment">// 对象</span></span><br><span class="line"> router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span> &#125;)</span><br><span class="line"> <span class="comment">// 命名的路由(传递参数)</span></span><br><span class="line"> router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</span><br><span class="line"> <span class="comment">// 带查询参数，变成 /register?uname=lisi</span></span><br><span class="line"> router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//this.$router.go(-1)  后退一步</span></span><br></pre></td></tr></table></figure>



<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // APP 根组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const App = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      //在对应地方定义路由链接</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 头部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>传智后台管理系统<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 中间主体区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 左侧菜单栏 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content left&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/users&quot;</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/rights&quot;</span>&gt;</span>权限管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goods&quot;</span>&gt;</span>商品管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/orders&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/settings&quot;</span>&gt;</span>系统设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="comment">&lt;!-- 右侧内容区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-content&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="comment">&lt;!-- 尾部区域 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>版权信息<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Users = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    data : function () &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        userlist: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; id: 1, name: &#x27;张三&#x27;, age: 10 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; id: 2, name: &#x27;李四&#x27;, age: 20 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; id: 3, name: &#x27;王五&#x27;, age: 30 &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; id: 4, name: &#x27;赵六&#x27;, age: 40 &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      goDetail(id) &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        console.log(id)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        this.$router.push(&#x27;/userinfo/&#x27; + id)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>用户管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in userlist&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goDetail(item.id)&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const UserInfo = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    props: [&#x27;id&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">h5</span>&gt;</span>用户详情页 --- 用户Id为：</span><span class="template-variable">&#123;&#123;<span class="name">id</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback()&quot;</span>&gt;</span>后退<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      goback() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 实现后退功能</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        this.$router.go(-1)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Rights = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Goods = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Orders = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单管理区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const Settings = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>系统设置区域<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  // 创建路由对象</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        path: &#x27;/&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        component: App,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        redirect: &#x27;/users&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/users&#x27;, component: Users &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/userinfo/:id&#x27;, component: UserInfo, props: true &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/rights&#x27;, component: Rights &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/goods&#x27;, component: Goods &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/orders&#x27;, component: Orders &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">          &#123; path: &#x27;/settings&#x27;, component: Settings &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    el: &#x27;#app&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    router:router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端交互</title>
    <url>/2022/02/14/00-00-00/</url>
    <content><![CDATA[<h2 id="前后端交互模式"><a href="#前后端交互模式" class="headerlink" title="前后端交互模式"></a>前后端交互模式</h2><h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><ul>
<li>原生ajax</li>
<li>基于jQuery的ajax</li>
<li>fetch</li>
<li>axios插件</li>
</ul>
<span id="more"></span>

<h2 id="Promise用法"><a href="#Promise用法" class="headerlink" title="Promise用法"></a>Promise用法</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise出现的目的是解决Node.js异步编程中回调地狱的问题。是异步编程语法上的改进，<strong>将异步API的执行和结果的处理分离</strong>。</p>
<p>实际就是在原本的异步API外面包裹一层，提供了两个方法，当有返回结果时，若成功则用resolve将结果传递到外面；失败则用reject将结果传递</p>
<p>基本语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve用于传递异步API的执行结果</span></span><br><span class="line">    <span class="comment">// reject用于异步API失败的结果传递到外面去</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在promise外面拿到结果</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line">             <span class="comment">// then对应resolve</span></span><br><span class="line">             <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error); </span><br><span class="line">			<span class="comment">// 失败了</span></span><br><span class="line">	   .<span class="title function_">finally</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finished&#x27;</span>));</span><br><span class="line">		<span class="comment">//成功和失败都会触发</span></span><br></pre></td></tr></table></figure>
<p>解决回调地狱：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p3</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">p1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">r1</span>)=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">p2</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r2</span>)=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="基于Promise处理Ajax"><a href="#基于Promise处理Ajax" class="headerlink" title="基于Promise处理Ajax"></a>基于Promise处理Ajax</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">       <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> != <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">           <span class="comment">// 处理正常的情况</span></span><br><span class="line">           <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 处理异常情况</span></span><br><span class="line">           <span class="title function_">reject</span>(<span class="string">&#x27;服务器错误&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, url);</span><br><span class="line">       xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">     <span class="keyword">return</span> p;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// queryData(&#x27;http://localhost:3000/data&#x27;)</span></span><br><span class="line">   <span class="comment">//   .then(function(data)&#123;</span></span><br><span class="line">   <span class="comment">//     console.log(data);</span></span><br><span class="line">   <span class="comment">//   &#125;,function(info)&#123;</span></span><br><span class="line">   <span class="comment">//     console.log(info)</span></span><br><span class="line">   <span class="comment">//   &#125;);</span></span><br><span class="line">   <span class="comment">// ============================</span></span><br><span class="line">   <span class="comment">// 发送多个ajax请求并且保证顺序</span></span><br><span class="line">   <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data&#x27;</span>)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data1&#x27;</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">queryData</span>(<span class="string">&#x27;http://localhost:3000/data2&#x27;</span>);</span><br><span class="line">     &#125;)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="then参数中的函数返回值"><a href="#then参数中的函数返回值" class="headerlink" title="then参数中的函数返回值"></a>then参数中的函数返回值</h3><ol>
<li><p>返回Promise实例对象</p>
<p>返回的实例对象会调用下一个then</p>
</li>
<li><p>返回普通值</p>
<p>传递给下一个then，通过then参数中函数的参数接收该值</p>
</li>
</ol>
<h3 id="Promise对象方法"><a href="#Promise对象方法" class="headerlink" title="Promise对象方法"></a>Promise对象方法</h3><ul>
<li>Promise.all() 并发处理多个异步任务，所有任务执行完才得到结果</li>
<li>Promise.race() 并发处理多个异步任务，只要有任务执行完就得到结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="接口调用-fetch用法"><a href="#接口调用-fetch用法" class="headerlink" title="接口调用-fetch用法"></a>接口调用-fetch用法</h2><p>基于Promise实现的更简单的数据获取方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/fdata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="comment">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象</span></span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//此处得到真正的后台数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="fetch请求参数"><a href="#fetch请求参数" class="headerlink" title="fetch请求参数"></a>fetch请求参数</h3><p>配置选项</p>
<ul>
<li>method(String):HTTP请求方法，(GET,POST,PUT,DELETE)</li>
<li>body(String):HTTP的请求参数</li>
<li>headers(Object):HTTP的请求头，默认为{}</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/abc&#x27;</span>,&#123;</span><br><span class="line">	<span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">ret</span>=&gt;</span>&#123;</span><br><span class="line">	<span class="comment">//此处得到最终数据</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(ret);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET参数传递-传统URL</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books?id=123&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET参数传递-restful形式的URL</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books/456&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE请求方式参数传递</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books/789&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求传参</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;uname=lisi&amp;pwd=123&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求传参</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">pwd</span>: <span class="string">&#x27;456&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// PUT请求传参</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/books/123&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">pwd</span>: <span class="string">&#x27;789&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> data.<span class="title function_">text</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="fetch响应结果"><a href="#fetch响应结果" class="headerlink" title="fetch响应结果"></a>fetch响应结果</h3><blockquote>
<p>text(): 将返回体处理成字符串类型</p>
<p>json(): 返回结果和JSON.parse(responseText)一样</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">json</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">uname</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">text</span>();<span class="comment">//用字符串获取也能得到json结果</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="comment">//字符串转成json数据</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>,obj.<span class="property">age</span>,obj.<span class="property">gender</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="接口调用-axios用法"><a href="#接口调用-axios用法" class="headerlink" title="接口调用-axios用法"></a>接口调用-axios用法</h2><p>基于Promise用于浏览器和node.js的HTTP客户端</p>
<ul>
<li>支持浏览器和node</li>
<li>支持Promise</li>
<li>能拦截请求和响应</li>
<li>自动转换json数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">axios.get(&#x27;/data&#x27;)</span><br><span class="line">	.then(ret=&gt;&#123;</span><br><span class="line">		console.log(ret.data);</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/adata&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 注意data属性是固定的用法，用于获取后台的实际数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(ret.data)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="axios请求传参"><a href="#axios请求传参" class="headerlink" title="axios请求传参"></a>axios请求传参</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios get请求传参</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios?id=123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">789</span>&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios delete 请求传参</span></span><br><span class="line">axios.<span class="title function_">delete</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;<span class="attr">id</span>: <span class="number">111</span>&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios post请求传参</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="comment">//json</span></span><br><span class="line">  <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;uname&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;pwd&#x27;</span>, <span class="string">&#x27;111&#x27;</span>); <span class="comment">//form-urlencoded</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:3000/axios&#x27;</span>, params).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line">   </span><br><span class="line"><span class="comment">// axios put 请求传参</span></span><br><span class="line">axios.<span class="title function_">put</span>(<span class="string">&#x27;http://localhost:3000/axios/123&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">uname</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">  <span class="attr">pwd</span>: <span class="number">123</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="axios响应结果"><a href="#axios响应结果" class="headerlink" title="axios响应结果"></a>axios响应结果</h3><ul>
<li>data：响应回来的数据</li>
<li>headers：响应头</li>
<li>status：响应状态码</li>
<li>statusText：响应状态信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:3000/axios-json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>.<span class="property">uname</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span>=<span class="number">3000</span>; <span class="comment">//超时时间设置</span></span><br><span class="line"><span class="comment">// 配置请求的基准URL地址</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000/&#x27;</span>;</span><br><span class="line"><span class="comment">// 配置请求头信息</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>[<span class="string">&#x27;mytoken&#x27;</span>] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;axios-json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(ret.<span class="property">data</span>.<span class="property">uname</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="axios拦截器"><a href="#axios拦截器" class="headerlink" title="axios拦截器"></a>axios拦截器</h3><h4 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h4><p>在请求发出之间设置一些信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">config</span>)&#123;</span><br><span class="line">	<span class="comment">// 请求发出之前设置一些信息</span></span><br><span class="line">	<span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">	<span class="comment">// 处理响应的错误信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">url</span>)</span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">mytoken</span> = <span class="string">&#x27;nihao&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><p>获取后台数据之前对数据做一些加工处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="comment">// 加工处理</span></span><br><span class="line">  <span class="keyword">return</span> res.<span class="property">data</span>; <span class="comment">//返回响应结果</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 由于拦截且返回了响应结果，可以直接接收数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">books</span> = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;books&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="接口调用-async-x2F-await用法"><a href="#接口调用-async-x2F-await用法" class="headerlink" title="接口调用-async&#x2F;await用法"></a>接口调用-async&#x2F;await用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与axios结合使用</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;adata&#x27;</span>); <span class="comment">//可以直接接收返回值</span></span><br><span class="line">  <span class="comment">// console.log(ret.data)</span></span><br><span class="line">  <span class="keyword">return</span> ret.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123; <span class="comment">//then函数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;nihao&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// console.log(ret.data)</span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="处理多个异步请求"><a href="#处理多个异步请求" class="headerlink" title="处理多个异步请求"></a>处理多个异步请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 await处理多个异步请求时，会按代码顺序依次返回请求结果</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> info = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;async2?info=&#x27;</span> + info.<span class="property">data</span>);</span><br><span class="line">     <span class="comment">//第二个请求的参数是第一个请求的返回结果</span></span><br><span class="line">    <span class="keyword">return</span> ret.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>web API02</title>
    <url>/2022/03/02/00-00-00/</url>
    <content><![CDATA[<h1 id="day02-Web-APIs"><a href="#day02-Web-APIs" class="headerlink" title="day02 - Web APIs"></a>day02 - Web APIs</h1><blockquote>
<p>学习目标：</p>
<p>能够说出排他操作的一般实现步骤</p>
<p>能够使用html5中的dataset方式操作自定义属性</p>
<p>能够根据提示完成百度换肤的案例</p>
<p>能够根据提示完成全选案例</p>
<p>能够根据提示完成tab栏切换案例</p>
<p>能够区分元素节点、文本节点、属性节点</p>
<p>能够获取指定元素的父元素</p>
<p>能够获取指定元素的所有子元素</p>
<p>能够说出childNodes和children的区别</p>
<p>能够使用createElement创建页面元素</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-排他操作"><a href="#1-1-排他操作" class="headerlink" title="1.1. 排他操作"></a>1.1. 排他操作</h2><h3 id="1-1-1-排他思想"><a href="#1-1-1-排他思想" class="headerlink" title="1.1.1 排他思想"></a>1.1.1 排他思想</h3><p><img src="/images2/1550914482628.png" alt="1550914482628"></p>
<p>如果有同一组元素，我们想要某一个元素实现某种样式， 需要用到循环的排他思想算法：</p>
<ol>
<li><p>所有元素全部清除样式（干掉其他人）</p>
</li>
<li><p>给当前元素设置样式 （留下我自己）</p>
</li>
<li><p>注意顺序不能颠倒，首先干掉其他人，再设置自己</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 获取所有按钮元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// btns得到的是伪数组  里面的每一个元素 btns[i]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) 我们先把所有的按钮背景颜色去掉  干掉所有人</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) 然后才让当前的元素背景颜色为pink 留下我自己</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="1-2-案例：百度换肤"><a href="#1-2-案例：百度换肤" class="headerlink" title="1.2 案例：百度换肤"></a>1.2 案例：百度换肤</h2><p><img src="/images2/1550914640677.png" alt="1550914640677"></p>
<p><img src="/images2/1550914663042.png" alt="1550914663042"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images2/1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images2/2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images2/3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images2/4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.baidu&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(imgs);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 循环注册事件 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            imgs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// this.src 就是我们点击图片的路径   images2/2.jpg</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(this.src);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 把这个路径 this.src 给body 就可以了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">&#x27;url(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">src</span> + <span class="string">&#x27;)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="1-3-案例：表格隔行变色"><a href="#1-3-案例：表格隔行变色" class="headerlink" title="1.3 案例：表格隔行变色"></a>1.3 案例：表格隔行变色</h2><p><img src="/images2/1550914791881.png" alt="1550914791881"></p>
<p><img src="/images2/1550914812202.png" alt="1550914812202"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.获取元素 获取的是 tbody 里面所有的行</span></span><br><span class="line">    <span class="keyword">var</span> trs = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">    <span class="comment">// 2. 利用循环绑定注册事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; trs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 3. 鼠标经过事件 onmouseover</span></span><br><span class="line">        trs[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// console.log(11);</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;bg&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 4. 鼠标离开事件 onmouseout</span></span><br><span class="line">        trs[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-案例：全选"><a href="#1-4-案例：全选" class="headerlink" title="1.4 案例：全选"></a>1.4 案例：全选</h2><p><img src="/images2/1550914980274.png" alt="1550914980274"></p>
<p><img src="/images2/1550915005393.png" alt="1550915005393"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 全选和取消全选做法：  让下面所有复选框的checked属性（选中状态） 跟随 全选按钮即可</span></span><br><span class="line">    <span class="comment">// 获取元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> j_cbAll = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_cbAll&#x27;</span>); </span><br><span class="line">    <span class="keyword">var</span> j_tbs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;j_tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>); </span><br><span class="line">    <span class="comment">// 全选按钮注册事件</span></span><br><span class="line">    j_cbAll.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// this.checked 当前复选框的选中状态</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">checked</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                j_tbs[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span>;</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 给所有的子复选框注册单击事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        j_tbs[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// flag 控制全选按钮是否选中</span></span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 每次点击下面的复选框都要循环检查者4个小按钮是否全被选中</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; j_tbs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!j_tbs[i].<span class="property">checked</span>) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置全选按钮的状态</span></span><br><span class="line">            j_cbAll.<span class="property">checked</span> = flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h2 id="1-5-自定义属性操作"><a href="#1-5-自定义属性操作" class="headerlink" title="1.5. 自定义属性操作"></a>1.5. 自定义属性操作</h2><h3 id="1-5-1-获取属性值"><a href="#1-5-1-获取属性值" class="headerlink" title="1.5.1 获取属性值"></a>1.5.1 获取属性值</h3><p><img src="/images2/1550915376339.png" alt="1550915376339"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// index就是自定义属性</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取元素的属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// (1) element.属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">id</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//(2) element.getAttribute(&#x27;属性&#x27;)  </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;id&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-设置属性值"><a href="#1-5-2-设置属性值" class="headerlink" title="1.5.2. 设置属性值"></a>1.5.2. 设置属性值</h3><p><img src="/images2/1550915445026.png" alt="1550915445026"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 设置元素属性值</span></span><br><span class="line"><span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span><br><span class="line">div.<span class="property">id</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line"><span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);  主要针对于自定义属性</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); <span class="comment">// class 特殊  这里面写的就是</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-3-移出属性"><a href="#1-5-3-移出属性" class="headerlink" title="1.5.3. 移出属性"></a>1.5.3. 移出属性</h3><p><img src="/images2/1550915513137.png" alt="1550915513137"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3 移除属性 removeAttribute(属性)    </span></span><br><span class="line">div.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="1-5-4-案例：tab栏"><a href="#1-5-4-案例：tab栏" class="headerlink" title="1.5.4. 案例：tab栏"></a>1.5.4. 案例：tab栏</h3><p><img src="/images2/1550915567627.png" alt="1550915567627"></p>
<p><img src="/images2/1550915590707.png" alt="1550915590707"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> tab_list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lis = tab_list.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for循环，给选项卡绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 开始给5个小li 设置索引号 </span></span></span><br><span class="line"><span class="language-javascript">        lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span></span><br><span class="line"><span class="language-javascript">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 下面的显示内容模块</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            items[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// 或者只用i，注意用let声明</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.tab_list&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 每一个li注册点击事件 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            items[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-H5自定义属性"><a href="#1-5-5-H5自定义属性" class="headerlink" title="1.5.5. H5自定义属性"></a>1.5.5. H5自定义属性</h3><p>自定义属性目的：是<strong>为了保存并使用数据</strong>。有些数据可以保存到页面中而不用保存到数据库中。</p>
<p>自定义属性获取是通过getAttribute(‘属性’) 获取。</p>
<p>但是有些自定义属性很容易引起歧义，不容易判断是元素的内置属性还是自定义属性。</p>
<p>H5给我们新增了自定义属性：</p>
<p><img src="/images2/1550915798516.png" alt="1550915798516"></p>
<p><img src="/images2/1550915815571.png" alt="1550915815571"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">getTime</span>=<span class="string">&quot;20&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">data-list-name</span>=<span class="string">&quot;andy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(div.getTime);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;getTime&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-list-name&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">index</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;index&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果自定义属性里面有多个-链接的单词，获取时采取 驼峰命名法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>.<span class="property">listName</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">dataset</span>[<span class="string">&#x27;listName&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-6-节点操作"><a href="#1-6-节点操作" class="headerlink" title="1.6. 节点操作"></a>1.6. 节点操作</h2><h3 id="1-6-1-节点概述"><a href="#1-6-1-节点概述" class="headerlink" title="1.6.1. 节点概述"></a>1.6.1. 节点概述</h3><p>​	网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p>
<p>​	使用DOM来获取元素，逻辑性不强且较繁琐。</p>
<p>​	利用节点的层级关系(父子兄弟)来获取元素，逻辑性强且较简单，但兼容性差一些</p>
<p><img src="/images2/1550970944363.png" alt="1550970944363"></p>
<p>​	一般地，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p>
<p><img src="/images2/1550970986988.png" alt="1550970986988"></p>
<h3 id="1-6-2-节点层级"><a href="#1-6-2-节点层级" class="headerlink" title="1.6.2. 节点层级"></a>1.6.2. 节点层级</h3><p>​	利用 DOM 树可以把节点划分为不同的层级关系，常见的是<strong>父子兄层级关系</strong>。</p>
<p>​    <img src="/images2/1550971058781.png" alt="1550971058781"></p>
<h3 id="1-6-3-父级节点-重点记忆"><a href="#1-6-3-父级节点-重点记忆" class="headerlink" title="1.6.3. 父级节点  重点记忆"></a>1.6.3. 父级节点  重点记忆</h3><p><img src="/images2/1550971196686.png" alt="1550971196686"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;erweima&quot;</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 父节点 parentNode</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> erweima = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.erweima&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var box = document.querySelector(&#x27;.box&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(erweima.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-4-子节点"><a href="#1-6-4-子节点" class="headerlink" title="1.6.4. 子节点"></a>1.6.4. 子节点</h3><p><strong>所有子节点</strong></p>
<p><img src="/images2/1550971263925.png" alt="1550971263925"></p>
<p><strong>子元素节点</strong>  <strong>重点记忆</strong></p>
<p><img src="/images2/1550971325828.png" alt="1550971325828"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// DOM 提供的方法（API）获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lis = ul.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 子节点  childNodes 所有的子节点 包含 元素节点 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">0</span>].<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[<span class="number">1</span>].<span class="property">nodeType</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. children 获取所有的子元素节点 也是我们实际开发常用的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">children</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>第1个子节点</strong></p>
<p>包括文本节点</p>
<p><img src="/images2/1550971774758.png" alt="1550971774758"></p>
<p><strong>最后1个子节点</strong></p>
<p>包括文本节点</p>
<p><img src="/images2/1550971825493.png" alt="1550971825493"></p>
<p><strong>第1个子元素节点</strong></p>
<p><img src="/images2/1550972014509.png" alt="1550972014509"></p>
<p><strong>最后1个子元素节点</strong></p>
<p><img src="/images2/1550972106485.png" alt="1550972106485"></p>
<p>​	实际开发中，firstChild 和 lastChild 包含其他节点，操作不方便，而 firstElementChild 和 lastElementChild 又有兼容性问题，那么我们如何获取第一个子元素节点或最后一个子元素节点呢？</p>
<p><img src="/images2/1550972648014.png" alt="1550972648014"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ol = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ol&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. firstChild 第一个子节点 不管是文本节点还是元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstChild</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastChild</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. firstElementChild 返回第一个子元素节点 ie9才支持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">firstElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">lastElementChild</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 实际开发的写法  既没有兼容性问题又返回第一个子元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ol.<span class="property">children</span>[ol.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-5-案例：新浪下拉菜单"><a href="#1-6-5-案例：新浪下拉菜单" class="headerlink" title="1.6.5. 案例：新浪下拉菜单"></a>1.6.5. 案例：新浪下拉菜单</h3><p><img src="/images2/1550974934894.png" alt="1550974934894"></p>
<p><img src="/images2/1550975025608.png" alt="1550975025608"></p>
<p><img src="/images2/1550975049176.png" alt="1550975049176"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 获取元素</span></span><br><span class="line">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> lis = nav.<span class="property">children</span>; <span class="comment">// 得到4个小li</span></span><br><span class="line">    <span class="comment">// 2.循环注册事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        lis[i].<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lis[i].<span class="property">onmouseout</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-6-兄弟节点"><a href="#1-6-6-兄弟节点" class="headerlink" title="1.6.6. 兄弟节点"></a>1.6.6. 兄弟节点</h3><p><strong>下一个兄弟节点</strong></p>
<p><img src="/images2/1550973538696.png" alt="1550973538696"></p>
<p><strong>上一个兄弟节点</strong></p>
<p><img src="/images2/1550973558511.png" alt="1550973558511"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextSibling</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousSibling</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">nextElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">previousElementSibling</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>下一个兄弟元素节点（有兼容性问题）</strong></p>
<p><img src="/images2/1550973610223.png" alt="1550973610223"></p>
<p><strong>上一个兄弟元素节点（有兼容性问题）</strong></p>
<p><img src="/images2/1550973630150.png" alt="1550973630150"></p>
<p><img src="/images2/1550973722805.png" alt="1550973722805"></p>
<p><img src="/images2/1550973799759.png" alt="1550973799759"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNextElementSibling</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> el = element;</span><br><span class="line">  <span class="keyword">while</span> (el = el.<span class="property">nextSibling</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (el.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> el;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<h3 id="1-6-7-创建节点"><a href="#1-6-7-创建节点" class="headerlink" title="1.6.7. 创建节点"></a>1.6.7. 创建节点</h3><p><img src="/images2/1550975514321.png" alt="1550975514321"></p>
<h3 id="1-6-8-添加节点"><a href="#1-6-8-添加节点" class="headerlink" title="1.6.8. 添加节点"></a>1.6.8. 添加节点</h3><p><img src="/images2/1550975640170.png" alt="1550975640170"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 创建节点元素节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lili = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">insertBefore</span>(lili, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 我们想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-9-案例：简单版发布留言"><a href="#1-6-9-案例：简单版发布留言" class="headerlink" title="1.6.9. 案例：简单版发布留言"></a>1.6.9. 案例：简单版发布留言</h3><p><img src="/images2/1550975849302.png" alt="1550975849302"></p>
<p><img src="/images2/1550975887017.png" alt="1550975887017"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">innerHTML</span> = text.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">                ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web API04</title>
    <url>/2022/03/04/00-00-00/</url>
    <content><![CDATA[<h1 id="day04-Web-APIs"><a href="#day04-Web-APIs" class="headerlink" title="day04 - Web APIs"></a>day04 - Web APIs</h1><blockquote>
<p>学习目标：</p>
<p>能够说出常用的3-5个键盘事件</p>
<p>能够知道如何获取当前键盘按下的是哪个键</p>
<p>能够知道浏览器的顶级对象window</p>
<p>能够使用window.onload事件</p>
<p>能够使用window.onresize事件</p>
<p>能够说出两种定时器的区别</p>
<p>能够使用location对象的href属性完成页面之间的跳转</p>
<p>能够使用location对象获取url中的参数部分</p>
<p>能够使用history提供的方法实现页面刷新</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-常用的键盘事件"><a href="#1-1-常用的键盘事件" class="headerlink" title="1.1. 常用的键盘事件"></a>1.1. 常用的键盘事件</h2><h3 id="1-1-1-键盘事件"><a href="#1-1-1-键盘事件" class="headerlink" title="1.1.1 键盘事件"></a>1.1.1 键盘事件</h3><p><img src="/images4/1551318122855.png" alt="1551318122855"></p>
<p><img src="/images4/1551318160371.png" alt="1551318160371"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 常用的键盘事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. keyup 按键弹起的时候触发 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我弹起了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. keypress 不能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了press&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. keydown 能识别功能键 比如 ctrl shift 左右箭头啊</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我按下了down&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4. 三个事件的执行顺序  keydown -- keypress -- keyup</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-2-键盘事件对象"><a href="#1-1-2-键盘事件对象" class="headerlink" title="1.1.2 键盘事件对象"></a>1.1.2 键盘事件对象</h3><p><img src="/images4/1551318355505.png" alt="1551318355505"></p>
<p><img src="/images4/1551318404238.png" alt="1551318404238"></p>
<p><strong>使用keyCode属性判断用户按下哪个键</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 用keycode返回的ASCII码值来判断用户按下了那个键</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">65</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;您按下的a键&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;您没有按下a键&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;press:&#x27;</span> + e.<span class="property">keyCode</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-案例：模拟京东按键输入内容"><a href="#1-1-3-案例：模拟京东按键输入内容" class="headerlink" title="1.1.3 案例：模拟京东按键输入内容"></a>1.1.3 案例：模拟京东按键输入内容</h3><p>当我们按下 s 键， 光标就定位到搜索框（文本框获得焦点）。</p>
<p><img src="/images4/1551318669520.png" alt="1551318669520"></p>
<blockquote>
<p>注意：触发获得焦点事件，可以使用 元素对象.focus()</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 获取输入框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> search = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 给document注册keyup事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 判断keyCode的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">83</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 触发输入框的获得焦点事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            search.<span class="title function_">focus</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-4-案例：模拟京东快递单号查询"><a href="#1-1-4-案例：模拟京东快递单号查询" class="headerlink" title="1.1.4 案例：模拟京东快递单号查询"></a>1.1.4 案例：模拟京东快递单号查询</h3><p>要求：当我们在文本框中输入内容时，文本框上面自动显示大字号的内容。</p>
<p><img src="/images4/1551318882189.png" alt="1551318882189"></p>
<p><img src="/images4/1551318909264.png" alt="1551318909264"><br><strong>这里只能用keyup事件，keydown和keypress一旦键按下就立即触发事件，但此时键值还没来得及输入到文本框中</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;con&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的快递单号&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取要操作的元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> con = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.con&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> jd_input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.jd&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给输入框注册keyup事件</span></span></span><br><span class="line"><span class="language-javascript">    jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 判断输入框内容是否为空</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 为空，隐藏放大提示盒子</span></span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 不为空，显示放大提示盒子，设置盒子的内容</span></span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                con.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给输入框注册失去焦点事件，隐藏放大提示盒子</span></span></span><br><span class="line"><span class="language-javascript">    jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;blur&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给输入框注册获得焦点事件</span></span></span><br><span class="line"><span class="language-javascript">    jd_input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;focus&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 判断输入框内容是否为空</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">value</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 不为空则显示提示盒子</span></span></span><br><span class="line"><span class="language-javascript">            con.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-2-BOM"><a href="#1-2-BOM" class="headerlink" title="1.2. BOM"></a>1.2. BOM</h2><h3 id="1-2-1-什么是BOM"><a href="#1-2-1-什么是BOM" class="headerlink" title="1.2.1. 什么是BOM"></a>1.2.1. 什么是BOM</h3><p>​	BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。</p>
<p>​	BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性。</p>
<p>​	BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape 浏览器标准的一部分。</p>
<p><img src="/images4/1551319264407.png" alt="1551319264407"></p>
<h3 id="1-2-2-BOM的构成"><a href="#1-2-2-BOM的构成" class="headerlink" title="1.2.2. BOM的构成"></a>1.2.2. BOM的构成</h3><p>BOM 比 DOM 更大，它包含 DOM。</p>
<p><img src="/images4/1551319344183.png" alt="1551319344183"></p>
<h3 id="1-2-3-顶级对象window"><a href="#1-2-3-顶级对象window" class="headerlink" title="1.2.3. 顶级对象window"></a>1.2.3. 顶级对象window</h3><p><img src="/images4/1551319372909.png" alt="1551319372909"></p>
<h3 id="1-2-4-window对象的常见事件"><a href="#1-2-4-window对象的常见事件" class="headerlink" title="1.2.4. window对象的常见事件"></a>1.2.4. window对象的常见事件</h3><h4 id="页面（窗口）加载事件（2种）"><a href="#页面（窗口）加载事件（2种）" class="headerlink" title="页面（窗口）加载事件（2种）"></a>页面（窗口）加载事件（2种）</h4><p><strong>第1种</strong></p>
<p><img src="/images4/1551319525109.png" alt="1551319525109"></p>
<p>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。</p>
<p><img src="/images4/1551319600263.png" alt="1551319600263"></p>
<p><strong>第2种</strong>（注意是document.）</p>
<p><img src="/images4/1551319620299.png" alt="1551319620299"></p>
<p>​	DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等。</p>
<p>​	IE9以上才支持！！！</p>
<p>​	如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">33</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h4><p><img src="/images4/1551319803117.png" alt="1551319803117"></p>
<p>​	window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。</p>
<p>注意：</p>
<ol>
<li><p>只要窗口大小发生像素变化，就会触发这个事件。</p>
</li>
<li><p>我们经常利用这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 注册页面加载事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">// 注册调整窗口大小事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// window.innerWidth 获取窗口大小</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;变化了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">innerWidth</span> &lt;= <span class="number">800</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-5-定时器（两种）"><a href="#1-2-5-定时器（两种）" class="headerlink" title="1.2.5. 定时器（两种）"></a>1.2.5. 定时器（两种）</h3><p>window 对象给我们提供了 2 个非常好用的方法-定时器。</p>
<ul>
<li><p>setTimeout() </p>
</li>
<li><p>setInterval()</p>
</li>
</ul>
<h4 id="setTimeout-炸弹定时器"><a href="#setTimeout-炸弹定时器" class="headerlink" title="setTimeout() 炸弹定时器"></a>setTimeout() 炸弹定时器</h4><h5 id="开启定时器"><a href="#开启定时器" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/images4/1551320279307.png" alt="1551320279307"></p>
<p><img src="/images4/1551320408854.png" alt="1551320408854"></p>
<p><img src="/images4/1551320298981.png" alt="1551320298981"></p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">普通函数是按照代码顺序直接调用。</span><br><span class="line"></span><br><span class="line">简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。</span><br><span class="line">例如：定时器中的调用函数，事件处理函数，也是回调函数。</span><br><span class="line"></span><br><span class="line">以前我们讲的   element.onclick = function()&#123;&#125;   或者  element.addEventListener(“click”, fn);   里面的 函数也是回调函数。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 回调函数是一个匿名函数</span></span></span><br><span class="line"><span class="language-javascript">       <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;时间到了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       &#125;, <span class="number">2000</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 回调函数是一个有名函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// timer1和timer2是定时器标识(timeoutID)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="停止定时器"><a href="#停止定时器" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/images4/1551321051001.png" alt="1551321051001"></p>
<p><img src="/images4/1551321064154.png" alt="1551321064154"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">5000</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给按钮注册单击事件</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 停止定时器</span></span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearTimeout</span>(timer);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="setInterval-闹钟定时器"><a href="#setInterval-闹钟定时器" class="headerlink" title="setInterval() 闹钟定时器"></a>setInterval() 闹钟定时器</h4><h5 id="开启定时器-1"><a href="#开启定时器-1" class="headerlink" title="开启定时器"></a>开启定时器</h5><p><img src="/images4/1551321162158.png" alt="1551321162158"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. setInterval </span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="案例：倒计时"><a href="#案例：倒计时" class="headerlink" title="案例：倒计时"></a>案例：倒计时</h5><p><img src="/images4/1551321298787.png" alt="1551321298787"></p>
<p><img src="/images4/1551321322188.png" alt="1551321322188"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;minute&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取元素（时分秒盒子） </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hour = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hour&#x27;</span>); <span class="comment">// 小时的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> minute = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.minute&#x27;</span>); <span class="comment">// 分钟的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> second = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.second&#x27;</span>); <span class="comment">// 秒数的黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2019-5-1 18:00:00&#x27;</span>); <span class="comment">// 返回的是用户输入时间总的毫秒数</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">countDown</span>(); <span class="comment">// 我们先调用一次这个函数，防止第一次刷新页面有空白 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 开启定时器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(countDown, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">		</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span></span><br><span class="line"><span class="language-javascript">        h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span></span><br><span class="line"><span class="language-javascript">        hour.<span class="property">innerHTML</span> = h; <span class="comment">// 把剩余的小时给 小时黑色盒子</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span></span><br><span class="line"><span class="language-javascript">        m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span></span><br><span class="line"><span class="language-javascript">        minute.<span class="property">innerHTML</span> = m;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span></span><br><span class="line"><span class="language-javascript">        s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span></span><br><span class="line"><span class="language-javascript">        second.<span class="property">innerHTML</span> = s;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="停止定时器-1"><a href="#停止定时器-1" class="headerlink" title="停止定时器"></a>停止定时器</h5><p><img src="/images4/1551321444559.png" alt="1551321444559"></p>
<h4 id="案例：发送短信倒计时"><a href="#案例：发送短信倒计时" class="headerlink" title="案例：发送短信倒计时"></a>案例：发送短信倒计时</h4><p>​	点击按钮后，该按钮60秒之内不能再次点击，防止重复发送短信。</p>
<p><img src="/images4/1551321540676.png" alt="1551321540676"></p>
<p><img src="/images4/1551321564247.png" alt="1551321564247"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  手机号码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 全局变量，定义剩下的秒数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> time = <span class="number">3</span>; </span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注册单击事件</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 禁用按钮</span></span></span><br><span class="line"><span class="language-javascript">          btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="comment">// 判断剩余秒数</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">// 清除定时器和复原按钮</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                  btn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                  btn.<span class="property">innerHTML</span> = <span class="string">&#x27;发送&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  btn.<span class="property">innerHTML</span> = <span class="string">&#x27;还剩下&#x27;</span> + time + <span class="string">&#x27;秒&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                  time--;</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-6-this指向问题"><a href="#1-2-6-this指向问题" class="headerlink" title="1.2.6. this指向问题"></a>1.2.6. this指向问题</h3><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，<strong>一般情况下this的最终指向调用它的对象。</strong></p>
<p>现阶段，我们先了解一下几个this指向</p>
<ol>
<li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p>
</li>
<li><p>方法调用中谁调用this指向谁</p>
</li>
<li><p>构造函数中this指向构造函数的实例</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    o.<span class="title function_">sayHi</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// 事件处理函数中的this指向的是btn这个按钮对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-7-location对象"><a href="#1-2-7-location对象" class="headerlink" title="1.2.7. location对象"></a>1.2.7. location对象</h3><h4 id="什么是-location-对象"><a href="#什么是-location-对象" class="headerlink" title="什么是 location 对象"></a>什么是 location 对象</h4><p><img src="/images4/1551322091638.png" alt="1551322091638"></p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p><img src="/images4/1551322373704.png" alt="1551322373704"></p>
<p><img src="/images4/1551322387201.png" alt="1551322387201"></p>
<h4 id="location-对象的属性"><a href="#location-对象的属性" class="headerlink" title="location 对象的属性"></a>location 对象的属性</h4><p><img src="/images4/1551322416716.png" alt="1551322416716"></p>
<p><img src="/images4/1551322438200.png" alt="1551322438200"></p>
<h4 id="案例：5分钟自动跳转页面"><a href="#案例：5分钟自动跳转页面" class="headerlink" title="案例：5分钟自动跳转页面"></a>案例：5分钟自动跳转页面</h4><p><img src="/images4/1551322496871.png" alt="1551322496871"></p>
<p><img src="/images4/1551322517605.png" alt="1551322517605"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(location.href);</span></span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerHTML</span> = timer + <span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            timer--;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="案例：获取URL参数"><a href="#案例：获取URL参数" class="headerlink" title="案例：获取URL参数"></a>案例：获取URL参数</h4><p><img src="/images4/1551322622640.png" alt="1551322622640"></p>
<p><img src="/images4/1551322639241.png" alt="1551322639241"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(location.<span class="property">search</span>); <span class="comment">// ?uname=andy</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.先去掉？  substr(&#x27;起始的位置&#x27;，截取几个字符);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> params = location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>); <span class="comment">// uname=andy</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 利用=把字符串分割为数组 split(&#x27;=&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = params.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;uname&quot;, &quot;ANDY&quot;]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.把数据写入div中</span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerHTML</span> = arr[<span class="number">1</span>] + <span class="string">&#x27;欢迎您&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="location对象的常见方法"><a href="#location对象的常见方法" class="headerlink" title="location对象的常见方法"></a>location对象的常见方法</h4><p><img src="/images4/1551322750241.png" alt="1551322750241"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">        location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-8-navigator对象"><a href="#1-2-8-navigator对象" class="headerlink" title="1.2.8. navigator对象"></a>1.2.8. navigator对象</h3><p>​	navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p>
<p>下面前端代码可以判断用户那个终端打开页面，实现跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-9-history对象"><a href="#1-2-9-history对象" class="headerlink" title="1.2.9 history对象"></a>1.2.9 history对象</h3><p>​	window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</p>
<p><img src="/images4/1551322885216.png" alt="1551322885216"></p>
<p>history对象一般在实际开发中比较少用，但是会在一些 OA 办公系统中见到。</p>
<p><img src="/images4/1551322959148.png" alt="1551322959148"></p>
<h2 id="1-3-JS执行机制"><a href="#1-3-JS执行机制" class="headerlink" title="1.3. JS执行机制"></a>1.3. JS执行机制</h2><p>以下代码执行的结果是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>以下代码执行的结果是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);<span class="comment">// 同步任务</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>); <span class="comment">// 异步任务</span></span><br><span class="line"> &#125;, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);<span class="comment">// 同步任务</span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-1-JS-是单线程"><a href="#1-3-1-JS-是单线程" class="headerlink" title="1.3.1 JS 是单线程"></a>1.3.1 JS 是单线程</h3><p><img src="/images4/1551415019322.png" alt="1551415019322"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。</span><br><span class="line">这样所导致的问题是： 如果 <span class="variable constant_">JS</span> 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-同步任务和异步任务"><a href="#1-3-2-同步任务和异步任务" class="headerlink" title="1.3.2 同步任务和异步任务"></a>1.3.2 同步任务和异步任务</h3><p>​	为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是子线程完全受主线程控制。于是，JS 中出现了<strong>同步任务</strong>和<strong>异步任务</strong>。</p>
<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>​	前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。比如做饭的同步做法：我们要烧水煮饭，等水开了（10分钟之后），再去切菜，炒菜。</p>
<h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>​	你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧水的同时，利用这10分钟，去切菜，炒菜。</p>
<p><img src="/images4/1551434295074.png" alt="1551434295074"></p>
<blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">JS</span>中所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。</span><br><span class="line"></span><br><span class="line">同步任务指的是：</span><br><span class="line">	在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；</span><br><span class="line">异步任务指的是：</span><br><span class="line">	不进入主线程、而进入”任务队列”的任务，当主线程中的任务运行完了，才会从”任务队列”取出异步任务放入主线程执行。</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images4/1551434972778.png" alt="1551434972778"></p>
<h3 id="1-3-3-JS执行机制（事件循环）"><a href="#1-3-3-JS执行机制（事件循环）" class="headerlink" title="1.3.3 JS执行机制（事件循环）"></a>1.3.3 JS执行机制（事件循环）</h3><p><img src="/images4/1551435335464.png" alt="1551435335464"></p>
<p><img src="/images4/1551435398306.png" alt="1551435398306"></p>
<p><img src="/images4/1551435449634.png" alt="1551435449634"></p>
<ul>
<li><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5></li>
<li><p>先执行同步任务(直接放入执行栈)， 再执行异步任务</p>
</li>
<li><p>异步任务由异步进程来管理</p>
<ul>
<li><pre><code class="js">document.onclick = fn;
// 只有点击后，异步进程才将fn写入任务队列，等待放入执行栈

setTimeout(fn,1000);
// 只有时间到了以后，异步进程才将fn写入任务队列
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 同步任务执行完后，**将任务队列中的任务放入执行栈执行**</span><br><span class="line"></span><br><span class="line">- 再执行完后，再去任务队列看，这种循环机制称**事件循环**</span><br><span class="line"></span><br><span class="line">### 1.3.4 代码思考题</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line"> console.log(1);</span><br><span class="line"> document.onclick = function() &#123;</span><br><span class="line">   console.log(&#x27;click&#x27;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> setTimeout(function() &#123;</span><br><span class="line">   console.log(3)</span><br><span class="line"> &#125;, 3000)</span><br><span class="line"> console.log(2);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web API03</title>
    <url>/2022/03/03/00-00-00/</url>
    <content><![CDATA[<h1 id="day03-Web-APIs"><a href="#day03-Web-APIs" class="headerlink" title="day03 - Web APIs"></a>day03 - Web APIs</h1><blockquote>
<p>学习目标：</p>
<p>能够使用removeChild()方法删除节点</p>
<p>能够完成动态生成表格案例</p>
<p>能够使用传统方式和监听方式给元素注册事件</p>
<p>能够说出事件流执行的三个阶段</p>
<p>能够在事件处理函数中获取事件对象</p>
<p>能够使用事件对象取消默认行为</p>
<p>能够使用事件对象阻止事件冒泡</p>
<p>能够使用事件对象获取鼠标的位置</p>
<p>能够完成跟随鼠标的天使案例</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-节点操作"><a href="#1-1-节点操作" class="headerlink" title="1.1. 节点操作"></a>1.1. 节点操作</h2><h3 id="1-1-1-删除节点"><a href="#1-1-1-删除节点" class="headerlink" title="1.1.1 删除节点"></a>1.1.1 删除节点</h3><p><img src="/images3/1551163384254.png" alt="1551163384254"></p>
<p>node.removeChild() 方法从 node节点中删除一个子节点，返回删除的节点。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 删除元素  node.removeChild(child)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ul.removeChild(ul.children[0]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 点击按钮依次删除里面的孩子</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (ul.<span class="property">children</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-1-2-案例：删除留言"><a href="#1-1-2-案例：删除留言" class="headerlink" title="1.1.2 案例：删除留言"></a>1.1.2 案例：删除留言</h3><p><img src="/images3/1551163586475.png" alt="1551163586475"></p>
<p><img src="/images3/1551163635501.png" alt="1551163635501"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;textarea&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (text.<span class="property">value</span> == <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;您没有输入内容&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"><span class="language-javascript">            li.<span class="property">innerHTML</span> = text.<span class="property">value</span> + <span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"><span class="language-javascript">            ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// (3) 删除元素 删除的是当前链接的li  它的父亲</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 删除的是 li 当前a所在的li </span></span></span><br><span class="line"><span class="language-javascript">                    ul.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-3-复制（克隆）节点"><a href="#1-1-3-复制（克隆）节点" class="headerlink" title="1.1.3 复制（克隆）节点"></a>1.1.3 复制（克隆）节点</h3><p><img src="/images3/1551163763825.png" alt="1551163763825"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. node.cloneNode(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷贝 复制标签复制里面的内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> lili = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">appendChild</span>(lili);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-1-4-案例：动态生成表格"><a href="#1-1-4-案例：动态生成表格" class="headerlink" title="1.1.4 案例：动态生成表格"></a>1.1.4 案例：动态生成表格</h3><p><img src="/images3/1551163900675.png" alt="1551163900675"></p>
<p><img src="/images3/1551163924396.png" alt="1551163924396"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.先去准备好学生的数据</span></span><br><span class="line">    <span class="keyword">var</span> datas = [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;魏璎珞&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">        <span class="attr">score</span>: <span class="number">100</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;弘历&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">        <span class="attr">score</span>: <span class="number">98</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;傅恒&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">        <span class="attr">score</span>: <span class="number">99</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;明玉&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">        <span class="attr">score</span>: <span class="number">88</span></span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="comment">// 2. 往tbody 里面创建行</span></span><br><span class="line">    <span class="keyword">var</span> tbody = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;tbody&#x27;</span>);</span><br><span class="line">    <span class="comment">// 遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.<span class="property">length</span>; i++) &#123; </span><br><span class="line">        <span class="comment">// 1. 创建 tr行</span></span><br><span class="line">        <span class="keyword">var</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span><br><span class="line">        tbody.<span class="title function_">appendChild</span>(tr);</span><br><span class="line">        <span class="comment">// 2. 行里面创建单元格td </span></span><br><span class="line">        <span class="comment">// 使用for in遍历学生对象属性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> datas[i]) &#123; </span><br><span class="line">            <span class="comment">// 创建单元格 </span></span><br><span class="line">            <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line">            <span class="comment">// 把对象里面的属性值 datas[i][k] 给 td  </span></span><br><span class="line">            td.<span class="property">innerHTML</span> = datas[i][k];</span><br><span class="line">            tr.<span class="title function_">appendChild</span>(td);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 创建有删除2个字的单元格 </span></span><br><span class="line">        <span class="keyword">var</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span><br><span class="line">        td.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;a href=&quot;javascript:;&quot;&gt;删除 &lt;/a&gt;&#x27;</span>;</span><br><span class="line">        tr.<span class="title function_">appendChild</span>(td);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 删除操作 开始 </span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">as</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">as</span>[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 点击a 删除 当前a 所在的行(链接的爸爸的爸爸)  				node.removeChild(child)  </span></span><br><span class="line">            tbody.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="1-1-5-创建元素的三种方式"><a href="#1-1-5-创建元素的三种方式" class="headerlink" title="1.1.5 创建元素的三种方式"></a>1.1.5 创建元素的三种方式</h3><p><img src="/images3/1551164214925.png" alt="1551164214925"></p>
<ul>
<li>页面重绘的结果是原先的标签全部舍弃，只保留重绘的标签(排他)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 三种创建元素方式区别 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. innerHTML 创建元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">         inner.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = [];</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        arr.<span class="title function_">push</span>(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    inner.<span class="property">innerHTML</span> = arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. document.createElement() 创建元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.create&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        create.<span class="title function_">appendChild</span>(a);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-1-6-innerTHML和createElement效率对比（面试）"><a href="#1-1-6-innerTHML和createElement效率对比（面试）" class="headerlink" title="1.1.6 innerTHML和createElement效率对比（面试）"></a>1.1.6 innerTHML和createElement效率对比（面试）</h3><p><strong>innerHTML字符串拼接方式（效率低）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 字符串拼接，很耗时</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>createElement方式（效率一般）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>innerHTML数组方式（效率高）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> array = [];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            array.<span class="title function_">push</span>(<span class="string">&#x27;&lt;div&quot;&gt;&lt;/div&gt;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = array.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    	<span class="comment">// 数组拼接，效率高</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fn</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-2-DOM的核心总结"><a href="#1-2-DOM的核心总结" class="headerlink" title="1.2. DOM的核心总结"></a>1.2. DOM的核心总结</h2><ul>
<li>文档：整个页面是一个文档</li>
<li>元素：所有标签都是元素</li>
<li>节点：页面所有内容都是节点,包括元素节点，文本节点，属性节点</li>
</ul>
<p><img src="/images3/1551164669434.png" alt="1551164669434"></p>
<p><img src="/images3/1551164715018.png" alt="1551164715018"></p>
<p>关于dom操作，我们主要针对元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。</p>
<h3 id="1-2-1-创建"><a href="#1-2-1-创建" class="headerlink" title="1.2.1. 创建"></a>1.2.1. 创建</h3><p><img src="/images3/1551164797164.png" alt="1551164797164"></p>
<h3 id="1-2-2-增加"><a href="#1-2-2-增加" class="headerlink" title="1.2.2. 增加"></a>1.2.2. 增加</h3><p><img src="/images3/1551164829832.png" alt="1551164829832"></p>
<h3 id="1-2-3-删"><a href="#1-2-3-删" class="headerlink" title="1.2.3. 删"></a>1.2.3. 删</h3><p><img src="/images3/1551164872533.png" alt="1551164872533"></p>
<h3 id="1-2-4-改"><a href="#1-2-4-改" class="headerlink" title="1.2.4. 改"></a>1.2.4. 改</h3><p><img src="/images3/1551164907830.png" alt="1551164907830"></p>
<h3 id="1-2-5-查"><a href="#1-2-5-查" class="headerlink" title="1.2.5. 查"></a>1.2.5. 查</h3><p><img src="/images3/1551164936214.png" alt="1551164936214"></p>
<h3 id="1-2-6-属性操作"><a href="#1-2-6-属性操作" class="headerlink" title="1.2.6. 属性操作"></a>1.2.6. 属性操作</h3><p><img src="/images3/1551164985383.png" alt="1551164985383"></p>
<h3 id="1-2-7-事件操作（重点）"><a href="#1-2-7-事件操作（重点）" class="headerlink" title="1.2.7. 事件操作（重点）"></a>1.2.7. 事件操作（重点）</h3><h2 id="1-3-事件高级"><a href="#1-3-事件高级" class="headerlink" title="1.3. 事件高级"></a>1.3. 事件高级</h2><h3 id="1-3-1-注册事件（2种方式）"><a href="#1-3-1-注册事件（2种方式）" class="headerlink" title="1.3.1. 注册事件（2种方式）"></a>1.3.1. 注册事件（2种方式）</h3><p><img src="/images3/1551165252019.png" alt="1551165252019"></p>
<h3 id="1-3-2-事件监听"><a href="#1-3-2-事件监听" class="headerlink" title="1.3.2 事件监听"></a>1.3.2 事件监听</h3><h4 id="addEventListener-事件监听（IE9以后支持）"><a href="#addEventListener-事件监听（IE9以后支持）" class="headerlink" title="addEventListener()事件监听（IE9以后支持）"></a>addEventListener()事件监听（IE9以后支持）</h4><p><img src="/images3/1551165364122.png" alt="1551165364122"></p>
<p>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p>
<p><img src="/images3/1551165604792.png" alt="1551165604792"></p>
<h4 id="attacheEvent-事件监听（IE678支持）"><a href="#attacheEvent-事件监听（IE678支持）" class="headerlink" title="attacheEvent()事件监听（IE678支持）"></a>attacheEvent()事件监听（IE678支持）</h4><p><img src="/images3/1551165781836.png" alt="1551165781836"></p>
<p>​	eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p>
<p><img src="/images3/1551165843912.png" alt="1551165843912"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>方法监听注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>ie9 attachEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 传统方式注册事件</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;hao a u&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// 2. 事件侦听注册事件 addEventListener </span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带on</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="number">33</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. attachEvent ie9以前的版本支持</span></span></span><br><span class="line"><span class="language-javascript">    btns[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="事件监听兼容性解决方案"><a href="#事件监听兼容性解决方案" class="headerlink" title="事件监听兼容性解决方案"></a>事件监听兼容性解决方案</h4><p>封装一个函数，函数中判断浏览器的类型：</p>
<p><img src="/images3/1551166023885.png" alt="1551166023885"></p>
<h3 id="1-3-3-删除事件（解绑事件）"><a href="#1-3-3-删除事件（解绑事件）" class="headerlink" title="1.3.3. 删除事件（解绑事件）"></a>1.3.3. 删除事件（解绑事件）</h3><p><img src="/images3/1551166185410.png" alt="1551166185410"></p>
<p><strong>若需要用removeEventListener删除事件，则在addEventListener中需要写一个非匿名的事件函数，以供调用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 传统方式删除事件</span></span></span><br><span class="line"><span class="language-javascript">        divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. removeEventListener 删除事件</span></span></span><br><span class="line"><span class="language-javascript">    divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn 不需要调用加小括号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span><br><span class="line"><span class="language-javascript">        divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, fn);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. detachEvent</span></span></span><br><span class="line"><span class="language-javascript">    divs[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="number">33</span>);</span></span><br><span class="line"><span class="language-javascript">        divs[<span class="number">2</span>].<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>**删除事件兼容性解决方案 **</p>
<p><img src="/images3/1551166332453.png" alt="1551166332453"></p>
<h3 id="1-3-4-DOM事件流（面试）"><a href="#1-3-4-DOM事件流（面试）" class="headerlink" title="1.3.4. DOM事件流（面试）"></a>1.3.4. DOM事件流（面试）</h3><blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html中的标签都是相互嵌套的，我们可以将元素想象成一个盒子装一个盒子，document是最外面的大盒子。</span><br><span class="line">当你单击一个div时，同时你也单击了div的父元素，甚至整个页面。</span><br><span class="line"></span><br><span class="line">那么是先执行父元素的单击事件，还是先执行div的单击事件 ？？？</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/images3/1551166423144.png" alt="1551166423144"></p>
<blockquote>
<p>比如：我们给页面中的一个div注册了单击事件，当你单击了div时，也就单击了body，单击了html，单击了document。</p>
</blockquote>
<p><img src="/images3/1551166555833.png" alt="1551166555833"></p>
<p><img src="/images3/1551166581552.png" alt="1551166581552"></p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IE 提出从目标元素开始，然后一层一层向外接收事件并响应，也就是冒泡型事件流。</span><br><span class="line">Netscape（网景公司）提出从最外层开始，然后一层一层向内接收事件并响应，也就是捕获型事件流。</span><br><span class="line"></span><br><span class="line">最终，w3c 采用折中的方式，制定了统一的标准 先捕获再冒泡。</span><br><span class="line">现代浏览器都遵循了此标准，所以当事件发生时，会经历3个阶段。</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>DOM 事件流会经历3个阶段：</strong> </p>
<ol>
<li><p>捕获阶段</p>
</li>
<li><p>当前目标阶段</p>
</li>
<li><p>冒泡阶段</p>
</li>
</ol>
<p><img src="/images3/1551169007768.png" alt="1551169007768"></p>
<p><img src="/images3/1551169042295.png" alt="1551169042295"></p>
<p><strong>事件冒泡</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// onclick 和 attachEvent（ie） 在冒泡阶段触发</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// son -&gt; father -&gt;body -&gt; html -&gt; document</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给son注册单击事件</span></span></span><br><span class="line"><span class="language-javascript">      son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给father注册单击事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给document注册单击事件，省略第3个参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>事件捕获</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果addEventListener() 第三个参数是 true 那么在捕获阶段触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// document -&gt; html -&gt; body -&gt; father -&gt; son</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给son注册单击事件，第3个参数为true</span></span></span><br><span class="line"><span class="language-javascript">     son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> father = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给father注册单击事件，第3个参数为true</span></span></span><br><span class="line"><span class="language-javascript">     father.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">     &#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给document注册单击事件，第3个参数为true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;document&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-5-事件对象"><a href="#1-3-5-事件对象" class="headerlink" title="1.3.5. 事件对象"></a>1.3.5. 事件对象</h3><h4 id="什么是事件对象"><a href="#什么是事件对象" class="headerlink" title="什么是事件对象"></a>什么是事件对象</h4><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p>
<p>比如：  </p>
<ol>
<li><p>谁绑定了这个事件。</p>
</li>
<li><p>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</p>
</li>
<li><p>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</p>
</li>
</ol>
<h4 id="事件对象的使用"><a href="#事件对象的使用" class="headerlink" title="事件对象的使用"></a>事件对象的使用</h4><p>事件触发发生时就会产生事件对象，并且系统会以实参的形式传给事件处理函数。</p>
<p>所以，在事件处理函数中声明1个形参用来接收事件对象。</p>
<p><img src="/images3/1551169537789.png" alt="1551169537789"></p>
<h4 id="事件对象的兼容性处理"><a href="#事件对象的兼容性处理" class="headerlink" title="事件对象的兼容性处理"></a>事件对象的兼容性处理</h4><p>事件对象本身的获取存在兼容问题：</p>
<ol>
<li><p>标准浏览器中是浏览器给方法传递的参数，只需要定义形参 e 就可以获取到。</p>
</li>
<li><p>在 IE6~8 中，浏览器不会给方法传递参数，如果需要的话，需要到 window.event 中获取查找。</p>
</li>
</ol>
<p><img src="/images3/1551169680823.png" alt="1551169680823"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 事件对象</span></span></span><br><span class="line"><span class="language-javascript">        e = e || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h4><p><img src="/images3/1551169931778.png" alt="1551169931778"></p>
<h4 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h4><ul>
<li><p>this 是绑定事件的元素（绑定这个事件处理函数的元素） 。</p>
</li>
<li><p>e.target是触发事件的元素。</p>
</li>
</ul>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">常情况下terget 和 this是一致的，</span><br><span class="line">但有一种情况不同，那就是在事件冒泡时（父子元素有相同事件，单击子元素，父元素的事件处理函数也会被触发执行），</span><br><span class="line">	这时候this指向的是父元素，因为它是绑定事件的元素对象，</span><br><span class="line">	而target指向的是子元素，因为他是触发事件的那个具体元素对象。</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// e.target 和 this指向的都是div</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件冒泡下的e.target和this</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 我们给ul 绑定了事件  那么this 就指向ul  </span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// ul</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>); <span class="comment">// li</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-6-阻止默认行为"><a href="#1-3-6-阻止默认行为" class="headerlink" title="1.3.6 阻止默认行为"></a>1.3.6 阻止默认行为</h3><blockquote>
<p>html中一些标签有默认行为，例如a标签被单击后，默认会进行页面跳转。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 阻止默认行为 让链接不跳转 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         e.<span class="title function_">preventDefault</span>(); <span class="comment">//  dom 标准写法</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 传统的注册方式</span></span></span><br><span class="line"><span class="language-javascript">    a.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 普通浏览器 e.preventDefault();  方法</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 低版本浏览器 ie678  returnValue  属性</span></span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">returnValue</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 我们可以利用return false 也能阻止默认行为 没有兼容性问题</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-7-阻止事件冒泡"><a href="#1-3-7-阻止事件冒泡" class="headerlink" title="1.3.7 阻止事件冒泡"></a>1.3.7 阻止事件冒泡</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p>
<p><img src="/images3/1551171467194.png" alt="1551171467194"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span>son儿子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给son注册单击事件</span></span></span><br><span class="line"><span class="language-javascript">    son.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;son&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">stopPropagation</span>(); <span class="comment">// 阻止冒泡</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡S</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>阻止事件冒泡的兼容性处理</strong></p>
<p><img src="/images3/1551171657513.png" alt="1551171657513"></p>
<h3 id="1-3-8-事件委托"><a href="#1-3-8-事件委托" class="headerlink" title="1.3.8 事件委托"></a>1.3.8 事件委托</h3><p>事件冒泡本身的特性，会带来的坏处，也会带来的好处。</p>
<h4 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把事情委托给别人，代为处理。</span><br></pre></td></tr></table></figure>

<p>事件委托也称为事件代理，在 jQuery 里面称为事件委派。</p>
<p><strong>js事件中的代理：</strong></p>
<p><img src="/images3/1551172159273.png" alt="1551172159273"></p>
<h4 id="事件委托的原理（面试）"><a href="#事件委托的原理（面试）" class="headerlink" title="事件委托的原理（面试）"></a>事件委托的原理（面试）</h4><p>​	给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p>
<h4 id="事件委托的作用"><a href="#事件委托的作用" class="headerlink" title="事件委托的作用"></a>事件委托的作用</h4><ul>
<li><p>我们只操作了一次 DOM ，提高了程序的性能。</p>
</li>
<li><p>动态新创建的子元素，也拥有事件。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在手！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点，这样不用给每个li添加监听，可提高性能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 让被点击的li的背景变色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="1-4-常用鼠标事件"><a href="#1-4-常用鼠标事件" class="headerlink" title="1.4. 常用鼠标事件"></a>1.4. 常用鼠标事件</h2><p><img src="/images3/1551172699854.png" alt="1551172699854"></p>
<h3 id="1-4-1-案例：禁止选中文字和禁止右键菜单"><a href="#1-4-1-案例：禁止选中文字和禁止右键菜单" class="headerlink" title="1.4.1 案例：禁止选中文字和禁止右键菜单"></a>1.4.1 案例：禁止选中文字和禁止右键菜单</h3><p><img src="/images3/1551172755484.png" alt="1551172755484"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    我是一段不愿意分享的文字</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. contextmenu 我们可以禁用右键菜单</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 禁止选中文字 selectstart</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-2-鼠标事件对象"><a href="#1-4-2-鼠标事件对象" class="headerlink" title="1.4.2 鼠标事件对象"></a>1.4.2 鼠标事件对象</h3><p><img src="/images3/1551173103741.png" alt="1551173103741"></p>
<h3 id="1-4-3-获取鼠标在页面的坐标"><a href="#1-4-3-获取鼠标在页面的坐标" class="headerlink" title="1.4.3 获取鼠标在页面的坐标"></a>1.4.3 获取鼠标在页面的坐标</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标事件对象 MouseEvent</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientY</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. page 鼠标在页面文档的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageX</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">pageY</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------------------&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenX</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">screenY</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-案例：跟随鼠标的天使"><a href="#1-4-4-案例：跟随鼠标的天使" class="headerlink" title="1.4.4 案例：跟随鼠标的天使"></a>1.4.4 案例：跟随鼠标的天使</h3><p><img src="/images3/1551173172613.png" alt="1551173172613"></p>
<p><img src="/images3/1551173186812.png" alt="1551173186812"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;images3/angel.gif&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. mousemove只要我们鼠标移动1px 就会触发这个事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.每次鼠标移动，我们都会获得最新的鼠标坐标， </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 把这个x和y坐标做为图片的top和left 值就可以移动图片</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> x = e.<span class="property">pageX</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> y = e.<span class="property">pageY</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x坐标是&#x27;</span> + x, <span class="string">&#x27;y坐标是&#x27;</span> + y);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//3 . 千万不要忘记给left 和top 添加px 单位</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        pic.<span class="property">style</span>.<span class="property">left</span> = x - <span class="number">50</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        pic.<span class="property">style</span>.<span class="property">top</span> = y - <span class="number">40</span> + <span class="string">&#x27;px&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web API05</title>
    <url>/2022/03/05/00-00-00/</url>
    <content><![CDATA[<h1 id="day05-Web-APIs"><a href="#day05-Web-APIs" class="headerlink" title="day05 - Web APIs"></a><strong>day05 - Web APIs</strong></h1><blockquote>
<p><strong>学习目标:</strong></p>
<p>能够说出常见 offset 系列属性的作用</p>
<p>能够说出常见 client 系列属性的作用</p>
<p>能够说出常见 scroll 系列属性的作用</p>
<p>能够封装简单动画函数</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-元素偏移量-offset-系列"><a href="#1-1-元素偏移量-offset-系列" class="headerlink" title="**1.1. **元素偏移量 offset 系列"></a>**1.1. **元素偏移量 offset 系列</h2><h3 id="1-1-1-offset-概述"><a href="#1-1-1-offset-概述" class="headerlink" title="1.1.1 offset 概述"></a>1.1.1 offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p>
<ol>
<li><p>获得元素距离带有定位父元素的位置</p>
</li>
<li><p>获得元素自身的大小（宽度高度）</p>
</li>
<li><p>注意：返回的数值都不带单位</p>
<p><img src="/images5%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
</li>
</ol>
<p><img src="/images5%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<h3 id="1-1-2-offset-与-style-区别"><a href="#1-1-2-offset-与-style-区别" class="headerlink" title="1.1.2 offset 与 style 区别"></a>1.1.2 offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul>
<li><p>offset 可以得到任意样式表中的样式值</p>
</li>
<li><p>offset 系列获得的数值是没有单位的</p>
</li>
<li><p>offsetWidth 包含padding+border+width</p>
</li>
<li><p>offsetWidth 等属性是<strong>只读属性</strong>，只能获取不能赋值</p>
</li>
<li><blockquote>
<p>所以，我们想要获取元素大小位置，用offset更合适</p>
</blockquote>
</li>
</ul>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul>
<li><p>style 只能得到行内样式表中的样式值</p>
</li>
<li><p>style.width 获得的是带有单位的字符串</p>
</li>
<li><p>style.width 获得不包含padding和border 的值</p>
</li>
<li><p>style.width 是可读写属性，可以获取也可以赋值</p>
</li>
<li><blockquote>
<p>所以，我们想要给元素更改值，则需要用style改变</p>
</blockquote>
</li>
</ul>
<blockquote>
<p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p>
</blockquote>
<h3 id="1-1-3-案例：获取鼠标在盒子内的坐标"><a href="#1-1-3-案例：获取鼠标在盒子内的坐标" class="headerlink" title="1.1.3  案例：获取鼠标在盒子内的坐标"></a>1.1.3  案例：获取鼠标在盒子内的坐标</h3><ol>
<li>我们在盒子内点击，想要得到鼠标距离盒子左右的距离。</li>
<li>首先得到鼠标在页面中的坐标（e.pageX, e.pageY）</li>
<li>其次得到盒子在页面中的距离 ( box.offsetLeft, box.offsetTop)</li>
<li>用鼠标距离页面的坐标减去盒子在页面中的距离，得到鼠标在盒子内的坐标</li>
<li>如果想要移动一下鼠标，就要获取最新的坐标，使用鼠标移动</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line"><span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;x坐标是&#x27;</span> + x + <span class="string">&#x27; y坐标是&#x27;</span> + y;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-1-4-案例：模态框拖拽"><a href="#1-1-4-案例：模态框拖拽" class="headerlink" title="1.1.4  案例：模态框拖拽"></a>1.1.4  案例：模态框拖拽</h3><p>弹出框，我们也称为模态框。</p>
<p>​	1.点击弹出层，会弹出模态框， 并且显示灰色半透明的遮挡层。</p>
<p>​	2.点击关闭按钮，可以关闭模态框，并且同时关闭灰色半透明遮挡层。</p>
<p>​	3.鼠标放到模态框最上面一行，可以按住鼠标拖拽模态框在页面中移动。</p>
<p>​	4.鼠标松开，可以停止拖动模态框移动</p>
<h3 id="1-1-5-案例分析"><a href="#1-1-5-案例分析" class="headerlink" title="1.1.5. 案例分析:"></a>1.1.5. 案例分析:</h3><ol>
<li>点击弹出层， 模态框和遮挡层就会显示出来 display:block;</li>
<li>点击关闭按钮，模态框和遮挡层就会隐藏起来 display:none;</li>
<li>在页面中拖拽的原理：鼠标按下并且移动， 之后松开鼠标</li>
<li>触发事件是鼠标按下mousedown，鼠标移动mousemove 鼠标松开 mouseup</li>
<li>拖拽过程:  鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</li>
<li>鼠标按下触发的事件源是最上面一行，就是  id 为 title </li>
<li>鼠标的坐标减去 鼠标在盒子内的坐标， 才是模态框真正的位置。</li>
<li>鼠标按下，我们要得到鼠标在盒子的坐标。</li>
<li>鼠标移动，就让模态框的坐标  设置为  ：鼠标坐标 减去盒子坐标即可，注意移动事件写到按下事件里面。</li>
<li>鼠标松开，就停止拖拽，就是可以让鼠标移动事件解除</li>
</ol>
<p>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login-bg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#link&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#closeBtn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#title&#x27;</span>);</span><br><span class="line"><span class="comment">// 2. 点击弹出层这个链接 link  让mask 和login 显示出来</span></span><br><span class="line">link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span><br><span class="line">closeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 4. 开始拖拽</span></span><br><span class="line">    <span class="comment">// (1) 当我们鼠标按下， 就获得鼠标在盒子内的坐标</span></span><br><span class="line">title.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = e.<span class="property">pageX</span> - login.<span class="property">offsetLeft</span>;</span><br><span class="line">    <span class="keyword">var</span> y = e.<span class="property">pageY</span> - login.<span class="property">offsetTop</span>;</span><br><span class="line">    <span class="comment">// (2) 鼠标移动的时候，把鼠标在页面中的坐标，减去 鼠标在盒子内的坐标就是模态框的left和top值</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        login.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - x + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        login.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - y + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-1-6-案例：仿京东放大镜"><a href="#1-1-6-案例：仿京东放大镜" class="headerlink" title="1.1.6  案例：仿京东放大镜"></a>1.1.6  案例：仿京东放大镜</h3><ol>
<li>整个案例可以分为三个功能模块</li>
<li>鼠标经过小图片盒子， 黄色的遮挡层 和 大图片盒子显示，离开隐藏2个盒子功能</li>
<li>黄色的遮挡层跟随鼠标功能。 </li>
<li>移动黄色遮挡层，大图片跟随移动功能。</li>
</ol>
<h3 id="1-1-7-案例分析"><a href="#1-1-7-案例分析" class="headerlink" title="1.1.7. 案例分析:"></a>1.1.7. 案例分析:</h3><ol>
<li>黄色的遮挡层跟随鼠标功能。</li>
<li>把鼠标坐标给遮挡层不合适。因为遮挡层坐标以父盒子为准。</li>
<li>首先是获得鼠标在盒子的坐标。 </li>
<li>之后把数值给遮挡层做为left 和top值。</li>
<li>此时用到鼠标移动事件，但是还是在小图片盒子内移动。</li>
<li>发现，遮挡层位置不对，需要再减去盒子自身高度和宽度的一半。</li>
<li>遮挡层不能超出小图片盒子范围。</li>
<li>如果小于零，就把坐标设置为0</li>
<li>如果大于遮挡层最大的移动距离，就把坐标设置为最大的移动距离</li>
<li>遮挡层的最大移动距离：小图片盒子宽度 减去 遮挡层盒子宽度</li>
</ol>
<p><img src="/images5%5C1551881487(1).png" alt="1551881487(1)"></p>
<p><img src="/images5%5C1551881563(1).jpg" alt="1551881563(1)"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> preview_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.preview_img&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mask&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> big = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big&#x27;</span>);</span><br><span class="line">    <span class="comment">// 1. 当我们鼠标经过 preview_img 就显示和隐藏 mask 遮挡层 和 big 大盒子</span></span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 2. 鼠标移动的时候，让黄色的盒子跟着鼠标来走</span></span><br><span class="line">    preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">// (1). 先计算出鼠标在盒子内的坐标</span></span><br><span class="line">        <span class="keyword">var</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">        <span class="keyword">var</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line">        <span class="comment">// console.log(x, y);</span></span><br><span class="line">        <span class="comment">// (2) 减去盒子高度 300的一半 是 150 就是我们mask 的最终 left 和top值了</span></span><br><span class="line">        <span class="comment">// (3) 我们mask 移动的距离</span></span><br><span class="line">        <span class="keyword">var</span> maskX = x - mask.<span class="property">offsetWidth</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> maskY = y - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// (4) 如果x 坐标小于0 就让他停在0 的位置</span></span><br><span class="line">        <span class="comment">// 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="keyword">var</span> maskMax = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span><br><span class="line">        <span class="keyword">if</span> (maskX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskX = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskX &gt;= maskMax) &#123;</span><br><span class="line">            maskX = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maskY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            maskY = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maskY &gt;= maskMax) &#123;</span><br><span class="line">            maskY = maskMax;</span><br><span class="line">        &#125;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">left</span> = maskX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        mask.<span class="property">style</span>.<span class="property">top</span> = maskY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">// 3. 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span></span><br><span class="line">        <span class="comment">// 大图</span></span><br><span class="line">        <span class="keyword">var</span> bigIMg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.bigImg&#x27;</span>);</span><br><span class="line">        <span class="comment">// 大图片最大移动距离</span></span><br><span class="line">        <span class="keyword">var</span> bigMax = bigIMg.<span class="property">offsetWidth</span> - big.<span class="property">offsetWidth</span>;</span><br><span class="line">        <span class="comment">// 大图片的移动距离 X Y</span></span><br><span class="line">        <span class="keyword">var</span> bigX = maskX * bigMax / maskMax;</span><br><span class="line">        <span class="keyword">var</span> bigY = maskY * bigMax / maskMax;</span><br><span class="line">        bigIMg.<span class="property">style</span>.<span class="property">left</span> = -bigX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        bigIMg.<span class="property">style</span>.<span class="property">top</span> = -bigY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="1-2-元素可视区-client-系列"><a href="#1-2-元素可视区-client-系列" class="headerlink" title="1.2. 元素可视区 client 系列"></a>1.2. 元素可视区 client 系列</h2><h3 id="1-2-1-client概述"><a href="#1-2-1-client概述" class="headerlink" title="1.2.1 client概述"></a>1.2.1 client概述</h3><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。</p>
<p><img src="/images5%5C%E5%9B%BE%E7%89%873.png" alt="图片3"></p>
<p><img src="/images5%5C%E5%9B%BE%E7%89%874.png" alt="图片4"></p>
<h3 id="1-2-2-淘宝-flexible-js-源码分析"><a href="#1-2-2-淘宝-flexible-js-源码分析" class="headerlink" title="1.2.2. 淘宝 flexible.js 源码分析"></a>1.2.2. 淘宝 flexible.js 源码分析</h3><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>普通函数需要调用才能执行</p>
<p>立即执行函数 (function(){})()  或者 (function(){}())</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// 1、(function [函数名，可选]()&#123;&#125;)() 右边小括号为调用</span></span><br><span class="line">   <span class="comment">// 传参，a b为形参；1 2为实参</span></span><br><span class="line">   (<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">   &#125;)(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">   <span class="comment">// 类似于</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2、(function [函数名]()&#123;&#125;())</span></span><br><span class="line">   (<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span><br><span class="line">   &#125;(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>主要作用： 创建一个独立的作用域，其中的变量都是局部变量。 避免了命名冲突问题</strong></p>
<h4 id="pageshow与load"><a href="#pageshow与load" class="headerlink" title="pageshow与load"></a>pageshow与load</h4><p>下面三种情况都会刷新页面都会触发 load 事件。</p>
<p>1.a标签的超链接</p>
<p>2.F5或者刷新按钮（强制刷新）</p>
<p>3.前进后退按钮</p>
<p>但是 火狐中，有个特点，有个“往返缓存”，这个缓存中不仅保存着页面数据，还保存了DOM和JavaScript的状态；实际上是将整个页面都保存在了内存里。</p>
<p>所以此时后退按钮不能刷新页面。</p>
<p>此时可以使用 pageshow事件来触发。，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件</p>
<p><code>注意这个事件给window添加。</code></p>
<h2 id="1-3-元素滚动-scroll-系列"><a href="#1-3-元素滚动-scroll-系列" class="headerlink" title="1.3.元素滚动 scroll 系列"></a>1.3.元素滚动 scroll 系列</h2><h3 id="1-3-1-scroll-概述"><a href="#1-3-1-scroll-概述" class="headerlink" title="1.3.1. scroll 概述"></a>1.3.1. scroll 概述</h3><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p>
<p><img src="/images5%5C%E5%9B%BE%E7%89%875.png" alt="图片5"></p>
<p><img src="/images5%5C%E5%9B%BE%E7%89%876.png" alt="图片6"></p>
<h3 id="1-3-2-页面被卷去的头部"><a href="#1-3-2-页面被卷去的头部" class="headerlink" title="1.3.2. 页面被卷去的头部"></a>1.3.2. 页面被卷去的头部</h3><p>如果浏览器的高（或宽）度不足以显示整个页面时，会自动出现滚动条。当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发 onscroll事件。</p>
<h3 id="1-3-3-案例：仿淘宝固定右侧侧边栏"><a href="#1-3-3-案例：仿淘宝固定右侧侧边栏" class="headerlink" title="1.3.3.案例：仿淘宝固定右侧侧边栏"></a>1.3.3.案例：仿淘宝固定右侧侧边栏</h3><ol>
<li>原先侧边栏是绝对定位</li>
<li>当页面滚动到一定位置，侧边栏改为固定定位</li>
<li>页面继续滚动，会让 返回顶部显示出来</li>
</ol>
<h3 id="1-3-4-案例分析"><a href="#1-3-4-案例分析" class="headerlink" title="1.3.4.案例分析:"></a>1.3.4.案例分析:</h3><ol>
<li>需要用到页面滚动事件 scroll  因为是页面滚动，所以事件源是document</li>
<li>滚动到某个位置，就是判断页面被卷去的上部值。</li>
<li>页面被卷去的头部：可以通过window.pageYOffset 获得  如果是被卷去的左侧window.pageXOffset</li>
<li>注意，<strong>元素被卷去的头部是element.scrollTop  , 如果是页面被卷去的头部 则是 window.pageYOffset</strong></li>
<li>其实这个值 可以通过盒子的 offsetTop可以得到，如果大于等于这个值，就可以让盒子固定定位了</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素</span></span><br><span class="line">      <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>);</span><br><span class="line">      <span class="comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line">      <span class="keyword">var</span> bannerTop = banner.<span class="property">offsetTop</span></span><br><span class="line">          <span class="comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line">      <span class="keyword">var</span> sliderbarTop = sliderbar.<span class="property">offsetTop</span> - bannerTop;</span><br><span class="line">      <span class="comment">// 获取main 主体元素</span></span><br><span class="line">      <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> mainTop = main.<span class="property">offsetTop</span>;</span><br><span class="line">      <span class="comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// console.log(11);</span></span><br><span class="line">          <span class="comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">          <span class="comment">// console.log(window.pageYOffset);</span></span><br><span class="line">          <span class="comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= bannerTop) &#123;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">top</span> = sliderbarTop + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">              sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= mainTop) &#123;</span><br><span class="line">              goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-5-页面被卷去的头部兼容性解决方案"><a href="#1-3-5-页面被卷去的头部兼容性解决方案" class="headerlink" title="1.3.5.页面被卷去的头部兼容性解决方案"></a>1.3.5.页面被卷去的头部兼容性解决方案</h3><p>需要注意的是，页面被卷去的头部，有兼容性问题，因此被卷去的头部通常有如下几种写法：</p>
<ol>
<li>声明了 DTD，使用 document.documentElement.scrollTop</li>
<li>未声明 DTD，使用  document.body.scrollTop</li>
<li>新方法 window.pageYOffset和 window.pageXOffset，IE9 开始支持</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getScroll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">left</span>: <span class="variable language_">window</span>.<span class="property">pageXOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>||<span class="number">0</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line"> &#125; </span><br><span class="line">使用的时候  <span class="title function_">getScroll</span>().<span class="property">left</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="1-4-三大系列总结"><a href="#1-4-三大系列总结" class="headerlink" title="1.4. 三大系列总结"></a>1.4. 三大系列总结</h2><p><img src="/images5%5C%E5%9B%BE%E7%89%877.png" alt="图片7"></p>
<p>他们主要用法：</p>
<p>1.offset 系列 经常用于获得元素位置    offsetLeft  offsetTop</p>
<p>2.client 经常用于获取元素大小  clientWidth clientHeight</p>
<p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p>
<p><strong>4.注意页面滚动的距离通过 window.pageXOffset&#x2F;pageYOffset 获得</strong></p>
<h2 id="1-5-mouseenter-和mouseover的区别"><a href="#1-5-mouseenter-和mouseover的区别" class="headerlink" title="1.5. mouseenter 和mouseover的区别"></a>1.5. mouseenter 和mouseover的区别</h2><ul>
<li>当鼠标移动到元素上时就会触发</li>
<li><strong>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</strong></li>
<li>之所以这样，是因为mouseenter不会冒泡</li>
<li>跟mouseenter搭配鼠标离开 mouseleave，同样不会冒泡</li>
</ul>
<h2 id="1-6-动画"><a href="#1-6-动画" class="headerlink" title="1.6. 动画"></a>1.6. 动画</h2><h3 id="1-6-1-动画实现原理"><a href="#1-6-1-动画实现原理" class="headerlink" title="1.6.1. 动画实现原理"></a>1.6.1. 动画实现原理</h3><blockquote>
<p>核心原理：通过定时器 setInterval() 不断移动盒子位置。</p>
</blockquote>
<p>实现步骤：</p>
<ol>
<li>获得盒子当前位置</li>
<li>让盒子在当前位置加上1个移动距离</li>
<li>利用定时器不断重复这个操作</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位，才能使用element.style.left</li>
</ol>
<h3 id="1-6-2-动画封装"><a href="#1-6-2-动画封装" class="headerlink" title="1.6.2. 动画封装"></a>1.6.2. 动画封装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target</span>) &#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> &gt;= target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果多个元素都使用这个动画函数，每次都要var 声明定时器。</p>
<ul>
<li><p>我们可以给不同的元素使用不同的定时器（自己专门用自己的定时器）。</p>
</li>
<li><p>核心原理：利用 JS 是一门动态语言，可以很方便的<strong>给当前对象添加属性</strong>。</p>
</li>
<li><pre><code class="js">// var obj = &#123;&#125;;
// obj.name = &#39;andy&#39;;
function animate(obj, target) &#123;
    clearInterval(obj.timer);
    obj.timer = setInterval(function() &#123;
        if (obj.offsetLeft &gt;= target) &#123;
            // 停止动画 本质是停止定时器
            clearInterval(obj.timer);
        &#125;
        obj.style.left = obj.offsetLeft + 1 + &#39;px&#39;;
    &#125;, 30);
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- 当同一个元素多次触发同一个动画函数时，就会产生很多个计时器，时间紊乱</span><br><span class="line"></span><br><span class="line">  - 解决：先清除以前的定时器，只保留当前的一个定时器执行</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function animate(obj, target) &#123;</span><br><span class="line">        // 同一个元素多次触发这个动画，元素的速度会越来越快，因为开启了太多的定时器</span><br><span class="line">        // 解决方案就是 让我们元素只有一个定时器执行</span><br><span class="line">        // 先清除以前的定时器，只保留当前的一个定时器执行</span><br><span class="line">        clearInterval(obj.timer);</span><br><span class="line">        obj.timer = setInterval(function() &#123;</span><br><span class="line">            if (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">                // 停止动画 本质是停止定时器</span><br><span class="line">                clearInterval(obj.timer);</span><br><span class="line">            &#125;</span><br><span class="line">            obj.style.left = obj.offsetLeft + 1 + &#x27;px&#x27;;</span><br><span class="line">        &#125;, 30);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web API06</title>
    <url>/2022/03/06/00-00-00/</url>
    <content><![CDATA[<h1 id="day06-Web-APIs"><a href="#day06-Web-APIs" class="headerlink" title="day06 - Web APIs"></a><strong>day06 - Web APIs</strong></h1><blockquote>
<p><strong>学习目标:</strong></p>
<p>能够封装简单动画函数</p>
<p>能够理解缓动动画的封装</p>
<p>能够使用动画函数</p>
<p>能够写出网页轮播图案例</p>
<p>能够写出移动端触屏事件</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-动画函数封装"><a href="#1-1-动画函数封装" class="headerlink" title="**1.1. **动画函数封装"></a>**1.1. **动画函数封装</h2><h3 id="1-1-1-缓动效果原理"><a href="#1-1-1-缓动效果原理" class="headerlink" title="1.1.1 缓动效果原理"></a>1.1.1 缓动效果原理</h3><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p>
<p>思路：</p>
<ol>
<li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来。</li>
<li>核心算法： (目标值 - 现在的位置)   &#x2F;  10    做为每次移动的距离步长</li>
<li>停止的条件是： 让当前盒子位置等于目标位置就停止定时器  </li>
<li>注意步长值需要取整</li>
</ol>
<p>  </p>
<h3 id="1-1-2-动画函数多个目标值之间移动"><a href="#1-1-2-动画函数多个目标值之间移动" class="headerlink" title="1.1.2 动画函数多个目标值之间移动"></a>1.1.2 动画函数多个目标值之间移动</h3><p>可以让动画函数从 800 移动到 500。</p>
<p>当我们点击按钮时候，判断步长是正值还是负值</p>
<p>​	1.如果是正值，则步长往大了取整</p>
<p>​	2.如果是负值，则步长 向小了取整</p>
<h3 id="1-1-3-动函数添加回调函数"><a href="#1-1-3-动函数添加回调函数" class="headerlink" title="1.1.3  动函数添加回调函数"></a>1.1.3  动函数添加回调函数</h3><p>回调函数原理：函数可以作为一个参数。将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。</p>
<p>回调函数写的位置：定时器结束的位置。</p>
<h3 id="1-1-4-完整代码"><a href="#1-1-4-完整代码" class="headerlink" title="1.1.4  完整代码:"></a>1.1.4  完整代码:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj, target, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(callback);  callback = function() &#123;&#125;  调用的时候 callback()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    obj.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 步长值写到定时器的里面</span></span><br><span class="line">        <span class="comment">// 把我们步长值改为整数 不要出现小数的问题</span></span><br><span class="line">        <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line">        <span class="keyword">var</span> step = (target - obj.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="property">offsetLeft</span> == target) &#123;</span><br><span class="line">            <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">            <span class="comment">// 回调函数写到定时器结束里面</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     // 调用函数</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把每次加1 这个步长值改为一个慢慢变小的值  步长公式：(目标值 - 现在的位置) / 10</span></span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span> = obj.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-常见网页特效案例"><a href="#1-2-常见网页特效案例" class="headerlink" title="1.2. 常见网页特效案例"></a>1.2. 常见网页特效案例</h2><h3 id="1-2-1-案例：网页轮播图"><a href="#1-2-1-案例：网页轮播图" class="headerlink" title="1.2.1 案例：网页轮播图"></a>1.2.1 案例：网页轮播图</h3><p>轮播图也称为焦点图，是网页中比较常见的网页特效。</p>
<p>功能需求：</p>
<p>​	1.鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</p>
<p>​	2.点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</p>
<p>​	3.图片播放的同时，下面小圆圈模块跟随一起变化。</p>
<p>​	4.点击小圆圈，可以播放相应图片。</p>
<p>​	5.鼠标不经过轮播图，轮播图也会自动播放图片。</p>
<p>​	6.鼠标经过轮播图模块， 自动播放停止。</p>
<ul>
<li>图片无缝滚动原理<ul>
<li>用克隆节点操作 复制第一张图片放到图片列表末尾</li>
<li>播放到最后一张(也是复制的第一张)时，若仍需往下播放，则将索引号直接改为0，即直接跳到第一张(视觉上无法察觉)，再往下播放</li>
</ul>
</li>
<li>调用点击事件<ul>
<li>element.click()</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 获取元素</span></span><br><span class="line">    <span class="keyword">var</span> arrow_l = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow-l&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> arrow_r = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.arrow-r&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> focus = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.focus&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> focusWidth = focus.<span class="property">offsetWidth</span>;</span><br><span class="line">    <span class="comment">// 2. 鼠标经过focus 就显示隐藏左右按钮</span></span><br><span class="line">    focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>; <span class="comment">// 清除定时器变量</span></span><br><span class="line">    &#125;);</span><br><span class="line">    focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//手动调用点击事件</span></span><br><span class="line">            arrow_r.<span class="title function_">click</span>();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 3. 动态生成小圆圈  有几张图片，我就生成几个小圆圈</span></span><br><span class="line">    <span class="keyword">var</span> ul = focus.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> ol = focus.<span class="title function_">querySelector</span>(<span class="string">&#x27;.circle&#x27;</span>);</span><br><span class="line">    <span class="comment">// console.log(ul.children.length);</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建一个小li </span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="comment">// 记录当前小圆圈的索引号 通过自定义属性来做 </span></span><br><span class="line">        li.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span><br><span class="line">        <span class="comment">// 把小li插入到ol 里面</span></span><br><span class="line">        ol.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        <span class="comment">// 4. 小圆圈的排他思想 我们可以直接在生成小圆圈的同时直接绑定点击事件</span></span><br><span class="line">        li.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 干掉所有人 把所有的小li 清除 current 类名</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 留下我自己  当前的小li 设置current 类名</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">            <span class="comment">// 5. 点击小圆圈，移动图片 当然移动的是 ul </span></span><br><span class="line">            <span class="comment">// ul 的移动距离 小圆圈的索引号 乘以 图片的宽度 注意是负值</span></span><br><span class="line">            <span class="comment">// 当我们点击了某个小li 就拿到当前小li 的索引号</span></span><br><span class="line">            <span class="keyword">var</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">            <span class="comment">// 当我们点击了某个小li 就要把这个li 的索引号给 num  </span></span><br><span class="line">            num = index;</span><br><span class="line">            <span class="comment">// 当我们点击了某个小li 就要把这个li 的索引号给 circle  </span></span><br><span class="line">            circle = index;</span><br><span class="line">            <span class="comment">// num = circle = index;</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(focusWidth);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"></span><br><span class="line">            <span class="title function_">animate</span>(ul, -index * focusWidth);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把ol里面的第一个小li设置类名为 current</span></span><br><span class="line">    ol.<span class="property">children</span>[<span class="number">0</span>].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">    <span class="comment">// 6. 克隆第一张图片(li)放到ul 最后面</span></span><br><span class="line">    <span class="keyword">var</span> first = ul.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(first);</span><br><span class="line">    <span class="comment">// 7. 点击右侧按钮， 图片滚动一张</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// circle 控制小圆圈的播放</span></span><br><span class="line">    <span class="keyword">var</span> circle = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// flag 节流阀</span></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    arrow_r.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>; <span class="comment">// 关闭节流阀</span></span><br><span class="line">            <span class="comment">// 如果走到了最后复制的一张图片，此时 我们的ul 要快速复原 left 改为 0</span></span><br><span class="line">            <span class="keyword">if</span> (num == ul.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                ul.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="title function_">animate</span>(ul, -num * focusWidth, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>; <span class="comment">// 打开节流阀</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 8. 点击右侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span></span><br><span class="line">            circle++;</span><br><span class="line">            <span class="comment">// 如果circle == 4 说明走到最后我们克隆的这张图片了 我们就复原</span></span><br><span class="line">            <span class="keyword">if</span> (circle == ol.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                circle = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用函数</span></span><br><span class="line">            <span class="title function_">circleChange</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 左侧按钮做法</span></span><br><span class="line">    arrow_l.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                num = ul.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">                ul.<span class="property">style</span>.<span class="property">left</span> = -num * focusWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            num--;</span><br><span class="line">            <span class="title function_">animate</span>(ul, -num * focusWidth, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 点击左侧按钮，小圆圈跟随一起变化 可以再声明一个变量控制小圆圈的播放</span></span><br><span class="line">            circle--;</span><br><span class="line">            <span class="comment">// 如果circle &lt; 0  说明第一张图片，则小圆圈要改为第4个小圆圈（3）</span></span><br><span class="line">            <span class="comment">// if (circle &lt; 0) &#123;</span></span><br><span class="line">            <span class="comment">//     circle = ol.children.length - 1;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            circle = circle &lt; <span class="number">0</span> ? ol.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span> : circle;</span><br><span class="line">            <span class="comment">// 调用函数</span></span><br><span class="line">            <span class="title function_">circleChange</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">circleChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 先清除其余小圆圈的current类名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            ol.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 留下当前的小圆圈的current类名</span></span><br><span class="line">        ol.<span class="property">children</span>[circle].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10. 自动播放轮播图</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//////////////手动调用点击事件</span></span><br><span class="line">        arrow_r.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="1-2-2-节流阀"><a href="#1-2-2-节流阀" class="headerlink" title="1.2.2. 节流阀"></a>1.2.2. 节流阀</h3><p>防止轮播图按钮连续点击造成播放过快。</p>
<p>节流阀目的：<strong>当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</strong></p>
<p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数。</p>
<p> 开始设置一个变量var flag&#x3D; true;</p>
<p>If(flag){flag &#x3D; false; do something}       关闭水龙头</p>
<p>利用回调函数动画执行完毕， flag &#x3D; true     打开水龙头</p>
<h3 id="1-2-3-案例：返回顶部"><a href="#1-2-3-案例：返回顶部" class="headerlink" title="1.2.3. 案例：返回顶部"></a>1.2.3. 案例：返回顶部</h3><ol>
<li>带有动画的返回顶部</li>
<li>此时可以继续使用我们封装的动画函数</li>
<li>只需要把所有的left 相关的值改为 跟 页面垂直滚动距离相关就可以了</li>
<li>页面滚动了多少，可以通过 window.pageYOffset 得到</li>
<li>最后是页面滚动，使用 window.scroll(x,y)</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>);</span><br><span class="line"><span class="comment">// banner.offestTop 就是被卷去头部的大小 一定要写到滚动的外面</span></span><br><span class="line"><span class="keyword">var</span> bannerTop = banner.<span class="property">offsetTop</span></span><br><span class="line">    <span class="comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line"><span class="keyword">var</span> sliderbarTop = sliderbar.<span class="property">offsetTop</span> - bannerTop;</span><br><span class="line"><span class="comment">// 获取main 主体元素</span></span><br><span class="line"><span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mainTop = main.<span class="property">offsetTop</span>;</span><br><span class="line"><span class="comment">// 2. 页面滚动事件 scroll</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(11);</span></span><br><span class="line">        <span class="comment">// window.pageYOffset 页面被卷去的头部</span></span><br><span class="line">        <span class="comment">// console.log(window.pageYOffset);</span></span><br><span class="line">        <span class="comment">// 3 .当我们页面被卷去的头部大于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= bannerTop) &#123;</span><br><span class="line">            sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span><br><span class="line">            sliderbar.<span class="property">style</span>.<span class="property">top</span> = sliderbarTop + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">            sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. 当我们页面滚动到main盒子，就显示 goback模块</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= mainTop) &#123;</span><br><span class="line">            goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 3. 当我们点击了返回顶部模块，就让窗口滚动的页面的最上方</span></span><br><span class="line">goBack.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 里面的x和y 不跟单位的 直接写数字即可</span></span><br><span class="line">    <span class="comment">// window.scroll(0, 0);</span></span><br><span class="line">    <span class="comment">// 因为是窗口滚动 所以对象是window</span></span><br><span class="line">    <span class="title function_">animate</span>(<span class="variable language_">window</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="1-3-触屏事件"><a href="#1-3-触屏事件" class="headerlink" title="1.3. 触屏事件"></a>1.3. 触屏事件</h2><h3 id="1-3-1-触屏事件概述"><a href="#1-3-1-触屏事件概述" class="headerlink" title="1.3.1. 触屏事件概述"></a>1.3.1. 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android和 IOS 都有。</p>
<p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指对屏幕或者触控板操作。</p>
<p>常见的触屏事件如下：</p>
<p><img src="/images6%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
<h3 id="1-3-2-触摸事件对象（TouchEvent）"><a href="#1-3-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.3.2. 触摸事件对象（TouchEvent）"></a>1.3.2. 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p>
<p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p>
<p>触摸事件对象重点我们看三个常见对象列表：</p>
<p><img src="/images6%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<blockquote>
<p><code>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</code></p>
</blockquote>
<h3 id="1-3-3-案例：移动端拖动元素"><a href="#1-3-3-案例：移动端拖动元素" class="headerlink" title="1.3.3.案例：移动端拖动元素"></a>1.3.3.案例：移动端拖动元素</h3><ol>
<li><p>touchstart、touchmove、touchend可以实现拖动元素</p>
</li>
<li><p>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </p>
</li>
<li><p>移动端拖动的原理：    手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</p>
</li>
<li><p>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</p>
<p>拖动元素三步曲：</p>
<p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p>
<p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p>
<p>（3） 离开手指 touchend:</p>
<p><code>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/07/20-54-53/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>web API07</title>
    <url>/2022/03/07/00-00-00/</url>
    <content><![CDATA[<h1 id="day07-Web-APIs"><a href="#day07-Web-APIs" class="headerlink" title="day07 - Web APIs"></a><strong>day07 - Web APIs</strong></h1><blockquote>
<p><strong>学习目标:</strong></p>
<p>能够写出移动端触屏事件<br>能够写出常见的移动端特效<br>能够使用移动端开发插件开发移动端特效<br>能够使用移动端开发框架开发移动端特效<br>能够写出 sessionStorage 数据的存储以及获取<br>能够写出 localStorage 数据的存储以及获取<br>能够说出它们两者的区别</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-触屏事件"><a href="#1-1-触屏事件" class="headerlink" title="1.1. 触屏事件"></a><strong>1.1. 触屏事件</strong></h2><h3 id="1-1-1-触屏事件概述"><a href="#1-1-1-触屏事件概述" class="headerlink" title="1.1.1 触屏事件概述"></a>1.1.1 触屏事件概述</h3><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如触屏事件 touch（也称触摸事件），Android 和 IOS 都有。touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可响应用户手指（或触控笔）对屏幕或者触控板操作。</p>
<p>常见的触屏事件如下：</p>
<p><img src="/images7%5C%E5%9B%BE%E7%89%871.png" alt="图片1"></p>
<h3 id="1-1-2-触摸事件对象（TouchEvent）"><a href="#1-1-2-触摸事件对象（TouchEvent）" class="headerlink" title="1.1.2 触摸事件对象（TouchEvent）"></a>1.1.2 触摸事件对象（TouchEvent）</h3><p>TouchEvent 是一类描述手指在触摸平面（触摸屏、触摸板等）的状态变化的事件。这类事件用于描述一个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等</p>
<p>touchstart、touchmove、touchend 三个事件都会各自有事件对象。</p>
<p>触摸事件对象重点我们看三个常见对象列表：</p>
<p><img src="/images7%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<blockquote>
<p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p>
</blockquote>
<h3 id="1-1-3-移动端拖动元素"><a href="#1-1-3-移动端拖动元素" class="headerlink" title="1.1.3  移动端拖动元素"></a>1.1.3  移动端拖动元素</h3><ol>
<li>touchstart、touchmove、touchend 可以实现拖动元素</li>
<li>但是拖动元素需要当前手指的坐标值 我们可以使用  targetTouches[0] 里面的pageX 和 pageY </li>
<li>移动端拖动的原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离</li>
<li>手指移动的距离：  手指滑动中的位置 减去  手指刚开始触摸的位置</li>
</ol>
<p>拖动元素三步曲：</p>
<p>（1） 触摸元素 touchstart： 获取手指初始坐标，同时获得盒子原来的位置</p>
<p>（2） 移动手指 touchmove： 计算手指的滑动距离，并且移动盒子</p>
<p>（3） 离开手指 touchend:   没有用到，与PC端不同，当手指抬起，就不再触摸了，move事件也就结束了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> startX = <span class="number">0</span>; <span class="comment">//获取手指初始坐标</span></span><br><span class="line"><span class="keyword">var</span> startY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//获得盒子原来的位置</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">//  获取手指初始坐标</span></span><br><span class="line">    startX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span><br><span class="line">    startY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span><br><span class="line">    x = <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">    y = <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 也可写到touchstart里面</span></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">//  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标</span></span><br><span class="line">    <span class="keyword">var</span> moveX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span> - startX;</span><br><span class="line">    <span class="keyword">var</span> moveY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span> - startY;</span><br><span class="line">    <span class="comment">// 移动我们的盒子 盒子原来的位置 + 手指移动的距离</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span> = x + moveX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span> = y + moveY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止屏幕滚动的默认行为</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意： 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</strong></p>
</blockquote>
<h2 id="1-2-移动端常见特效"><a href="#1-2-移动端常见特效" class="headerlink" title="1.2. 移动端常见特效"></a>1.2. 移动端常见特效</h2><h3 id="1-2-1-案例-移动轮播图"><a href="#1-2-1-案例-移动轮播图" class="headerlink" title="1.2.1 案例: 移动轮播图"></a>1.2.1 案例: 移动轮播图</h3><p><code>移动端轮播图功能和基本PC端一致。</code></p>
<ol>
<li>可以自动播放图片</li>
<li>手指可以拖动播放轮播图</li>
</ol>
<h3 id="1-2-2-案例分析"><a href="#1-2-2-案例分析" class="headerlink" title="1.2.2. 案例分析:"></a>1.2.2. 案例分析:</h3><ol>
<li><p>自动播放功能</p>
</li>
<li><p>开启定时器</p>
</li>
<li><p>移动端移动，可以使用translate 移动</p>
</li>
<li><p>想要图片优雅的移动，请添加过渡效果<br><img src="/images7%5C1551795152(1).jpg" alt="1551795152(1)"></p>
</li>
<li><p>自动播放功能-无缝滚动</p>
</li>
<li><p>注意，我们判断条件是要等到图片滚动完毕再去判断，就是过渡完成后判断</p>
</li>
<li><p>此时需要添加检测过渡完成事件  transitionend </p>
</li>
<li><p>判断条件：如果索引号等于 3 说明走到最后一张图片，此时 索引号要复原为 0</p>
</li>
<li><p>此时图片，去掉过渡效果，然后移动</p>
</li>
<li><p>如果索引号小于0， 说明是倒着走， 索引号等于2 </p>
</li>
<li><p>此时图片，去掉过渡效果，然后移动</p>
<p><img src="/images7%5C1551795483(1).jpg" alt="1551795483(1)"></p>
</li>
</ol>
<h2 id="1-2-3-classList-属性"><a href="#1-2-3-classList-属性" class="headerlink" title="1.2.3 classList 属性"></a>1.2.3 classList 属性</h2><p>classList属性是HTML5新增的一个属性，返回元素的类名。但是ie10以上版本支持。</p>
<p>该属性用于在元素中添加，移除及切换 CSS 类。有以下方法</p>
<p><strong>返回类名</strong>：</p>
<p>element.classList;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">focus.<span class="property">classList</span>;</span><br><span class="line">focus.<span class="property">classList</span>[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<p><strong>添加类：</strong></p>
<p>element.classList.add（’类名’）；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>移除类：</strong></p>
<p>element.classList.remove（’类名’）;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;current&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>切换类：</strong>(双重效果，有就去掉，没有就加上)</p>
<p>element.classList.toggle（’类名’）;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">focus.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line"><span class="comment">// 如果本身有这个类，就去掉；若没有，就加上</span></span><br></pre></td></tr></table></figure>

<p><code>注意:以上方法里面，所有类名都不带点</code></p>
<h3 id="1-2-4-案例分析"><a href="#1-2-4-案例分析" class="headerlink" title="1.2.4. 案例分析"></a>1.2.4. 案例分析</h3><ol>
<li><p>小圆点跟随变化效果</p>
</li>
<li><p>把ol里面li带有current类名的选出来去掉类名 remove</p>
</li>
<li><p>让当前索引号的小li 加上 current   add</p>
</li>
<li><p>但是，是等着过渡结束之后变化，所以这个写到 transitionend 事件里面</p>
<p><img src="/images7%5C1551796072(1).jpg" alt="1551796072(1)"></p>
</li>
<li><p>手指滑动轮播图</p>
</li>
<li><p>本质就是ul跟随手指移动，简单说就是移动端拖动元素</p>
</li>
<li><p>触摸元素touchstart：  获取手指初始坐标</p>
</li>
<li><p>移动手指touchmove：  计算手指的滑动距离，并且移动盒子</p>
</li>
<li><p>离开手指touchend:   根据滑动的距离分不同的情况</p>
</li>
<li><p><strong>如果移动距离小于某个像素 就回弹原来位置</strong></p>
</li>
<li><p><strong>如果移动距离大于某个像素 就滑动。</strong></p>
</li>
<li><p>滑动也分为左滑动和右滑动判断的标准是 移动距离正负 如果是负值就是左滑 反之右滑 </p>
</li>
<li><p>如果是左滑就播放下一张  (index++)</p>
</li>
<li><p>如果是右滑就播放上一张  (index–)</p>
</li>
</ol>
<p><img src="/images7%5C1551796363(1).jpg" alt="1551796363(1)"></p>
<p><img src="/images7%5C1551796502(1).jpg" alt="1551796502(1)"></p>
<h3 id="1-3-1-案例：返回顶部"><a href="#1-3-1-案例：返回顶部" class="headerlink" title="1.3.1. 案例：返回顶部"></a>1.3.1. 案例：返回顶部</h3><p>当页面滚动某个地方，就显示，否则隐藏</p>
<p>点击可以返回顶部</p>
<h3 id="1-3-2-案例分析"><a href="#1-3-2-案例分析" class="headerlink" title="1.3.2.案例分析"></a>1.3.2.案例分析</h3><ol>
<li>滚动某个地方显示</li>
<li>事件：scroll页面滚动事件  </li>
<li>如果被卷去的头部（window.pageYOffset ）大于某个数值</li>
<li>点击，window.scroll(0,0) 返回顶部</li>
</ol>
<p><img src="/images7%5C1551797003(1).jpg" alt="1551797003(1)"></p>
<h2 id="1-4-click事件延时问题"><a href="#1-4-click事件延时问题" class="headerlink" title="1.4. click事件延时问题"></a>1.4. click事件延时问题</h2><p>移动端 click 事件会有 300ms 的延时，原因是移动端屏幕双击会缩放(double tap to zoom) 页面。点击一次后，会等待300ms，若没有再次点击，则为单击事件，以此来区别单双击事件</p>
<p>解决方案：</p>
<p>​	1. 禁用缩放。 浏览器禁用默认的双击缩放行为并且去掉300ms 的点击延迟。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​	2.利用touch事件自己封装这个事件解决300ms 延迟。 </p>
<p>​	原理就是：</p>
<ol>
<li>当我们手指触摸屏幕，记录当前触摸时间</li>
<li>当我们手指离开屏幕， 用离开的时间减去触摸的时间</li>
<li>如果时间小于150ms，并且没有滑动过屏幕， 那么我们就定义为点击</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装tap，解决click 300ms 延时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tap</span> (obj, callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="number">0</span>; <span class="comment">// 记录触摸时候的时间变量</span></span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 记录触摸时间</span></span><br><span class="line">    &#125;);</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        isMove = <span class="literal">true</span>;  <span class="comment">// 看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">    &#125;);</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isMove &amp;&amp; (<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime) &lt; <span class="number">150</span>) &#123;  <span class="comment">// 如果手指触摸和离开时间小于150ms 算点击</span></span><br><span class="line">            callback &amp;&amp; <span class="title function_">callback</span>(); <span class="comment">// 执行回调函数</span></span><br><span class="line">            <span class="comment">// 如果有callback传进来，就执行，简便写法</span></span><br><span class="line">        &#125;</span><br><span class="line">        isMove = <span class="literal">false</span>;  <span class="comment">//  取反 重置</span></span><br><span class="line">        startTime = <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用  </span></span><br><span class="line">  <span class="title function_">tap</span>(div, <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">// 执行代码  &#125;);</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>使用插件。fastclick 插件解决300ms 延迟。 </p>
<p><img src="/images7%5C1551797533(1).jpg" alt="1551797533(1)"></p>
</li>
</ol>
<h2 id="1-5-移动端常用开发插件"><a href="#1-5-移动端常用开发插件" class="headerlink" title="1.5. 移动端常用开发插件"></a>1.5. 移动端常用开发插件</h2><h3 id="1-5-1-什么是插件"><a href="#1-5-1-什么是插件" class="headerlink" title="1.5.1. 什么是插件"></a>1.5.1. 什么是插件</h3><p>移动端要求的是快速开发，所以我们经常会借助于一些插件来帮我完成操作，那么什么是插件呢？</p>
<p>JS 插件是 js 文件，它遵循一定规范编写，方便程序展示效果，拥有特定功能且方便调用。如轮播图和瀑布流插件。</p>
<p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p>
<p>我们以前写的animate.js 也算一个最简单的插件</p>
<p>fastclick 插件解决 300ms 延迟。 使用延时</p>
<p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https:&#x2F;&#x2F;</a><a href="https://github.com/ftlabs/fastclick">github.com&#x2F;ftlabs&#x2F;fastclick</a></p>
<h3 id="1-5-2-插件的使用"><a href="#1-5-2-插件的使用" class="headerlink" title="1.5.2. 插件的使用"></a>1.5.2. 插件的使用</h3><ol>
<li><p>引入 js 插件文件。</p>
</li>
<li><p>按照规定语法使用。</p>
</li>
<li><p>fastclick 插件解决 300ms 延迟。 使用延时</p>
</li>
<li><p>GitHub官网地址： <a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;addEventListener&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-5-3-Swiper-插件的使用"><a href="#1-5-3-Swiper-插件的使用" class="headerlink" title="1.5.3. Swiper 插件的使用"></a>1.5.3. Swiper 插件的使用</h3><p>中文官网地址： <a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a> </p>
<ol>
<li>引入插件相关文件。</li>
<li>按照规定语法使用</li>
</ol>
<h3 id="1-5-4-其他移动端常见插件"><a href="#1-5-4-其他移动端常见插件" class="headerlink" title="1.5.4. 其他移动端常见插件"></a>1.5.4. 其他移动端常见插件</h3><p>superslide： <a href="http://www.superslide2.com/">http://www.superslide2.com/</a></p>
<p>iscroll： <a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></p>
<h3 id="1-5-5-插件的使用总结"><a href="#1-5-5-插件的使用总结" class="headerlink" title="1.5.5. 插件的使用总结"></a>1.5.5. 插件的使用总结</h3><p>1.确认插件实现的功能</p>
<p>2.去官网查看使用说明</p>
<p>3.下载插件</p>
<p>4.打开demo实例文件，查看需要引入的相关文件，并且引入</p>
<p>5.复制demo实例文件中的结构html，样式css以及js代码</p>
<h3 id="1-5-6-移动端视频插件-zy-media-js"><a href="#1-5-6-移动端视频插件-zy-media-js" class="headerlink" title="1.5.6. 移动端视频插件 zy.media.js"></a>1.5.6. 移动端视频插件 zy.media.js</h3><p>H5 给我们提供了 video 标签，但是浏览器的支持情况不同。</p>
<p>不同的视频格式文件，我们可以通过source解决。</p>
<p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决。</p>
<p>这个时候我们可以使用插件方式来制作。</p>
<p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<h2 id="1-6-移动端常用开发框架"><a href="#1-6-移动端常用开发框架" class="headerlink" title="1.6. 移动端常用开发框架"></a>1.6. 移动端常用开发框架</h2><h3 id="1-6-1-移动端视频插件-zy-media-js"><a href="#1-6-1-移动端视频插件-zy-media-js" class="headerlink" title="1.6.1. 移动端视频插件 zy.media.js"></a>1.6.1. 移动端视频插件 zy.media.js</h3><p>框架，顾名思义就是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p>
<p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小。</p>
<p><strong>前端常用的框架有 Bootstrap、Vue、Angular、React 等</strong>。既能开发PC端，也能开发移动端</p>
<p>前端常用的移动端插件有 swiper、superslide、iscroll等。</p>
<p>框架： 大而全，一整套解决方案</p>
<p>插件： 小而专一，某个功能的解决方案</p>
<h3 id="1-6-2-Bootstrap"><a href="#1-6-2-Bootstrap" class="headerlink" title="1.6.2. Bootstrap"></a>1.6.2. Bootstrap</h3><p>Bootstrap 是一个简洁、直观、强悍的前端开发框架，它让 web 开发更迅速、简单。</p>
<p>它能开发PC端，也能开发移动端 </p>
<p>Bootstrap JS插件使用步骤：</p>
<ul>
<li><p>1.引入相关js 文件</p>
</li>
<li><p>2.复制HTML 结构</p>
</li>
<li><p>3.修改对应样式</p>
</li>
<li><p>4.修改相应JS 参数</p>
</li>
</ul>
<h2 id="1-7-本地存储"><a href="#1-7-本地存储" class="headerlink" title="1.7. 本地存储"></a>1.7. 本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p>
<h3 id="1-7-1-本地存储特性"><a href="#1-7-1-本地存储特性" class="headerlink" title="1.7.1.本地存储特性"></a>1.7.1.本地存储特性</h3><p>1、数据存储在用户浏览器中</p>
<p>2、设置、读取方便、甚至页面刷新不丢失数据</p>
<p>3、容量较大，sessionStorage约5M、localStorage约20M</p>
<p><strong>4、只能存储字符串，可以用JSON.stringify()将数组对象转化为字符串后存储</strong></p>
<h3 id="1-7-2-window-sessionStorage"><a href="#1-7-2-window-sessionStorage" class="headerlink" title="1.7.2.window.sessionStorage"></a>1.7.2.window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p>
<p>2、在同一个窗口(页面)下数据可以共享</p>
<p>3、以键值对的形式存储使用</p>
<p>存储数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure>

<p>获取数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure>

<p>删除数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure>

<p>清空数据：(所有都清除掉)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<h3 id="1-7-3-window-localStorage"><a href="#1-7-3-window-localStorage" class="headerlink" title="1.7.3.window.localStorage"></a>1.7.3.window.localStorage</h3><p>1、声明周期<strong>永久生效，除非手动删除</strong> 否则关闭页面也会存在</p>
<p>2、可以多窗口（页面）共享（同一浏览器可以共享）</p>
<p>3、以键值对的形式存储使用</p>
<p>存储数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure>

<p>获取数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure>

<p>删除数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure>

<p>清空数据：(所有都清除掉)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>

<h3 id="1-7-4-案例：记住用户名"><a href="#1-7-4-案例：记住用户名" class="headerlink" title="1.7.4.案例：记住用户名"></a>1.7.4.案例：记住用户名</h3><p>如果勾选记住用户名， 下次用户打开浏览器，就在文本框里面自动显示上次登录的用户名</p>
<h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4><ol>
<li><p>把数据存起来，用到本地存储</p>
</li>
<li><p>关闭页面，也可以显示用户名，所以用到localStorage</p>
</li>
<li><p>打开页面，先判断是否有这个用户名，如果有，就在表单里面显示用户名，并且勾选复选框</p>
</li>
<li><p><strong>当复选框发生改变：change事件</strong></p>
</li>
<li><p>如果勾选，就存储，否则就移除</p>
<p><img src="/images7%5C1551800263(1).jpg" alt="1551800263(1)"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>web API01</title>
    <url>/2022/03/01/00-00-00/</url>
    <content><![CDATA[<h1 id="day01-Web-APIs"><a href="#day01-Web-APIs" class="headerlink" title="day01 - Web APIs"></a>day01 - Web APIs</h1><blockquote>
<p>学习目标：</p>
<p>能够通过ID来获取元素<br>能够通过标签名来获取元素<br>能够通过class来获取元素<br>能够通过选择器来获取元素<br>能够获取body和html元素<br>能够给元素注册事件<br>能够修改元素的内容<br>能够区分innerText和innerHTML的区别<br>能够修改像div这类普通元素的属性<br>能够修改表单元素的属性<br>能够修改元素的样式属性</p>
</blockquote>
<span id="more"></span>

<h2 id="1-1-Web-API介绍"><a href="#1-1-Web-API介绍" class="headerlink" title="1.1. Web API介绍"></a>1.1. Web API介绍</h2><h3 id="1-1-1-API的概念"><a href="#1-1-1-API的概念" class="headerlink" title="1.1.1 API的概念"></a>1.1.1 API的概念</h3><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。</p>
<p><img src="/images1/1550719355829.png" alt="1550719355829"></p>
<blockquote>
<p>举例解释什么是API。</p>
<p>例如，</p>
<p>​	C语言中有一个函数 fopen()可以打开硬盘上的文件，这个函数对于我们来说，就是一个C语言提供的打开文件的工具。</p>
<p>​	javascript中有一个函数alert()可以在页面弹一个提示框，这个函数就是js提供的一个弹框工具。</p>
<p>这些工具（函数）由编程语言提供，内部的实现已经封装好了，我们只要学会灵活的使用这些工具即可。</p>
</blockquote>
<h3 id="1-1-2-Web-API的概念"><a href="#1-1-2-Web-API的概念" class="headerlink" title="1.1.2 Web  API的概念"></a>1.1.2 Web  API的概念</h3><p>​	Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</p>
<p>​	现阶段我们主要针对于浏览器讲解常用的 API , 主要针对浏览器做交互效果。比如我们想要浏览器弹出一个警示框， 直接使用 alert(‘弹出’)</p>
<p>​	MDN 详细 API : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p>
<p>​	因为 Web API 很多，所以我们将这个阶段称为 Web APIs。</p>
<p>​	此处的 Web API 特指浏览器提供的一系列API(很多函数或对象方法)，即操作网页的一系列工具。例如：操作html标签、操作页面地址的方法。</p>
<h3 id="1-1-3-API-和-Web-API-总结"><a href="#1-1-3-API-和-Web-API-总结" class="headerlink" title="1.1.3 API 和 Web  API 总结"></a>1.1.3 API 和 Web  API 总结</h3><ol>
<li><p>API 是为我们程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现</p>
</li>
<li><p>Web API 主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果。</p>
</li>
<li><p>Web API 一般都有输入和输出（函数的传参和返回值），Web API 很多都是方法（函数）</p>
</li>
<li><p>学习 Web API 可以结合前面学习内置对象方法的思路学习</p>
</li>
</ol>
<h2 id="1-2-DOM-介绍"><a href="#1-2-DOM-介绍" class="headerlink" title="1.2. DOM 介绍"></a>1.2. DOM 介绍</h2><h3 id="1-2-1-什么是DOM"><a href="#1-2-1-什么是DOM" class="headerlink" title="1.2.1 什么是DOM"></a>1.2.1 什么是DOM</h3><p>​	文档对象模型（Document Object Model），是 <a href="https://baike.baidu.com/item/W3C">W3C</a> 组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80">可扩展标记语言</a>（html或者xhtml）的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3">编程接口</a>。</p>
<p>​	W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p>
<blockquote>
<p>DOM是W3C组织制定的一套处理 html和xml文档的规范，所有的浏览器都遵循了这套标准。</p>
</blockquote>
<h3 id="1-2-2-DOM树"><a href="#1-2-2-DOM树" class="headerlink" title="1.2.2. DOM树"></a>1.2.2. DOM树</h3><p><img src="/images1/1550731974575.png" alt="1550731974575"></p>
<p>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。</p>
<ul>
<li>文档：<strong>一个页面就是一个文档，DOM中使用document表示</strong></li>
<li>节点：<strong>网页中的所有内容，在文档树中都是节点</strong>（标签、属性、文本、注释等），使用node表示</li>
<li>标签节点：网页中的<strong>所有标签，通常称为元素节点，又简称为“元素”</strong>，使用element表示</li>
</ul>
<p><img src="/images1/1550732362134.png" alt="1550732362134"></p>
<h2 id="1-3-获取元素"><a href="#1-3-获取元素" class="headerlink" title="1.3. 获取元素"></a>1.3. 获取元素</h2><p>为什么要获取页面元素？</p>
<p>例如：我们想要操作页面上的某部分(显示&#x2F;隐藏，动画)，需要先获取到该部分对应的元素，再对其进行操作。</p>
<h3 id="1-3-1-根据ID获取"><a href="#1-3-1-根据ID获取" class="headerlink" title="1.3.1. 根据ID获取"></a>1.3.1. 根据ID获取</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">语法：<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id)</span><br><span class="line">作用：根据<span class="variable constant_">ID</span>获取元素对象</span><br><span class="line">参数：id值，区分大小写的字符串</span><br><span class="line">返回值：元素对象 或 <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 因为我们文档页面从上往下加载，所以先得有标签 所以我们script写到标签的下面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//返回的是一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(timer);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> timer);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.dir 打印我们返回的元素对象 更好的查看里面的属性和方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(timer);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-2-根据标签名获取元素"><a href="#1-3-2-根据标签名获取元素" class="headerlink" title="1.3.2. 根据标签名获取元素"></a>1.3.2. 根据标签名获取元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：document.getElementsByTagName(&#x27;标签名&#x27;) 或者 element.getElementsByTagName(&#x27;标签名&#x27;) </span><br><span class="line">作用：根据标签名获取元素对象</span><br><span class="line">参数：标签名</span><br><span class="line">返回值：元素对象集合（伪数组，数组元素是元素对象）</span><br></pre></td></tr></table></figure>

<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>生僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. element.getElementsByTagName()  可以得到这个元素里面的某些标签</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>); <span class="comment">// 这个获得nav 元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> navLis = nav.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);<span class="comment">//通过这个方法可以只获取下面的五个li</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(navLis);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images1/1550733441663.png" alt="1550733441663"></p>
<p>注意：getElementsByTagName()<strong>获取到是动态集合</strong>，即：当页面增加了标签，这个集合中也就增加了元素。</p>
<h3 id="1-3-3-H5新增获取元素方式"><a href="#1-3-3-H5新增获取元素方式" class="headerlink" title="1.3.3. H5新增获取元素方式"></a>1.3.3. H5新增获取元素方式</h3><p><img src="/images1/1550733518278.png" alt="1550733518278"></p>
<p><img src="/images1/1550733734425.png" alt="1550733734425"></p>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> boxs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(boxs);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. querySelector 返回指定选择器的第一个元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(firstBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#nav&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(nav);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(li);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> allBox = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(allBox);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-4-获取特殊元素（body，html）"><a href="#1-3-4-获取特殊元素（body，html）" class="headerlink" title="1.3.4 获取特殊元素（body，html）"></a>1.3.4 获取特殊元素（body，html）</h3><p><img src="/images1/1550733794816.png" alt="1550733794816"></p>
<h2 id="1-4-事件基础"><a href="#1-4-事件基础" class="headerlink" title="1.4. 事件基础"></a>1.4. 事件基础</h2><h3 id="1-4-1-事件概述"><a href="#1-4-1-事件概述" class="headerlink" title="1.4.1. 事件概述"></a>1.4.1. 事件概述</h3><p>JavaScript 使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p>
<p>简单理解： <strong>触发— 响应机制</strong>。</p>
<p>​	网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个 事件，然后去执行某些操作。</p>
<h3 id="1-4-2-事件三要素"><a href="#1-4-2-事件三要素" class="headerlink" title="1.4.2. 事件三要素"></a>1.4.2. 事件三要素</h3><ul>
<li>事件源（谁）：触发事件的元素</li>
<li>事件类型（什么事件）： 例如 click 点击事件</li>
<li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li>
</ul>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 点击一个按钮，弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-4-常见的鼠标事件"><a href="#1-4-4-常见的鼠标事件" class="headerlink" title="1.4.4. 常见的鼠标事件"></a>1.4.4. 常见的鼠标事件</h3><p><img src="/images1/1550734506084.png" alt="1550734506084"></p>
<h2 id="1-5-操作元素"><a href="#1-5-操作元素" class="headerlink" title="1.5. 操作元素"></a>1.5. 操作元素</h2><p>​	JavaScript的 DOM 操作可以改变网页内容、结构和样式，我们可以利用 DOM 操作元素来改变元素里面的内容、属性等。（注意：这些操作都是通过元素对象的属性实现的）</p>
<h3 id="1-5-1-改变元素内容（获取或设置）"><a href="#1-5-1-改变元素内容（获取或设置）" class="headerlink" title="1.5.1. 改变元素内容（获取或设置）"></a>1.5.1. 改变元素内容（获取或设置）</h3><p><img src="/images1/1550735016756.png" alt="1550735016756"></p>
<p><strong>innerText改变元素内容</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>显示当前系统时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当我们点击了按钮，  div里面的文字会发生变化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="property">innerText</span> = <span class="string">&#x27;2019-6-6&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 也可以不添加事件，这样页面一刷新就会变化</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">		p.<span class="property">innerText</span> = <span class="string">&#x27;12312&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>innerText和innerHTML的区别</strong></p>
<ul>
<li>获取内容时的区别：</li>
</ul>
<p>​	innerText会去除空格和换行，且去除标签；而innerHTML会保留空格和换行	</p>
<ul>
<li>设置内容时的区别：</li>
</ul>
<p>​	innerText不会识别html标签，若有标签会变成字符串直接显示，而innerHTML会识别</p>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是文字</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. innerText 不识别html标签 非标准  去除空格和换行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// div.innerText = &#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-常用元素的属性操作"><a href="#1-5-2-常用元素的属性操作" class="headerlink" title="1.5.2. 常用元素的属性操作"></a>1.5.2. 常用元素的属性操作</h3><p><img src="/images1/1550735556297.png" alt="1550735556297"></p>
<p><strong>获取属性的值</strong></p>
<blockquote>
<p>元素对象.属性名</p>
</blockquote>
<p><strong>设置属性的值</strong></p>
<blockquote>
<p>元素对象.属性名 &#x3D; 值</p>
</blockquote>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ldh&quot;</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;zxy&quot;</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images1/ldh.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;刘德华&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 修改元素属性  src</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ldh = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ldh&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> zxy = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;zxy&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件  处理程序</span></span></span><br><span class="line"><span class="language-javascript">        zxy.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images1/zxy.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;张学友&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        ldh.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">src</span> = <span class="string">&#x27;images1/ldh.jpg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            img.<span class="property">title</span> = <span class="string">&#x27;刘德华&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-4-表单元素的属性操作"><a href="#1-5-4-表单元素的属性操作" class="headerlink" title="1.5.4. 表单元素的属性操作"></a>1.5.4. 表单元素的属性操作</h3><p><img src="/images1/1550736039005.png" alt="1550736039005"></p>
<p><strong>获取属性的值</strong></p>
<blockquote>
<p>元素对象.属性名</p>
</blockquote>
<p><strong>设置属性的值</strong></p>
<blockquote>
<p>元素对象.属性名 &#x3D; 值</p>
<p>表单元素中有一些属性如：disabled、checked、selected，元素对象的这些属性的值是布尔型。</p>
</blockquote>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;输入内容&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 表单里面的值 文字内容是通过 value 来修改的</span></span></span><br><span class="line"><span class="language-javascript">            input.<span class="property">value</span> = <span class="string">&#x27;被点击了&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果想要某个表单被禁用 不能再点击 disabled  我们想要这个按钮 button禁用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// btn.disabled = true;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this 指向的是事件函数的调用者 btn</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-案例：仿京东显示密码"><a href="#1-5-5-案例：仿京东显示密码" class="headerlink" title="1.5.5. 案例：仿京东显示密码"></a>1.5.5. 案例：仿京东显示密码</h3><p><img src="/images1/1550736330331.png" alt="1550736330331"></p>
<p><img src="/images1/1550736346822.png" alt="1550736346822"></p>
<h3 id="1-5-6-样式属性操作"><a href="#1-5-6-样式属性操作" class="headerlink" title="1.5.6. 样式属性操作"></a>1.5.6. 样式属性操作</h3><p>我们可以通过 JS 修改元素的大小、颜色、位置等样式。</p>
<p><strong>常用方式</strong></p>
<p><img src="/images1/1550736488634.png" alt="1550736488634"></p>
<h4 id="方式1：通过操作style属性"><a href="#方式1：通过操作style属性" class="headerlink" title="方式1：通过操作style属性"></a>方式1：通过操作style属性</h4><blockquote>
<p>元素对象的style属性也是一个对象！</p>
<p>元素对象.style.样式属性 &#x3D; 值;</p>
</blockquote>
<p><img src="/images1/1550736620181.png" alt="1550736620181"></p>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// div.style里面的属性 采取驼峰命名法 </span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;purple&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="案例：淘宝点击关闭二维码"><a href="#案例：淘宝点击关闭二维码" class="headerlink" title="案例：淘宝点击关闭二维码"></a>案例：淘宝点击关闭二维码</h4><p><img src="/images1/1550736843659.png" alt="1550736843659"></p>
<p><img src="/images1/1550736881832.png" alt="1550736881832"></p>
<h4 id="案例：循环精灵图背景"><a href="#案例：循环精灵图背景" class="headerlink" title="案例：循环精灵图背景"></a>案例：循环精灵图背景</h4><p><img src="/images1/1550736940082.png" alt="1550736940082"></p>
<p><img src="/images1/1550736956754.png" alt="1550736956754"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素 所有的小li </span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 让索引号 乘以 44 就是每个li 的背景y坐标  -index就是我们的y坐标</span></span><br><span class="line">    <span class="keyword">var</span> index = i * <span class="number">44</span>;</span><br><span class="line">    lis[i].<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">&#x27;0 -&#x27;</span> + index + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="案例：显示隐藏文本框内容"><a href="#案例：显示隐藏文本框内容" class="headerlink" title="案例：显示隐藏文本框内容"></a>案例：显示隐藏文本框内容</h4><p><img src="/images1/1550737006593.png" alt="1550737006593"></p>
<p><img src="/images1/1550737019729.png" alt="1550737019729"></p>
<h4 id="方式2：通过操作className属性"><a href="#方式2：通过操作className属性" class="headerlink" title="方式2：通过操作className属性"></a>方式2：通过操作className属性</h4><blockquote>
<p>元素对象.className &#x3D; 值;</p>
<p>因为class是关键字，所有使用className。</p>
</blockquote>
<p><img src="/images1/1550737214510.png" alt="1550737214510"></p>
<p><strong>案例代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 使用 element.style 获得修改元素样式  如果样式比较少 或者 功能简单的情况下使用</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> test = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        test.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能复杂的情况</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 需要在css中提前定义该类的样式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3. 该方法会替换类名，如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// this.className = &#x27;change&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;first change&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 即把繁复的样式写在css中，通过js定义类名来使之生效</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="案例：密码框格式提示错误信息"><a href="#案例：密码框格式提示错误信息" class="headerlink" title="案例：密码框格式提示错误信息"></a>案例：密码框格式提示错误信息</h4><p><img src="/images1/1550737269546.png" alt="1550737269546"></p>
<p><img src="/images1/1550737284218.png" alt="1550737284218"></p>
<h2 id="1-6-今日总结"><a href="#1-6-今日总结" class="headerlink" title="1.6. 今日总结"></a>1.6. 今日总结</h2><p><img src="/images1/1550737354861.png" alt="1550737354861"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk8新特性</title>
    <url>/2023/10/29/19-00-37/</url>
    <content><![CDATA[<h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>用于简化匿名内部类代码的书写。只能简化<strong>函数式接口</strong>的匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(被重写方法的形参列表) -&gt; &#123;</span><br><span class="line">    被重写方法的方法体代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>函数式接口：接口中只有一个抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimming</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标：认识Lambda表达式.</span></span><br><span class="line">        <span class="comment">//1.创建一个Swimming接口的匿名内部类对象</span></span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swimming</span>()&#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;学生快乐的游泳~~~~&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">         s.swim();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//2.使用Lambda表达式对Swimming接口的匿名内部类进行简化</span></span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;学生快乐的游泳~~~~&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        s1.swim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在编译时，编译器会把Lambda表达式的简化写法复原，由于接口中只有一个方法，所以编译器能找到它。</p>
<h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><ol>
<li>参数类型可以不写</li>
<li>如果只有一个参数，参数类型和()都可以省略</li>
<li>如果方法体中只有一行代码，可以不写大括号和分号。<strong>如果这行代码是return语句，必须把return去掉</strong></li>
</ol>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><h3 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h3><p>原代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用Lambda简化后的形式</span></span><br><span class="line">        Arrays.sort(students, (o1, o2) -&gt; o1.getAge() - o2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把Lambda表达式中的方法体用一个静态方法代替</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareByData</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compareByAge</span><span class="params">(Student o1, Student o2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getAge() - o2.getAge(); <span class="comment">// 升序排序的规则</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.sort(students, (o1, o2) -&gt; CompareByData.compareByAge(o1, o2));</span><br></pre></td></tr></table></figure>

<p>此时可以进一步化简。<strong>实际上就是用类名调用方法，但是把参数给省略了。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态方法引用：类名::方法名</span></span><br><span class="line">Arrays.sort(students, CompareByData::compareByAge);</span><br></pre></td></tr></table></figure>

<h3 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">CompareByData</span> <span class="variable">compare</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompareByData</span>();</span><br><span class="line">Arrays.sort(students, (o1, o2) -&gt; compare.compareByAgeDesc(o1, o2)); <span class="comment">// 降序</span></span><br><span class="line"></span><br><span class="line">Arrays.sort(students, compare::compareByAgeDesc); <span class="comment">// 降序</span></span><br></pre></td></tr></table></figure>

<h3 id="特点类型的方法引用"><a href="#特点类型的方法引用" class="headerlink" title="特点类型的方法引用"></a>特点类型的方法引用</h3><blockquote>
<p>Java约定：<br> 如果某个Lambda表达式里只是调用一个实例方法，并且前面参数列表中的第一个参数作为方法的主调，	后面的所有参数都是作为该实例方法的入参时，则就可以使用特定类型的方法引用。<br>格式：<br>类型::方法名</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要求忽略首字符大小写进行排序。</span></span><br><span class="line">Arrays.sort(names, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">        <span class="comment">// 制定比较规则。o1 = &quot;Andy&quot;  o2 = &quot;angela&quot;</span></span><br><span class="line">        <span class="keyword">return</span> o1.compareToIgnoreCase(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式写法</span></span><br><span class="line">Arrays.sort(names, ( o1,  o2) -&gt; o1.compareToIgnoreCase(o2) );</span><br><span class="line"><span class="comment">//特定类型的方法引用！</span></span><br><span class="line">Arrays.sort(names, String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure>



<h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建这个接口的匿名内部类对象。</span></span><br><span class="line"><span class="type">CreateCar</span> <span class="variable">cc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateCar</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">create</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(name, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2、使用匿名内部类改进</span></span><br><span class="line"><span class="type">CreateCar</span> <span class="variable">cc2</span> <span class="operator">=</span> (name,  price) -&gt; <span class="keyword">new</span> <span class="title class_">Car</span>(name, price);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、使用方法引用改进：构造器引用</span></span><br><span class="line"><span class="type">CreateCar</span> <span class="variable">cc3</span> <span class="operator">=</span> Car::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure>

<h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a><code>Stream</code></h2><p>专门用于<strong>对集合或者数组的便捷操作</strong>。</p>
<p>数据源-&gt;中间步骤(过滤，排序，去重)-&gt;获取结果</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、获取List集合的Stream流</span></span><br><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(names, <span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;周芷若&quot;</span>,<span class="string">&quot;赵敏&quot;</span>,<span class="string">&quot;张强&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = names.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、获取Set集合的Stream流</span></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">Collections.addAll(set, <span class="string">&quot;刘德华&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>,<span class="string">&quot;蜘蛛精&quot;</span>,<span class="string">&quot;马德&quot;</span>,<span class="string">&quot;德玛西亚&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream1 = set.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、获取Map集合的Stream流,key与value要先分开操作</span></span><br><span class="line">Map&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;古力娜扎&quot;</span>, <span class="number">172.3</span>);</span><br><span class="line">map.put(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="number">168.3</span>);</span><br><span class="line">map.put(<span class="string">&quot;马尔扎哈&quot;</span>, <span class="number">166.3</span>);</span><br><span class="line">map.put(<span class="string">&quot;卡尔扎巴&quot;</span>, <span class="number">168.3</span>);</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">Stream&lt;String&gt; ks = keys.stream();</span><br><span class="line"></span><br><span class="line">Collection&lt;Double&gt; values = map.values();</span><br><span class="line">Stream&lt;Double&gt; vs = values.stream();</span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();</span><br><span class="line">Stream&lt;Map.Entry&lt;String, Double&gt;&gt; kvs = entries.stream();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、获取数组的Stream流</span></span><br><span class="line">String[] names2 = &#123;<span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;东方不败&quot;</span>, <span class="string">&quot;唐大山&quot;</span>, <span class="string">&quot;独孤求败&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; s1 = Arrays.stream(names2);</span><br><span class="line">Stream&lt;String&gt; s2 = Stream.of(names2);</span><br></pre></td></tr></table></figure>



<h3 id="中间方法"><a href="#中间方法" class="headerlink" title="中间方法"></a>中间方法</h3><p><strong>中间方法指的是：调用完方法之后其结果是一个新的Stream流，于是可以继续调用方法，这样一来就可以支持链式编程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scores.stream().filter(s -&gt; s &gt;= <span class="number">60</span>).sorted().forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">students.stream().filter(s -&gt; s.getAge() &gt;= <span class="number">23</span> &amp;&amp; s.getAge() &lt;= <span class="number">30</span>)</span><br><span class="line">                .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())</span><br><span class="line">                .forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))</span><br><span class="line">                .limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">students.stream().sorted((o1, o2) -&gt; Double.compare(o2.getHeight(), o1.getHeight()))</span><br><span class="line">                .skip(students.size() - <span class="number">2</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">students.stream().filter(s -&gt; s.getHeight() &gt; <span class="number">168</span>).map(Student::getName)</span><br><span class="line">               .distinct().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">students.stream().filter(s -&gt; s.getHeight() &gt; <span class="number">168</span>)</span><br><span class="line">                .distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>



<h3 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h3><p>终结方法的特点是，调用完方法之后，其结果就不再是Stream流了，所以不支持链式编程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> students.stream().max((o1, o2) -&gt; Double.compare(o1.getHeight(), o2.getHeight())).get();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Double&gt; map =students.stream().filter(a -&gt; a.getHeight() &gt; <span class="number">170</span>)</span><br><span class="line">                        .distinct().collect(Collectors.toMap(a -&gt; a.getName(), a -&gt; a.getHeight()));</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-MybatisPlus</title>
    <url>/2023/11/17/11-00-37/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><blockquote>
<p>只做增强不做改变，引入它不会对现有工程产生影响。</p>
<p>只需简单配置，即可快速进行<strong>单表 CRUD</strong> 操作，从而节省大量时间。</p>
<p>代码生成、自动分页、逻辑删除、自动填充等功能一应俱全。</p>
</blockquote>
<span id="more"></span>

<h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>由于MybatisPlus的依赖包含了mybatis的自动装配，因此mybatis的依赖可以去掉。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="定义Mapper"><a href="#定义Mapper" class="headerlink" title="定义Mapper"></a>定义Mapper</h4><p>MybatisPlus提供了一个基础的<code>BaseMapper</code>接口，其中已经实现了单表的CRUD</p>
<img src="/pic/basemapper.png" style="zoom: 80%;" />

<p>因此我们自定义的Mapper只要继承了这个<code>BaseMapper</code>，就无需自己实现单表CRUD了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="comment">// 这里泛型会指定一个实体类，MP会反射字节码获取实体类信息作为数据库表信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要以上步骤，对于user表的CURD操作就已经实现了。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserMapperTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;Lucy&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;18688990011&quot;</span>);</span><br><span class="line">        user.setBalance(<span class="number">200</span>);</span><br><span class="line">        user.setInfo(<span class="string">&quot;&#123;\&quot;age\&quot;: 24, \&quot;intro\&quot;: \&quot;英文老师\&quot;, \&quot;gender\&quot;: \&quot;female\&quot;&#125;&quot;</span>);</span><br><span class="line">        user.setCreateTime(LocalDateTime.now());</span><br><span class="line">        user.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectByIds</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectBatchIds(List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>, <span class="number">4L</span>, <span class="number">5L</span>));</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setBalance(<span class="number">20000</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.deleteById(<span class="number">5L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那Mybatis怎么知道要对那张表进行操作，以及表中有哪些字段呢？</p>
<p><strong>MP通过扫描实体类，并反射获取实体类信息作为数据库表信息。</strong></p>
<p>泛型中的User就是与数据库对应的实体类</p>
<p>MybatisPlus就是根据实体类的信息来推断出表的信息，从而生成SQL的。默认情况下：</p>
<ul>
<li>MybatisPlus会把实体类的类名驼峰转下划线作为表名</li>
<li>MybatisPlus会把实体类的所有变量名驼峰转下划线作为表的字段名，并根据变量类型推断字段类型</li>
<li>MybatisPlus会把名为id的字段作为主键</li>
</ul>
<p>但很多情况下，默认的实现与实际场景不符，因此MybatisPlus提供了一些注解便于我们声明表信息。</p>
<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>主键不给类型，默认是ASSIGN_ID。</p>
<img src="/pic/mp注解.png" style="zoom: 80%;" />

<h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p>MybatisPlus也支持基于yaml文件的自定义配置，可以在application配置文件中配置。</p>
<p>大多数的配置都有默认值，因此我们都无需配置。但还有一些是没有默认值的，例如:</p>
<ul>
<li>实体类的别名扫描包</li>
<li>全局id类型</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.mp.domain.po</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 全局id类型为自增长</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，MyBatisPlus也支持手写SQL的，而mapper文件的读取地址可以自己配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&quot;classpath*:/mapper/**/*.xml&quot;</span> <span class="comment"># Mapper.xml文件地址，当前这个是默认值。</span></span><br></pre></td></tr></table></figure>

<p>还有一些默认配置好的配置，比如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">  	<span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span> <span class="comment"># 是否开启下划线和驼峰的映射</span></span><br><span class="line">  	<span class="attr">cache-enabled:</span> <span class="literal">false</span> <span class="comment"># 是否开启二级缓存</span></span><br></pre></td></tr></table></figure>

<h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h3><p>MP支持各种复杂的where条件，在BaseMapper中有的方法需要传递Wrapper类型的参数，wrapper就是条件构造器。</p>
<p>它是一个抽象类，其下有很多实现类</p>
<img src="/pic/mp-wrapper.png" style="zoom: 67%;" />

<p><code>Wrapper</code>的子类<code>AbstractWrapper</code>提供了where中包含的所有条件构造方法：</p>
<img src="/pic/abstractWrapper.png" style="zoom:67%;" />

<p>QueryWrapper在AbstractWrapper的基础上拓展了一个select方法，允许指定查询字段：</p>
<img src="/pic/QueryWrapper.png" style="zoom:80%;" />

<p>而UpdateWrapper在AbstractWrapper的基础上拓展了一个set方法，允许指定SQL中的SET部分：</p>
<img src="/pic/UpdateWrapper.png" style="zoom:80%;" />

<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p><strong>QueryWrapper</strong>，针对where语句</p>
<p>无论是修改、删除、查询，都可以使用QueryWrapper来构建查询条件。</p>
<p><strong>查询</strong>：查询出名字中带<code>o</code>的，存款大于等于1000元的人。代码如下：</p>
<blockquote>
<p>SELECT id,username,info,balance</p>
<p>FROM user</p>
<p>WHERE username LIKE ? AND balance &gt;&#x3D; ?</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name like &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;()</span><br><span class="line">            .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;username&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;balance&quot;</span>)</span><br><span class="line">            .like(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;balance&quot;</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 2.查询数据</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>更新</strong>：更新用户名为jack的用户的余额为2000，代码如下：</p>
<blockquote>
<p>UPDATE user</p>
<p>SET balance &#x3D; 2000</p>
<p>WHERE (username &#x3D; “jack”)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateByQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建查询条件 where name = &quot;Jack&quot;</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().eq(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    <span class="comment">// 2.要更新的数据，user中非null字段都会作为set语句</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setBalance(<span class="number">2000</span>);</span><br><span class="line">    userMapper.update(user, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UpdateWrapper</strong></p>
<p>基于<code>BaseMapper</code>中的update方法更新时只能直接赋值，对于一些复杂的需求就难以实现。 例如：更新id为<code>1,2,4</code>的用户的余额，扣200，对应的SQL应该是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE user </span><br><span class="line">SET balance = balance - 200 </span><br><span class="line">WHERE id in (1, 2, 4)</span><br></pre></td></tr></table></figure>

<p>SET的赋值结果是基于字段现有值的，这个时候就要利用<code>UpdateWrapper</code>中的<code>setSql</code>功能了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line">    <span class="comment">// 1.生成SQL</span></span><br><span class="line">    UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">            .setSql(<span class="string">&quot;balance = balance - 200&quot;</span>) <span class="comment">// SET balance = balance - 200</span></span><br><span class="line">            .in(<span class="string">&quot;id&quot;</span>, ids); <span class="comment">// WHERE id in (1, 2, 4)</span></span><br><span class="line">    <span class="comment">// 2.更新，注意第一个参数可以给null，也就是不填更新字段和数据，而是基于UpdateWrapper中的setSQL来更新</span></span><br><span class="line">    userMapper.update(<span class="literal">null</span>, wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>LambdaQueryWrapper</strong></p>
<p>相比<code>QueryWrapper</code>就是使用了lambda语法。</p>
<p>无论是<code>QueryWrapper</code>还是<code>UpdateWrapper</code>在构造条件的时候都需要写死字段名称，会出现字符串<code>魔法值</code>。这在编程规范中显然是不推荐的。 那怎么样才能不写字段名，又能知道字段名呢？</p>
<p>其中一种办法是基于变量的<code>gettter</code>方法结合反射技术。因此我们只要将条件对应的字段的<code>getter</code>方法传递给<code>MybatisPlus</code>，它就能计算出对应的变量名了。而传递方法可以使用JDK8中的<code>方法引用</code>和<code>Lambda</code>表达式。 因此<code>MybatisPlus</code>又提供了一套基于Lambda的Wrapper，包含两个：</p>
<ul>
<li><code>LambdaQueryWrapper</code></li>
<li><code>LambdaUpdateWrapper</code></li>
</ul>
<p>分别对应<code>QueryWrapper</code>和<code>UpdateWrapper</code></p>
<p>其使用方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testLambdaQueryWrapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 1.构建条件 WHERE username LIKE &quot;%o%&quot; AND balance &gt;= 1000</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.lambda()</span><br><span class="line">            .select(User::getId, User::getUsername, User::getInfo, User::getBalance)</span><br><span class="line">            .like(User::getUsername, <span class="string">&quot;o&quot;</span>)</span><br><span class="line">            .ge(User::getBalance, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 2.查询</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义SQL"><a href="#自定义SQL" class="headerlink" title="自定义SQL"></a>自定义SQL</h3><p>SQL语句最好都写在持久层，上面的写法则是写在业务层。这是不允许的。</p>
<p>一般来说，可以利用MyBatisPlus的<strong>Wrapper来构建复杂的Where条件</strong>，其余部分用自定义SQL语句。之后把wrapper下放到持久层，然后在持久层与自定义的SQL语句结合。</p>
<ul>
<li>基于Wrapper构建where条件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Long&gt; ids = List.of(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">4L</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="comment">// 1.构建条件</span></span><br><span class="line">LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;().in(User::getId, ids);</span><br><span class="line"><span class="comment">// 2.自定义SQL方法调用</span></span><br><span class="line">userMapper.updateBalanceByIds(wrapper, amount);</span><br></pre></td></tr></table></figure>

<ul>
<li>在mapper方法参数中用Param注解声明wrapper变量名称，必须是ew</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateBalanceByIds</span><span class="params">(<span class="meta">@Param(&quot;ew&quot;)</span> LambdaQueryWrapper&lt;User&gt; wrapper, <span class="meta">@Param(&quot;amount&quot;)</span> <span class="type">int</span> amount)</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义SQL，并使用Wrapper条件，注解或xml都可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBalanceByIds&quot;</span>&gt;</span></span><br><span class="line">    UPDATE tb_user SET balance = balance - #&#123;amount&#125; $&#123;ew.customSqlSegment&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><p>MybatisPlus不仅提供了BaseMapper，还提供了通用的Service接口及默认实现(BaseMapper不需要提供实现类，因为mybatis会自动实现。但是service的接口不实现就会报错)，封装了一些常用的service模板方法。 通用接口为<code>IService</code>，**默认的实现类为<code>ServiceImpl</code>**，其中封装的方法可以分为以下几类：</p>
<ul>
<li><code>save</code>：新增</li>
<li><code>remove</code>：删除</li>
<li><code>update</code>：更新</li>
<li><code>get</code>：查询单个结果</li>
<li><code>list</code>：查询集合结果</li>
<li><code>count</code>：计数</li>
<li><code>page</code>：分页查询</li>
</ul>
<p>由于<code>Service</code>中经常需要定义与业务有关的自定义方法，因此我们不能直接使用<code>IService</code>，而是自定义<code>Service</code>接口，然后继承<code>IService</code>以拓展方法。同时，让自定义的<code>Service实现类</code>继承<code>ServiceImpl</code>，这样就不用自己实现<code>IService</code>中的接口了。</p>
<p>首先，定义<code>IUserService</code>，继承<code>IService</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 拓展自定义方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，编写<code>UserServiceImpl</code>类，继承<code>ServiceImpl</code>，实现<code>UserService</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//泛型需要填baseMapper和与表对应的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;<span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>实现下面4个接口：</p>
<table>
<thead>
<tr>
<th align="left"><strong>编号</strong></th>
<th align="left"><strong>接口</strong></th>
<th align="left"><strong>请求方式</strong></th>
<th align="left"><strong>请求路径</strong></th>
<th align="left"><strong>请求参数</strong></th>
<th align="left"><strong>返回值</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">新增用户</td>
<td align="left">POST</td>
<td align="left">&#x2F;users</td>
<td align="left">用户表单实体</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">删除用户</td>
<td align="left">DELETE</td>
<td align="left">&#x2F;users&#x2F;{id}</td>
<td align="left">用户id</td>
<td align="left">无</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">根据id查询用户</td>
<td align="left">GET</td>
<td align="left">&#x2F;users&#x2F;{id}</td>
<td align="left">用户id</td>
<td align="left">用户VO</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">根据id批量查询</td>
<td align="left">GET</td>
<td align="left">&#x2F;users</td>
<td align="left">用户id集合</td>
<td align="left">用户VO集合</td>
</tr>
</tbody></table>
<p>首先，我们在项目中引入几个依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后需要配置swagger信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">用户管理接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;用户管理接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.itheima.mp.controller</span></span><br></pre></td></tr></table></figure>

<p>然后，接口需要两个实体：</p>
<ul>
<li>UserFormDTO：代表新增时的用户表单</li>
<li>UserVO：代表查询的返回结果</li>
</ul>
<p>首先是UserFormDTO：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.dto;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户表单实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFormDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;注册手机号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息，JSON风格&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是UserVO：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.domain.vo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(description = &quot;用户VO实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVO</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;详细信息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;使用状态（1正常 2冻结）&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;账户余额&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="简单接口"><a href="#简单接口" class="headerlink" title="简单接口"></a>简单接口</h5><p>按照Restful风格编写Controller接口方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理接口&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> UserFormDTO userFormDTO)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.转换DTO为PO</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> BeanUtil.copyProperties(userFormDTO, User.class);</span><br><span class="line">        <span class="comment">// 2.新增</span></span><br><span class="line">        userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;删除用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">        userService.removeById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserVO <span class="title function_">queryUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        <span class="comment">// 2.处理vo</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyProperties(user, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUserByIds</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询用户</span></span><br><span class="line">        List&lt;User&gt; users = userService.listByIds(ids);</span><br><span class="line">        <span class="comment">// 2.处理vo</span></span><br><span class="line">        <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>private final IUserService userService;</code>没有使用<code>Autowired</code>自动注入。</p>
<p>因为spring不推荐使用<code>Autowired</code>字段注入<code>Field injection is not recommended</code>。</p>
<p>spring推荐使用构造函数来进行依赖注入，可以把变量用<code>final</code>修饰，用<code>lombok</code>中的<code>RequiredArgsConstructor</code>快速生成。</p>
</blockquote>
<p>可以看到上述接口都<strong>直接在controller即可实现</strong>，无需编写任何service代码(service继承关系要实现，不然没有这些方法)，非常方便。</p>
<h5 id="复杂接口"><a href="#复杂接口" class="headerlink" title="复杂接口"></a>复杂接口</h5><p>不过，一些带有业务逻辑的接口则需要在service中自定义实现了。例如下面的需求：</p>
<ul>
<li>根据id扣减用户余额</li>
</ul>
<p>这看起来是个简单修改功能，只要修改用户余额即可。但这个业务包含一些业务逻辑处理：</p>
<ul>
<li>判断用户状态是否正常</li>
<li>判断用户余额是否充足</li>
</ul>
<p>这些业务逻辑都要在service层来做，另外更新余额需要自定义SQL，要在mapper中来实现。因此，我们除了要编写controller以外，具体的业务还要在service和mapper中编写。</p>
<p>首先在UserController中定义一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;&#123;id&#125;/deduction/&#123;money&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;扣减用户余额&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id, <span class="meta">@PathVariable(&quot;money&quot;)</span>Integer money)</span>&#123;</span><br><span class="line">    userService.deductBalance(id, money);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是UserService接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后是UserServiceImpl实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.domain.po.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mp.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deductBalance</span><span class="params">(Long id, Integer money)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询用户，getById是ServiceImpl提供的查询方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getById(id);</span><br><span class="line">        <span class="comment">// 2.判断用户状态</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span> || user.getStatus() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户状态异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.判断用户余额</span></span><br><span class="line">        <span class="keyword">if</span> (user.getBalance() &lt; money) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;用户余额不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.扣减余额</span></span><br><span class="line">        baseMapper.deductMoneyById(id, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后是mapper：</p>
<p>这里语句比较简单，没必要使用wrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;UPDATE user SET balance = balance - #&#123;money&#125; WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deductMoneyById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id, <span class="meta">@Param(&quot;money&quot;)</span> Integer money)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Lambda方法"><a href="#Lambda方法" class="headerlink" title="Lambda方法"></a>Lambda方法</h4><p>需求：实现一个根据复杂条件查询用户的接口，查询条件如下：</p>
<ul>
<li>name：用户名关键字，可以为空</li>
<li>status：用户状态，可以为空</li>
<li>minBalance：最小余额，可以为空</li>
<li>maxBalance：最大余额，可以为空</li>
</ul>
<p>如果用Mybatis需要复杂的判断：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.mp.domain.po.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM tb_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            AND username LIKE #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            AND `status` = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;minBalance != null and maxBalance != null&quot;</span>&gt;</span></span><br><span class="line">            AND balance BETWEEN #&#123;minBalance&#125; AND #&#123;maxBalance&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>用wrapper。</p>
<p>其中的<code>username != null</code> 这样的参数，意思就是当条件成立时才会添加这个查询条件，类似Mybatis的<code>&lt;if&gt;</code>标签。这样就实现动态查询条件效果了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> user.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> user.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> user.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> user.getMaxBalance();</span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().lambda()</span><br><span class="line">        	<span class="comment">// </span></span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance);</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.list(wrapper);</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对<code>LambdaQueryWrapper</code>和<code>LambdaUpdateWrapper</code>的用法进一步做了简化。我们无需自己通过<code>new</code>的方式来创建<code>Wrapper</code>，而是直接调用<code>lambdaQuery</code>和<code>lambdaUpdate</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id集合查询用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title function_">queryUsers</span><span class="params">(UserQuery query)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.组织条件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> query.getName();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> query.getStatus();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">minBalance</span> <span class="operator">=</span> query.getMinBalance();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">maxBalance</span> <span class="operator">=</span> query.getMaxBalance();</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    List&lt;User&gt; users = userService.lambdaQuery()</span><br><span class="line">            .like(username != <span class="literal">null</span>, User::getUsername, username)</span><br><span class="line">            .eq(status != <span class="literal">null</span>, User::getStatus, status)</span><br><span class="line">            .ge(minBalance != <span class="literal">null</span>, User::getBalance, minBalance)</span><br><span class="line">            .le(maxBalance != <span class="literal">null</span>, User::getBalance, maxBalance)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="comment">// 3.处理vo</span></span><br><span class="line">    <span class="keyword">return</span> BeanUtil.copyToList(users, UserVO.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法中除了可以构建条件，还需要在链式编程的最后添加一个<code>list()</code>，这是在告诉MP我们的调用结果需要是一个list集合。这里不仅可以用<code>list()</code>，可选的方法有：</p>
<ul>
<li><code>.one()</code>：最多1个结果</li>
<li><code>.list()</code>：返回集合结果</li>
<li><code>.count()</code>：返回计数结果</li>
</ul>
<p>MybatisPlus会根据链式编程的最后一个方法来判断最终的返回结果。</p>
<h4 id="批量新增"><a href="#批量新增" class="headerlink" title="批量新增"></a>批量新增</h4><p><code>MybatisPlus</code>的批处理默认是基于<code>PrepareStatement</code>的预编译模式，然后批量提交。最终在数据库执行时还是会有多条insert语句，逐条插入数据。SQL类似这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Preparing: <span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> ( username, password, phone, info, balance, create_time, update_time ) <span class="keyword">VALUES</span> ( ?, ?, ?, ?, ?, ?, ? )</span><br><span class="line">Parameters: user_1, <span class="number">123</span>, <span class="number">18688190001</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br><span class="line">Parameters: user_2, <span class="number">123</span>, <span class="number">18688190002</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br><span class="line">Parameters: user_3, <span class="number">123</span>, <span class="number">18688190003</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span></span><br></pre></td></tr></table></figure>

<p>而如果想要得到最佳性能，最好是将多条SQL合并为一条，像这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> ( username, password, phone, info, balance, create_time, update_time )</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(user_1, <span class="number">123</span>, <span class="number">18688190001</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_2, <span class="number">123</span>, <span class="number">18688190002</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_3, <span class="number">123</span>, <span class="number">18688190003</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>),</span><br><span class="line">(user_4, <span class="number">123</span>, <span class="number">18688190004</span>, &quot;&quot;, <span class="number">2000</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>, <span class="number">2023</span><span class="number">-07</span><span class="number">-01</span>);</span><br></pre></td></tr></table></figure>

<p>MySQL的客户端连接参数中有这样的一个参数：<code>rewriteBatchedStatements</code>。顾名思义，就是重写批处理的<code>statement</code>语句。这个参数的默认值是false，我们需要修改连接参数，将其配置为true</p>
<p>修改项目中的application.yml文件，在jdbc的url后面添加参数<code>&amp;rewriteBatchedStatements=true</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mp?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">MySQL123</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-Springboot</title>
    <url>/2023/11/06/11-00-37/</url>
    <content><![CDATA[<h2 id="Spring家族"><a href="#Spring家族" class="headerlink" title="Spring家族"></a>Spring家族</h2><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p>
<span id="more"></span>

<p>Spring家族旗下这么多的技术，最基础、最核心的是 <strong>SpringFramework</strong>。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p>
<p>在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。</p>
<p>基于此，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的SpringBoot。 </p>
<p>通过springboot就可以快速的帮我们构建应用程序，所以springboot呢，最大的特点有两个 </p>
<ul>
<li>简化配置</li>
<li>快速开发</li>
</ul>
<p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>超文本传输协议，规定了浏览器和服务器之间数据传输的规则。</p>
<ul>
<li>基于TCP协议：面向连接，安全</li>
<li>基于请求-响应模型的：一次请求对应一次响应</li>
<li>HTTP协议是无状态的协议：对于事务处理没有记忆能力。每次请求-响应都是独立的。<ul>
<li>缺点：多次请求间不能共享数据。</li>
<li>优点：速度快</li>
</ul>
</li>
</ul>
<h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p><img src="/pic/http%E8%AF%B7%E6%B1%82%E6%A0%BC%E5%BC%8F.jpg"></p>
<table>
<thead>
<tr>
<th>Host</th>
<th>请求的主机名</th>
</tr>
</thead>
<tbody><tr>
<td>User-Agent</td>
<td>浏览器版本，例如Chrome浏览器的标识类似Mozilla&#x2F;5.0 … Chrome&#x2F;79，IE浏览器的标识类似Mozilla&#x2F;5.0 (Windows NT …) like Gecko</td>
</tr>
<tr>
<td>Accept</td>
<td>表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;<em>或者</em>&#x2F;*表示所有；</td>
</tr>
<tr>
<td>Accept-Language</td>
<td>表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</td>
</tr>
<tr>
<td>Accept-Encoding</td>
<td>表示浏览器可以支持的压缩类型，例如gzip, deflate等。</td>
</tr>
<tr>
<td>Content-Type</td>
<td>请求主体的数据类型。</td>
</tr>
<tr>
<td>Content-Length</td>
<td>请求主体的大小（单位：字节）。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>区别方式</th>
<th>GET请求</th>
<th>POST请求</th>
</tr>
</thead>
<tbody><tr>
<td>请求参数</td>
<td>请求参数在请求行中。<br/>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td>
<td>请求参数在请求体中</td>
</tr>
<tr>
<td>请求参数长度</td>
<td>请求参数长度有限制(浏览器不同限制也不同)</td>
<td>请求参数长度没有限制</td>
</tr>
<tr>
<td>安全性</td>
<td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td>
<td>安全性相对高</td>
</tr>
</tbody></table>
<h3 id="响应协议"><a href="#响应协议" class="headerlink" title="响应协议"></a>响应协议</h3><p><img src="/pic/http%E5%93%8D%E5%BA%94%E6%A0%BC%E5%BC%8F.jpg"></p>
<table>
<thead>
<tr>
<th>状态码分类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td><strong>响应中</strong> — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td>
</tr>
<tr>
<td>2xx</td>
<td><strong>成功</strong> — 表示请求已经被成功接收，处理已完成</td>
</tr>
<tr>
<td>3xx</td>
<td><strong>重定向</strong> — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td>
</tr>
<tr>
<td>4xx</td>
<td><strong>客户端错误</strong> — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td>
</tr>
<tr>
<td>5xx</td>
<td><strong>服务器端错误</strong> — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Content-Type</th>
<th>表示该响应内容的类型，例如text&#x2F;html，application&#x2F;json。</th>
</tr>
</thead>
<tbody><tr>
<td>Content-Length</td>
<td>表示该响应内容的长度（字节数）。</td>
</tr>
<tr>
<td>Content-Encoding</td>
<td>表示该响应压缩算法，例如gzip。</td>
</tr>
<tr>
<td>Cache-Control</td>
<td>指示客户端应如何缓存，例如max-age&#x3D;300表示可以最多缓存300秒。</td>
</tr>
<tr>
<td>Set-Cookie</td>
<td>告诉浏览器为当前页面所在的域设置cookie。</td>
</tr>
</tbody></table>
<h3 id="协议解析"><a href="#协议解析" class="headerlink" title="协议解析"></a>协议解析</h3><p>在B&#x2F;S架构中，后端程序需要接收浏览器的请求，解析http协议，同时把需要响应的数据封装为http协议返回。http协议的解析和处理又臭又长，已经有很多现成的可以直接使用，即Web服务器，其中比较流行的是Tomcat。</p>
<h2 id="Web服务器-Tomcat"><a href="#Web服务器-Tomcat" class="headerlink" title="Web服务器-Tomcat"></a>Web服务器-Tomcat</h2><p>Web服务器是一个软件程序，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p>
<h2 id="SpringBoot入门"><a href="#SpringBoot入门" class="headerlink" title="SpringBoot入门"></a>SpringBoot入门</h2><p>在构建spring boot项目时勾选web依赖就会内嵌Tomcat。</p>
<p>springboot会把相关依赖整合在一起，称为起步依赖</p>
<ul>
<li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li>
<li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li>
</ul>
<h2 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h2><p>在Tomcat中，有一个前端控制器，请求响应的数据先经过它再到我们写的xxxController程序中。请求时，会将请求数据封装到HttpServletRequest对象中；响应时，把响应数据设置到HttpServletResponse对象。</p>
<p>这样只需要专注于Controller的开发，Controller的职责就是接收请求，设置响应</p>
<img src="/pic/请求响应.jpg" style="zoom:50%;" />

<h3 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h3><p><strong>获取get请求的参数name和age的值</strong></p>
<p>在原始的web程序中，获取请求参数，需要通过HttpServletRequest 对象手动获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//原始方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">        <span class="comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span></span><br><span class="line">        <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">        <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//name就是请求参数名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);<span class="comment">//age就是请求参数名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);<span class="comment">//需要手动进行类型转换</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在springboot中，只要参数名与形参变量名相同，定义形参即可接收参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age )</span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果方法形参名称与请求参数名称不匹配，可以使用 @RequestParam 完成映射。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;)</span> String username , Integer age)</span>&#123;</span><br><span class="line">    System.out.println(username + <span class="string">&quot; : &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：@RequestParam中的required属性默认为true，代表该请求参数必须传递，如果不传递将报错。 如果该参数是可选的，可以将required属性设置为false。</p>
<h3 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h3><p>简单实体对象：请求参数名与形参对象属性名相同，定义POJO(简单java对象)接收即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复杂实体对象：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数。</p>
<h3 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h3><p>数组参数：请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数。</p>
<p>比如请求<code>http://.../arrayParam?hobby=game&amp;hobby=java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">    System.out.println(Arrays.toString(hobby));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以用集合接收，但需要用@RequestParam绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">    System.out.println(hobby);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期参数"><a href="#日期参数" class="headerlink" title="日期参数"></a>日期参数</h3><p>使用 @DateTimeFormat 注解完成日期参数格式转换</p>
<p>比如请求<code>http://.../dataParam?updateTime=2023-11-07 21:00:00</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">    System.out.println(updateTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Json参数"><a href="#Json参数" class="headerlink" title="Json参数"></a>Json参数</h3><p>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数，需要使用 @RequestBody 标识</p>
<p>之前的请求：</p>
<img src="/pic/post请求.jpg" style="zoom:50%;" />

<p>用postman请求json参数的方式</p>
<img src="/pic/json参数.jpg" style="zoom:50%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><p>通过请求URL直接传递参数，使用{…}来标识该路径参数，需要使用 @PathVariable 获取路径参数</p>
<p>比如请求<code>http://.../path/1/Tom</code></p>
<p>其中1是id，Tom是name</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">    System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>@ResponseBody</p>
<ul>
<li>类型：方法注解、类注解</li>
<li>位置：Controller方法上&#x2F;类上</li>
<li>作用：将方法返回值直接响应，如果返回值类型是 实体对象&#x2F;集合 ，将会转换为JSON格式响应</li>
<li>说明：@RestController &#x3D; @Controller + @ResponseBody ，即声明了RestController 就是声明了ResponseBody 和Controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age )</span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="comment">//return &quot;OK&quot;;</span></span><br><span class="line">        <span class="keyword">return</span> list; <span class="comment">//会转为json格式响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应的数据千奇百怪，有字符串，有json数据，有json数组，不够统一。</p>
<h3 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>统一的返回结果使用类来描述，在这个结果中包含：</p>
<ul>
<li><p>响应状态码：当前请求是成功，还是失败</p>
</li>
<li><p>状态码信息：给页面的提示信息</p>
</li>
<li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义实体类Result</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改造之前的Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123; </span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>需求：加载并解析xml文件中的数据，完成数据处理，返回给前端渲染</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        <span class="comment">//System.out.println(file);</span></span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><h3 id="web开发三层架构"><a href="#web开发三层架构" class="headerlink" title="web开发三层架构"></a>web开发三层架构</h3><p>在上面的代码中，一个controller函数通常要做三件事：数据访问、逻辑处理、接收和响应。不管是三部分中那一部分出了问题，都要修改controller，这违背了单一职责原则。可以把三件事分开，得到三层架构。</p>
<ul>
<li>controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据。</li>
<li>service：业务逻辑层，处理具体的业务逻辑。</li>
<li>dao：数据访问层(Data Access Object)（持久层），负责数据访问操作，包括数据的增、删、改、查。</li>
</ul>
<p>controller调用service，service调用dao</p>
<img src="/pic/三层架构.jpg" style="zoom:50%;" />

<p><strong>控制层：</strong>接收前端发送的请求，对请求进行处理，并响应数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="comment">//业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service层, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>业务逻辑层：</strong>处理具体的业务逻辑</p>
<ul>
<li>业务接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务逻辑接口（制定业务标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>业务实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务逻辑实现类（按照业务标准实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//dao层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>数据访问层：</strong>负责数据的访问操作，包含数据的增、删、改、查</p>
<ul>
<li>数据访问接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据访问层接口（制定标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据访问实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据访问实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三层架构的好处：</p>
<ol>
<li>复用性强</li>
<li>便于维护</li>
<li>利用扩展</li>
</ol>
<h3 id="内聚与耦合"><a href="#内聚与耦合" class="headerlink" title="内聚与耦合"></a>内聚与耦合</h3><ul>
<li>内聚：软件中各个<strong>功能模块内部</strong>的功能联系。<ul>
<li>分为三层架构后，每层都只完成一块工作，提高内聚</li>
</ul>
</li>
<li>耦合：衡量软件中各个<strong>层&#x2F;模块之间</strong>的依赖、关联的程度。<ul>
<li>三层架构中controller调用service对象，service调用了dao对象，高耦合</li>
</ul>
</li>
</ul>
<p>在软件开发中，追求的是高内聚、低耦合。</p>
<h3 id="解耦思路"><a href="#解耦思路" class="headerlink" title="解耦思路"></a>解耦思路</h3><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p>
<p>解决思路是：</p>
<ul>
<li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li>
<li>controller程序从容器中获取EmpService类型的对象</li>
</ul>
<p>要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p>
<ul>
<li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p>
<blockquote>
<p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p>
</blockquote>
</li>
<li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时依赖的资源，称之为依赖注入。</p>
<blockquote>
<p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p>
<p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p>
</blockquote>
</li>
</ul>
<p><strong>IOC容器中创建、管理的对象，称为：bean对象</strong></p>
<h2 id="IOC-amp-DI"><a href="#IOC-amp-DI" class="headerlink" title="IOC&amp;DI"></a>IOC&amp;DI</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>容器无需自己创建，只需要添加两个注释即可。</p>
<ol>
<li><p>删除Controller层、Service层中new对象的代码</p>
</li>
<li><p>Service层及Dao层的实现类，<strong>交给IOC容器管理</strong></p>
<ul>
<li><code>@Component</code></li>
</ul>
</li>
<li><p>为Controller及Service注入运行时依赖的对象</p>
<ul>
<li>Controller程序中注入依赖的Service层对象</li>
<li>Service程序中注入依赖的Dao层对象</li>
<li><code>@Autowired</code></li>
</ul>
</li>
</ol>
<p><strong>Controller层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Service层：</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Dao层：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h3><p>为了更好的标识IOC容器管理的bean对象到底归属于哪一层，又提供了@Component的衍生注解。当明确是哪一层时，可以使用对应的注解代替component注解</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>声明bean的基础注解</td>
<td>不属于以下三类时，用此注解</td>
</tr>
<tr>
<td>@Controller</td>
<td>@Component的衍生注解</td>
<td>标注在控制器类上</td>
</tr>
<tr>
<td>@Service</td>
<td>@Component的衍生注解</td>
<td>标注在业务类上</td>
</tr>
<tr>
<td>@Repository</td>
<td>@Component的衍生注解</td>
<td>标注在数据访问类上（由于与mybatis整合，用的少）</td>
</tr>
</tbody></table>
<p>注：@RestController &#x3D; @Controller + @ResponseBody</p>
<ul>
<li>声明bean的时候，<strong>可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写</strong>。</li>
<li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li>
</ul>
<p>前面声明bean的四大注解，要想生效，还需要能被组件扫描注解@ComponentScan扫描到。<br>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 @SpringBootApplication 中，<strong>默认扫描的范围是启动类所在包及其子包</strong>。</p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>@Autowired注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报错。</p>
<p>通过以下几种方案来解决：</p>
<ul>
<li>@Primary设置优先级</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Qualifier</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@Resource</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;empServiceB&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bean对象管理"><a href="#Bean对象管理" class="headerlink" title="Bean对象管理"></a>Bean对象管理</h3><h4 id="获取bean"><a href="#获取bean" class="headerlink" title="获取bean"></a>获取bean</h4><p>默认情况下，Spring项目启动时，会把bean都创建好放在IOC容器中。在我们需要这些bean对象时，可以使用依赖注入获取。</p>
<p>也可以通过以下方式<strong>主动获取</strong>bean。</p>
<ul>
<li><p>根据name获取bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">getBean</span><span class="params">(String name)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据类型获取bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据name和类型获取bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>要从IOC容器当中来获取到bean对象，需要<strong>先拿到IOC容器对象</strong>，想获取到IOC容器，直接将IOC容器对象注入进来就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2ApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext; <span class="comment">//IOC容器对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取bean对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//根据bean的名称获取</span></span><br><span class="line">        <span class="type">DeptController</span> <span class="variable">bean1</span> <span class="operator">=</span> (DeptController) applicationContext.getBean(<span class="string">&quot;deptController&quot;</span>);</span><br><span class="line">        System.out.println(bean1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据bean的类型获取</span></span><br><span class="line">        <span class="type">DeptController</span> <span class="variable">bean2</span> <span class="operator">=</span> applicationContext.getBean(DeptController.class);</span><br><span class="line">        System.out.println(bean2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据bean的名称 及 类型获取</span></span><br><span class="line">        <span class="type">DeptController</span> <span class="variable">bean3</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;deptController&quot;</span>, DeptController.class);</span><br><span class="line">        System.out.println(bean3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="bean作用域"><a href="#bean作用域" class="headerlink" title="bean作用域"></a>bean作用域</h4><table>
<thead>
<tr>
<th><strong>作用域</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>容器内同名称的 bean 只有一个实例（<strong>单例</strong>）（默认，绝大多数情况）</td>
</tr>
<tr>
<td>prototype</td>
<td>每次使用该 bean 时会创建新的实例（非单例）</td>
</tr>
<tr>
<td>request</td>
<td>每个请求范围内会创建新的实例（web环境中，了解）</td>
</tr>
<tr>
<td>session</td>
<td>每个会话范围内会创建新的实例（web环境中，了解）</td>
</tr>
<tr>
<td>application</td>
<td>每个应用范围内会创建新的实例（web环境中，了解）</td>
</tr>
</tbody></table>
<p>可以借助Spring中的@Scope注解来进行配置作用域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认bean的作用域为：singleton (单例)</span></span><br><span class="line"><span class="meta">@Lazy</span> <span class="comment">//延迟加载，spring默认会在项目启动时把bean都创建好放在IOC容器中</span></span><br><span class="line">	  <span class="comment">//这个注解让spring在第一次使用bean对象时，才会创建bean对象并交给ioc容器管理</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/depts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DeptController</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DeptController constructor ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h4><p>对于自定义的类，声明bean比较简单，只需要在类上加入<code>@Component</code>或其衍生注解即可。但在开发中，会使用第三方依赖提供的类，此时就不能在类上加注解。</p>
<p>比如用于解析xml文件的依赖Dom4J</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4JTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、需要自己创建一个Dom4J框架提供的解析器对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span></span><br><span class="line">                saxReader.read(<span class="string">&quot;helloworld.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时可以使用 <strong>@Bean注解</strong> 来声明第三方bean</p>
<ul>
<li>方案一：在<strong>启动类</strong>中添加@Bean注解，不推荐，会污染启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootWebConfig2Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootWebConfig2Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明第三方bean</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//自动运行方法并将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方案2：在配置类中定义@Bean标识的方法<ul>
<li>如果需要定义第三方Bean时， 通常会单独定义一个配置类，对第三方bean进行集中的配置管理</li>
<li>在方法上加上一个 <strong>@Bean注解，Spring 容器在启动的时候，它会自动的调用这个方法</strong> ，并将方法的返回值声明为Spring容器当中的Bean对象。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类  (在配置类当中对第三方bean进行集中的配置管理)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明第三方bean</span></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//将当前方法的返回值对象交给IOC容器管理, 成为IOC容器bean</span></span><br><span class="line">          <span class="comment">//通过@Bean注解的name/value属性指定bean名称, 如果未指定, 默认是方法名</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要在其中做依赖注入的操作，可以直接定义一个形参，把形参名作为对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//依赖注入，声明形参即可，会自动找到对应类型的bean对象完成分配</span></span><br><span class="line">    <span class="keyword">public</span> SAXReader <span class="title function_">saxReader</span><span class="params">(DeptService deptService)</span>&#123;</span><br><span class="line">        System.out.println(deptService);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在web案例中介绍过，springboot支持三种格式的配置文件</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
<li>application.yaml</li>
</ul>
<p>在项目开发时，推荐统一使用一种格式的配置 （yml是主流）。</p>
<p>除了支持配置文件属性配置，还支持Java<strong>系统属性</strong>和<strong>命令行参数</strong>的方式进行属性配置。</p>
<p>以上五种配置如果同时指定，<strong>优先级</strong>是什么</p>
<p>application.yaml(忽略) &lt; application.yml &lt; application.properties &lt; java系统属性 &lt; 命令行参数</p>
<h2 id="Springboot原理⭐"><a href="#Springboot原理⭐" class="headerlink" title="Springboot原理⭐"></a>Springboot原理⭐</h2><p>直接基于Spring框架进行项目的开发，会比较繁琐，主要体现在两个地方：</p>
<ol>
<li>在pom.xml中依赖配置比较繁琐，在项目开发时，需要自己去找到对应的依赖，还需要找到依赖它所配套的依赖以及对应版本，否则就会出现版本冲突问题。</li>
<li>在使用Spring框架进行项目开发时，需要在Spring的配置文件中做大量的配置，这就造成Spring框架入门难度较大，学习成本较高。</li>
</ol>
<p>因此官方又推出了一个全新的框架：SpringBoot来<strong>简化</strong>Spring框架的开发(是<strong>简化不是替代</strong>)。</p>
<p>SpringBoot框架之所以使用起来更简单更快捷，是因为SpringBoot框架底层提供了两个非常重要的功能：一个是<strong>起步依赖</strong>，一个是<strong>自动配置</strong>。</p>
<h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><p>为什么我们只需要引入一个起步依赖，其相关的所有依赖都有了呢？</p>
<p><strong>结论：起步依赖的原理就是Maven的依赖传递。</strong></p>
<h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>SpringBoot的自动配置就是当Spring容器启动后，一些<strong>配置类</strong>、<strong>bean对象</strong>就自动存入到了IOC容器中，不需要我们手动去声明，从而简化了开发，省去了繁琐的配置操作。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-Mybatis</title>
    <url>/2023/11/09/11-00-37/</url>
    <content><![CDATA[<p>MyBatis是一款优秀的持久层(Dao)框架，用于简化JDBC的开发。</p>
<span id="more"></span>

<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ol>
<li>准备工作(创建springboot工程、数据库表user、实体类User)，User中的成员变量名和user中的属性名保持一致。</li>
<li>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</li>
</ol>
<img src="/pic/mybatis依赖.jpg" style="zoom:80%;" />

<p>在resource&#x2F;application.properties中配置数据库连接信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1234</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写SQL语句(注解或XML)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">//在springboot中，相应的注释是@respository</span></span><br><span class="line"><span class="comment">//取代springboot中的UserDAO</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">//这个接口只需要定义，无需实现</span></span><br><span class="line">    <span class="comment">//在运行时，自动生成该接口的代理对象</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisQuickstartApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序中，SQL语句只是个字符串，不被idea识别，写错了也没有提示信息。</p>
<ul>
<li>可以选择SQL语句，右击选择<code>show context action</code>-&gt;<code>inject language or reference</code>-&gt;选择MySQL</li>
</ul>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>没有使用数据库连接池</p>
<ul>
<li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，<strong>每次执行SQL时都需要创建连接、销毁连接</strong>，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p>
<ul>
<li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li>
</ul>
<p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p>
<ul>
<li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li>
</ul>
<p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p>
<ul>
<li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li>
</ul>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol>
<li>资源重用</li>
<li>提升系统响应速度</li>
<li>避免数据库连接遗漏</li>
</ol>
<p>springboot默认的连接池是由Hikari追光者提供的。</p>
<h3 id="切换连接池"><a href="#切换连接池" class="headerlink" title="切换连接池"></a>切换连接池</h3><p>完成以下两步操作即可：</p>
<ol>
<li>在pom.xml文件中引入依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Druid连接池依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在application.properties中引入数据库连接配置</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.druid.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.druid.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure>

<h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><h3 id="自动化生成类中方法"><a href="#自动化生成类中方法" class="headerlink" title="自动化生成类中方法"></a>自动化生成类中方法</h3><p>从数据库中查找时，需要定义和其属性一致的实体类，如果一张表有50个属性，实体类就要有50个成员变量，每个变量又有其get和set方法，会很臃肿。</p>
<p>使用lombok工具可以通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@Getter&#x2F;@Setter</td>
<td>为所有的属性提供get&#x2F;set方法</td>
</tr>
<tr>
<td>@ToString</td>
<td>会给类自动生成易阅读的  toString 方法</td>
</tr>
<tr>
<td>@EqualsAndHashCode</td>
<td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td>
</tr>
<tr>
<td>@Data</td>
<td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td>
</tr>
<tr>
<td>@NoArgsConstructor</td>
<td>为实体类生成无参的构造器方法</td>
</tr>
<tr>
<td>@AllArgsConstructor</td>
<td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td>
</tr>
</tbody></table>
<p>第1步：在pom.xml文件中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第2步：在实体类上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p>
</blockquote>
<h3 id="自动化生成日志变量"><a href="#自动化生成日志变量" class="headerlink" title="自动化生成日志变量"></a>自动化生成日志变量</h3><p>使用@slf4j标签，可以省略定义日志变量的步骤，自动生成log变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="comment">//private static Logger log = LoggerFactory.getLogger(DeptController.class);</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/depts&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有部门数据&quot;</span>);</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="基础增删改查"><a href="#基础增删改查" class="headerlink" title="基础增删改查"></a>基础增删改查</h2><p>Mybatis使用SQL语句有两种方式：<strong>注解</strong>和<strong>XML配置文件</strong>。</p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>Mybatis自带日志，默认不开启，可以在<code>application.properties</code>开启，并指定输出到控制台。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定mybatis输出日志的位置,输出控制台</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><span class="comment">//使用#&#123;key&#125;方式获取方法中的参数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，即可以不和形参保持一致，如：#{value}。但是建议保持名字一致。</li>
</ul>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用删除方法</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h3><ul>
<li><code>#&#123;...&#125;</code><ul>
<li>执行时会被？替代，生成的是预编译sql语句</li>
<li>在参数传递时使用</li>
</ul>
</li>
<li><code>$&#123;...&#125;</code><ul>
<li><strong>拼接</strong>SQL语句，存在SQL注入的风险</li>
<li>对表名、列表进行动态设置时使用</li>
</ul>
</li>
</ul>
<h3 id="预编译SQL"><a href="#预编译SQL" class="headerlink" title="预编译SQL"></a>预编译SQL</h3><p>打开日志，上面的程序执行时会输出执行了哪条sql语句，结果如下：</p>
<p><img src="/pic/sql%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C.jpg"></p>
<p>其中，？是<strong>参数占位符</strong>，最终执行时会用实际参数替换掉参数占位符执行，<strong>生成的是预编译的SQL语句</strong>。这样设计的意义在于：</p>
<ul>
<li>性能好<ul>
<li>数据库在收到sql语句后并不是立刻执行，要先经过<strong>语法解析检查-&gt;优化-&gt;编译步骤</strong>，然后才执行，数据库会把这三个步骤缓存起来，碰到相同的语句就直接从缓存中查找，可以直接执行。</li>
<li>因此，如果直接把参数填进去，每当id不同会被认为是不同的语句，从而多次执行前面的步骤。利用预编译，不管id为多少，只需要编译一次就可以直接执行。</li>
<li><img src="/pic/SQL预编译.jpg" style="zoom:67%;" /></li>
</ul>
</li>
<li>更安全(防止SQL注入)<ul>
<li>SQL注入是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。 </li>
<li>比如用户登录时需要校验用户名和密码，对应的sql语句为<code>select * from user where username = &#39;aa&#39; and password = &#39;123&#39;</code>，但如果在密码输入框输入：<code>&#39;or&#39;1&#39;=&#39;</code>，此时sql语句为<code>select * from user where username = &#39;aa&#39; and password =&#39;&#39;or&#39;1&#39;=&#39;1&#39;</code>，必定登录成功。</li>
<li>如果使用预编译，会把输入的字符串作为一整个参数传给password，避免了这个问题。</li>
</ul>
</li>
</ul>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values(#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>; <span class="comment">//将多个参数封装到对象中</span></span><br></pre></td></tr></table></figure>

<h4 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h4><p>向数据库插入数据时，主键往往是自增的，但有时需要获得主键的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Options(keyProperty = &quot;id&quot;, useGeneratedKeys = true)</span></span><br><span class="line"><span class="comment">//获取主键值并且将其赋值给emp的id属性</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values(#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询，将返回的数据封装到emp对象</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>

<p>注：在封装时，需要实体类属性名 和 数据库表查询返回的字段名一致，mybatis才会自动封装。</p>
<p>但是，数据库中的字段名通常用下划线，而类属性名通常用驼峰表示，两者很难一致。</p>
<p>解决方法有三种</p>
<h4 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id deptId, create_time createTime, update_time updateTime from emp where id = #&#123;id&#125; &quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="手动结果映射"><a href="#手动结果映射" class="headerlink" title="手动结果映射"></a>手动结果映射</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from emp where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="开启驼峰命名√"><a href="#开启驼峰命名√" class="headerlink" title="开启驼峰命名√"></a>开启驼峰命名√</h4><p>如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启驼峰命名自动映射，即从数据库字段名 a_column 映射到Java 属性名 aColumn。</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><img src="/pic/sql查询.jpg" style="zoom:67%;" />

<h2 id="XML配置文件使用SQL"><a href="#XML配置文件使用SQL" class="headerlink" title="XML配置文件使用SQL"></a>XML配置文件使用SQL</h2><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>确保方法能找到对应的SQL语句</p>
<ul>
<li>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）。</li>
<li>XML映射文件的namespace属性为Mapper接口全限定名一致。</li>
<li>XML映射文件中sql语句的id与Mapper 接口中的方法名一致，并保持返回类型一致。<img src="/pic/xml配置sql.jpg" style="zoom:67%;" /></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根标签--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">              and gender = #&#123;gender&#125;</span><br><span class="line">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="两种方法的使用场景"><a href="#两种方法的使用场景" class="headerlink" title="两种方法的使用场景"></a>两种方法的使用场景</h3><p>注解适合在SQL语句简单时使用，当SQL语句复杂时建议使用XML配置文件来保证代码的可维护性。</p>
<h3 id="MybatisX插件"><a href="#MybatisX插件" class="headerlink" title="MybatisX插件"></a>MybatisX插件</h3><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><ul>
<li>点击icon实现方法和xml文件中SQL语句的关联跳转</li>
</ul>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><ul>
<li>自动在XML文件中生成对应方法的配置信息</li>
</ul>
<h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。比如查询功能，用户可以根据id查，也可以根据name查，这是不同的SQL语句。</p>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where</span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                 name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                 and gender = #&#123;gender&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是在拼接时会出现问题，如果name为空，gender前面会多一个and</p>
<h4 id="where"><a href="#where" class="headerlink" title="where"></a>where</h4><p>只会在子元素有内容的情况下才插入where子句，自动去除多余的and和or</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br><span class="line">        select * from emp</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">             &lt;!-- <span class="keyword">if</span>做为where标签的子元素 --&gt;</span><br><span class="line">             &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">                 and name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">             &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">             &lt;<span class="keyword">if</span> test=<span class="string">&quot;gender != null&quot;</span>&gt;</span><br><span class="line">                 <span class="type">and</span> <span class="variable">gender</span> <span class="operator">=</span> #&#123;gender&#125;</span><br><span class="line">             &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">             &lt;<span class="keyword">if</span> test=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        order by update_time desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set标签在update中相当于select中的where标签，可以自动去除多余的逗号。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--更新操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update emp</span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签，代替update语句中的set关键字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">            username=#&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name=#&#123;name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            gender=#&#123;gender&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span></span><br><span class="line">            image=#&#123;image&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>用于批量操作，如批量删除。</p>
<p>SQL语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from emp where id in (1,2,3);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from emp where id in</span><br><span class="line">    <span class="comment">&lt;!--collection:遍历的集合--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--item:遍历出来的元素--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--separator:分隔符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="sql和include"><a href="#sql和include" class="headerlink" title="sql和include"></a>sql和include</h3><p>项目中遍布SQL语句，如果有一张表中的字段名被修改了，所有的语句都要改，复用性很差。</p>
<p>可以使用sql标签把相同的SQL语句封装起来，需要调用时用include标签调用</p>
<p>SQL片段： 抽取重复的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line"> 	select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用时需要指定id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-Maven</title>
    <url>/2023/11/05/11-00-37/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>apache旗下的一个开源项目，是一款用于<strong>管理和构建java项目</strong>的工具。基于项目对象模型(POM)的概念，通过一小段描述信息来管理项目的构建。</p>
<span id="more"></span>

<!--toc-->

<ul>
<li><p>方便的依赖管理</p>
<ul>
<li>之前需要手动导入jar包，很麻烦。maven可以方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题，在配置文件中声明依赖的包，maven会去仓库查找这个jar包并下载，像flutter的配置一样。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>统一的项目结构</p>
<ul>
<li>在不同的IDE中生成java项目会提供不同的项目结构，使用maven会生成标准统一的项目结构。</li>
<li><img src="/pic/maven%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.jpg"></li>
</ul>
</li>
<li><p>标准的项目构建流程</p>
<ul>
<li>标准跨平台（Linux、Windows、MacOS）的自动化项目构建方式，快捷完成编译测试打包发布等一系列任务</li>
</ul>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>解压安装包 apache-maven-3.6.1-bin.zip 。</p>
</li>
<li><p>配置本地仓库：修改 conf&#x2F;settings.xml 中的 <localRepository> 为一个指定目录。</p>
<ul>
<li><localRepository>E:\develop\apache-maven-3.6.1\mvn_repo</localRepository></li>
</ul>
</li>
<li><p>配置阿里云私服(中央仓库下载慢)：修改 conf&#x2F;settings.xml 中的 <mirrors>标签，为其添加如下子标签：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置环境变量: MAVEN_HOME 为maven的解压目录，并将其bin目录加入PATH环境变量。</li>
</ul>
<h2 id="配置maven环境"><a href="#配置maven环境" class="headerlink" title="配置maven环境"></a>配置maven环境</h2><ul>
<li>选择 IDEA中 File –&gt; Settings –&gt; Build,Execution,Deployment –&gt; Build Tools –&gt; Maven</li>
<li>设置 IDEA 使用本地安装的 Maven，并修改配置文件及本地仓库路径</li>
</ul>
<h2 id="创建maven项目"><a href="#创建maven项目" class="headerlink" title="创建maven项目"></a>创建maven项目</h2><img src="/pic/创建maven项目.jpg" style="zoom:67%;" />

<h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><p>Maven 中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。使用坐标来定义项目或引入项目中需要的依赖。</p>
<ul>
<li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li>
<li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li>
<li>version：定义当前项目版本号</li>
</ul>
<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目."></a>导入项目.</h3><p>右侧的maven选项卡中点击+，选中要导入项目的<code>pom.xml</code>即可。</p>
<img src="/pic/导入maven项目.jpg" style="zoom:50%;" />

<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<ul>
<li>在 pom.xml 中编写 <dependencies> 标签</li>
<li>在 <dependencies> 标签中 使用 <dependency> 引入坐标</li>
<li>定义坐标的 groupId，artifactId，version</li>
<li>点击刷新按钮，引入最新加入的坐标</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><ul>
<li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li>
<li>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</li>
</ul>
<p>如果项目A依赖了项目B，项目B依赖了jarC，这时由于依赖传递，项目A会默认依赖jarC。但如果项目A不需要依赖jarC，也可以去除</p>
<h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>主动断开依赖的资源，被排除的资源无需指定版本。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖的jar包，默认情况下，可以在任何地方使用。可以通过 <scope>&lt;&#x2F; scope &gt; 设置其作用范围。<br>作用范围：</p>
<ul>
<li>主程序范围有效。（main文件夹范围内）</li>
<li>测试程序范围有效。（test文件夹范围内）</li>
<li>是否参与打包运行。（package指令范围内）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>scope值</th>
<th><strong>主程序</strong></th>
<th><strong>测试程序</strong></th>
<th><strong>打包（运行）</strong></th>
<th>范例</th>
</tr>
</thead>
<tbody><tr>
<td>compile（默认）</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>log4j</td>
</tr>
<tr>
<td>test</td>
<td>-</td>
<td>Y</td>
<td>-</td>
<td>junit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>-</td>
<td>Y</td>
<td>Y</td>
<td>jdbc驱动</td>
</tr>
</tbody></table>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Maven的生命周期就是为了对所有的maven项目构建过程进行抽象和统一。</p>
<p>Maven中有3套相互独立的生命周期：</p>
<ul>
<li>clean：清理工作。</li>
<li>default：核心工作，如：编译、测试、打包、安装、部署等。</li>
<li>site：生成报告、发布站点等。</li>
</ul>
<p>每套生命周期包含一些阶段（phase），阶段是有顺序的，后面的阶段依赖于前面的阶段。</p>
<img src="/pic/maven生命周期.jpg" style="zoom: 80%;" />

<p>重点关注其中五个：</p>
<ul>
<li>clean：移除上一次构建生成的文件</li>
<li>compile：编译项目源代码</li>
<li>test：使用合适的单元测试框架运行测试(junit)</li>
<li>package：将编译后的文件打包，如：jar、war等</li>
<li>install：安装项目到本地仓库</li>
</ul>
<p>如果想跳过某个前面的阶段，只运行后面的阶段，可以选中要跳过的阶段，点击maven选项卡中的小闪电icon禁掉。</p>
<h1 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h1><h2 id="分模块设计与开发"><a href="#分模块设计与开发" class="headerlink" title="分模块设计与开发"></a>分模块设计与开发</h2><p>如果项目不分模块，所有的业务代码都写在一个 Java 项目中。<strong>不方便项目的维护和管理、项目中的通用组件难以复用。</strong></p>
<h3 id="分模块设计"><a href="#分模块设计" class="headerlink" title="分模块设计"></a>分模块设计</h3><p>分模块之后，可以将相关功能的代码放在同一个模块当中。而为了组件的复用，我们也可以将项目当中的实体类、工具类以及我们定义的通用的组件都单独的抽取到一个模块当中。</p>
<p>如果我们需要用到另外一个模块的功能，直接依赖模块就可以了。比如商品模块、搜索模块、购物车订单模块都需要依赖于通用组件当中封装的一些工具类，我只需要引入通用组件的坐标就可以了。</p>
<p><strong>分模块设计就是将项目按照功能&#x2F;结构拆分成若干个子模块，方便项目的管理维护、拓展，也方便模块键的相互调用、资源共享。</strong></p>
<p><strong>分模块设计需要先针对模块功能进行设计，再进行编码。</strong></p>
<img src="/pic/分模块设计.png" style="zoom:80%;" />

<p>引入自定义的工具类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在多模块设计中，如果多个模块都引入了相同的依赖，需要在每个模块中分别引入，很繁琐。可以用继承来解决。</p>
<p>继承描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。简化依赖配置、统一管理依赖。</p>
<p>创建一个父工程 tlias-parent ，然后让其他继承这个父工程 。 然后再将各个模块中都共有的依赖，都提取到父工程 tlias-parent中进行配置，只要子工程继承了父工程，依赖它也会继承下来，这样就无需在各个子工程中进行配置了。</p>
<h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><p>所有springboot项目都有一个统一的父工程，就是spring-boot-starter-parent。 与java语言类似，Maven不支持多继承，一个maven项目只能继承一个父工程，如果继承了spring-boot-starter-parent，就没法继承我们自己定义的父工程 tlias-parent了。</p>
<p>Java虽然不支持多继承，但是可以支持多重继承，比如：A 继承 B， B 继承C。 那在Maven中也是支持多重继承的。所以呢，我们就可以让 我们自己创建的三个模块，都继承tlias-parent，而tlias-parent 再继承 spring-boot-starter-parent，就可以了。</p>
<img src="/pic/maven继承.png" style="zoom:80%;" />

<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>创建maven模块 tlias-parent ，该工程为父工程，设置<strong>打包方式为pom</strong>(默认jar)。</p>
<blockquote>
<p> jar：普通模块打包，springboot项目基本都是jar包（内嵌tomcat运行）</p>
<p>war：普通web程序打包，需要部署在外部的tomcat服务器中运行(早期SSM)</p>
<p>pom：父工程或聚合工程，<strong>该模块不写代码，仅进行依赖管理</strong></p>
</blockquote>
<ul>
<li>父工程tlias-parent的pom.xml文件配置如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子工程的pom.xml文件中，配置继承关系。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../tlias-parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tlias-utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/pic/maven继承工程结构.png" style="zoom:80%;" />

<h3 id="版本锁定"><a href="#版本锁定" class="headerlink" title="版本锁定"></a>版本锁定</h3><p>还有一部分依赖，并不是各个模块都共有的，可能只是其中的一小部分模块中使用到了这个依赖。这个依赖，我们不会直接配置在父工程 tlias-parent中，而是哪个模块需要，就在哪个模块中配置。</p>
<p>由于是一个项目中的多个模块，我们要使用的同一个依赖的版本要一致，这样便于项目依赖的统一管理。</p>
<p><strong>如果项目拆分的模块比较多，每一次更换版本，我们都得找到这个项目中的每一个模块，一个一个的更改很容易就会出现，遗漏掉一个模块，忘记更换版本的情况。</strong></p>
<p>可以在父工程的pom文件中通过 <code>&lt;dependencyManagement&gt;</code> 来统一管理依赖版本。</p>
<p>父工程：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一管理依赖版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JWT令牌--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子工程：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JWT令牌--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子工程要使用这个依赖，还是需要引入的，只是此时就无需指定 <code>&lt;version&gt;</code> 版本号了，父工程统一管理。变更依赖版本，只需在父工程中统一变更。</p>
<p>现在再来看父工程中的依赖，各个依赖的<strong>版本号都是零散分布</strong>的，还是不便于管理。可以用自定义属性将父工程中依赖的版本号进行集中管理。</p>
<p>自定义属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jjwt.version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">jjwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>3.15.1<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用时需要引用属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--引用属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>项目打包时，maven会从<strong>本地仓库</strong>中来查找tlias-parent父工程，以及它所依赖的模块tlias-pojo、tlias-utils，而本地仓库目前是没有这几个依赖的。所以，我们在打包tlias-web-management 模块前，需要将 tlias-parent、tlias-pojo、tlias-utils分别执行install生命周期安装到maven的本地仓库，然后再针对于 tlias-web-management 模块执行package进行打包操作。</p>
<p>但模块之间的依赖关系有时错综复杂，这样很繁琐。通过maven的聚合就可以轻松实现项目的一键构建（清理、编译、测试、打包、安装等）。</p>
<p><img src="/pic/maven%E8%81%9A%E5%90%88.png"></p>
<ul>
<li><strong>聚合：</strong>将多个模块组织成一个整体，同时进行项目的构建。</li>
<li><strong>聚合工程：</strong>一个不具有业务功能的“空”工程(有且仅有一个pom文件) ，一般来说，继承关系中的父工程与聚合关系中的聚合工程是同一个</li>
<li><strong>作用：</strong>快速构建项目（无需根据依赖关系手动构建，直接在聚合工程上构建即可）</li>
</ul>
<h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><p>在聚合工程中通过 <code>&lt;moudules&gt;</code> 设置当前聚合工程所包含的子模块的名称。我们可以在 tlias-parent中，添加如下配置，来指定当前聚合工程，需要聚合的模块：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--聚合其他模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-utils<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../tlias-web-management<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那此时，我们要进行编译、打包、安装操作，就无需在每一个模块上操作了。只需要<strong>在聚合工程上统一进行操作</strong>就可以了。</p>
<h2 id="继承vs聚合"><a href="#继承vs聚合" class="headerlink" title="继承vs聚合"></a>继承vs聚合</h2><ul>
<li><p><strong>作用</strong></p>
<ul>
<li><p>聚合用于快速构建项目</p>
</li>
<li><p>继承用于简化依赖配置、统一管理依赖</p>
</li>
</ul>
</li>
<li><p><strong>相同点：</strong></p>
<ul>
<li><p>聚合与继承的pom.xml文件打包方式均为pom，通常将两种关系制作到同一个pom文件中</p>
</li>
<li><p>聚合与继承均属于设计型模块，并无实际的模块内容</p>
</li>
</ul>
</li>
<li><p><strong>不同点：</strong></p>
<ul>
<li><p>聚合是在聚合工程中配置关系，聚合可以感知到参与聚合的模块有哪些</p>
</li>
<li><p>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</p>
</li>
</ul>
</li>
</ul>
<h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><p>maven查找依赖的过程是：先本地仓库，再私服仓库(如果有)，最后中央仓库。公司内部会有自己的私服，存放一些公共模块，基于私服进行资源的共享。</p>
<p><strong>私服：</strong>是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p>
<p><strong>私服仓库说明</strong></p>
<ul>
<li>RELEASE：存储自己开发的RELEASE发布版本的资源。</li>
<li>SNAPSHOT：存储自己开发的SNAPSHOT发布版本的资源。</li>
<li>Central：存储的是从中央仓库下载下来的依赖。</li>
</ul>
<p><strong>项目版本说明</strong></p>
<ul>
<li>RELEASE(发布版本)：功能趋于稳定、当前更新停止，可以用于发行的版本，存储在私服中的RELEASE仓库中。</li>
<li>SNAPSHOT(快照版本)：功能不稳定、尚处于开发中的版本，即快照版本，存储在私服的SNAPSHOT仓库中。</li>
</ul>
<h3 id="资源上传和下载"><a href="#资源上传和下载" class="headerlink" title="资源上传和下载"></a>资源上传和下载</h3><p>做三步配置</p>
<ul>
<li><p>在maven的配置文件中配置访问私服的用户名、密码，maven安装目录下的conf&#x2F;settings.xml中的servers中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span> <span class="comment">&lt;!--找到servers标签--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>在maven的配置文件中配置连接私服的地址(url地址)，下载资源时使用。maven安装目录下的conf&#x2F;settings.xml中的mirrors、profiles中配置</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>allow-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            	<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在项目的pom.xml文件中配置上传资源的位置(url地址)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- release版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- snapshot版本的发布地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.150.101:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在tlias-parent中执行<strong>deploy</strong>生命周期，将项目发布到私服仓库中。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-外卖项目</title>
    <url>/2023/11/21/11-00-37/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>开发环境</p>
<p>测试环境</p>
<p>生产环境，即线上环境，正式提供对外服务的环境。</p>
<span id="more"></span>

<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><img src="/pic/技术选型.png" style="zoom: 50%;" />

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>前端的代码已提供，导入使用即可。后端工程基于maven构建，并且进行分模块开发。共三个子模块。</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>sky-take-out</td>
<td>maven父工程，统一管理依赖版本，聚合其他子模块</td>
</tr>
<tr>
<td>2</td>
<td>sky-common</td>
<td>子模块，存放公共类，例如：工具类、常量类、异常类等</td>
</tr>
<tr>
<td>3</td>
<td>sky-pojo</td>
<td>子模块，存放实体类、VO、DTO等</td>
</tr>
<tr>
<td>4</td>
<td>sky-server</td>
<td>子模块，后端服务，存放配置文件、Controller、Service、Mapper等</td>
</tr>
</tbody></table>
<p>common模块的每个包的作用：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>constant</td>
<td>存放相关常量类</td>
</tr>
<tr>
<td>context</td>
<td>存放上下文类</td>
</tr>
<tr>
<td>enumeration</td>
<td>项目的枚举类存储</td>
</tr>
<tr>
<td>exception</td>
<td>存放自定义异常类</td>
</tr>
<tr>
<td>json</td>
<td>处理json转换的类</td>
</tr>
<tr>
<td>properties</td>
<td>存放SpringBoot相关的配置属性类</td>
</tr>
<tr>
<td>result</td>
<td>返回结果类的封装</td>
</tr>
<tr>
<td>utils</td>
<td>常用工具类</td>
</tr>
</tbody></table>
<p>sky-pojo模块的每个包的作用：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Entity</td>
<td>实体，通常和数据库中的表对应</td>
</tr>
<tr>
<td>DTO</td>
<td>数据传输对象，通常用于程序中各层之间传递数据</td>
</tr>
<tr>
<td>VO</td>
<td>视图对象，为前端展示数据提供的对象</td>
</tr>
<tr>
<td>POJO</td>
<td>普通Java对象，只有属性和对应的getter和setter</td>
</tr>
</tbody></table>
<p><strong>Entity、DTO和VO都属于POJO。</strong></p>
<p>server模块的每个包的作用：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>config</td>
<td>存放配置类</td>
</tr>
<tr>
<td>controller</td>
<td>存放controller类</td>
</tr>
<tr>
<td>interceptor</td>
<td>存放拦截器类</td>
</tr>
<tr>
<td>mapper</td>
<td>存放mapper接口</td>
</tr>
<tr>
<td>service</td>
<td>存放service类</td>
</tr>
<tr>
<td>SkyApplication</td>
<td>启动类</td>
</tr>
</tbody></table>
<h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>按照规范定义接口和相关信息，就能<strong>生成接口文档</strong>，以及<strong>在线接口调试</strong>页面。</p>
<p>Knife4j是为MVC框架集成Swagger生成api文档的增强解决方案。</p>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol>
<li><p>在pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置类中加入 knife4j 相关配置</p>
<p>WebMvcConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">        .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">        .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(apiInfo)</span><br><span class="line">        .select()</span><br><span class="line">        <span class="comment">//指定包，会自动扫描其中的类，以生成接口</span></span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> docket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置静态资源映射，否则接口文档页面无法访问</p>
<p>WebMvcConfiguration.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 设置静态资源映射</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>Yapi 是设计阶段使用的工具，管理和维护接口</p>
<p>Swagger 在开发阶段使用的框架，帮助后端开发人员做后端的接口测试</p>
<h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><p>注解可以控制生成的接口文档，使<strong>接口文档拥有更好的可读性</strong>，常用注解如下：</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@Api</td>
<td>用在类上，例如Controller，表示对类的说明</td>
</tr>
<tr>
<td>@ApiModel</td>
<td>用在类上，例如entity、DTO、VO</td>
</tr>
<tr>
<td>@ApiModelProperty</td>
<td>用在属性上，描述属性信息</td>
</tr>
<tr>
<td>@ApiOperation</td>
<td>用在方法上，例如Controller的方法，说明方法的用途、作用</td>
</tr>
</tbody></table>
<h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p><strong>nginx 反向代理</strong>，就是将前端发送的动态请求由 nginx 转发到后端服务器</p>
<h3 id="提高访问速度"><a href="#提高访问速度" class="headerlink" title="提高访问速度"></a>提高访问速度</h3><p>因为nginx本身可以进行缓存，如果访问的同一接口，并且做了数据缓存，nginx就直接可把数据返回，不需要真正地访问服务端，从而提高访问速度。</p>
<h3 id="进行负载均衡"><a href="#进行负载均衡" class="headerlink" title="进行负载均衡"></a>进行负载均衡</h3><p>所谓负载均衡,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器。</p>
<h3 id="保证后端服务安全"><a href="#保证后端服务安全" class="headerlink" title="保证后端服务安全"></a>保证后端服务安全</h3><p>因为一般后台服务地址不会暴露，所以使用浏览器不能直接访问，可以把nginx作为请求访问的入口，请求到达nginx后转发到具体的服务中，从而保证后端服务的安全。</p>
<h3 id="反向代理配置方式"><a href="#反向代理配置方式" class="headerlink" title="反向代理配置方式"></a>反向代理配置方式</h3><p>在<code>conf/nginx.conf</code>中配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /api/&#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/admin/; <span class="comment">#反向代理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>proxy_pass：</strong>该指令是用来设置代理服务器的地址，可以是主机名称，IP地址加端口号等形式。</p>
<p>如上代码的含义是：监听80端口号， 然后当我们访问 <a href="http://localhost/..%E8%BF%99%E6%A0%B7%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%AE%83%E4%BC%9A%E9%80%9A%E8%BF%87">http://localhost:80/api/../..这样的接口的时候，它会通过</a> location &#x2F;api&#x2F; {} 这样的反向代理到 <a href="http://localhost:8080/admin/%E4%B8%8A%E6%9D%A5%E3%80%82">http://localhost:8080/admin/上来。</a></p>
<h3 id="负载均衡配置方式"><a href="#负载均衡配置方式" class="headerlink" title="负载均衡配置方式"></a>负载均衡配置方式</h3><p>在nginx.conf中配置</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /api/&#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://webservers/admin;<span class="comment">#负载均衡</span></span><br><span class="line">        //平均转发到这一组服务器上</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>upstream：</strong>如果代理服务器是一组服务器的话，我们可以使用upstream指令配置后端服务器组。</p>
<p>如上代码的含义是：监听80端口号， 然后当我们访问 <a href="http://localhost/..%E8%BF%99%E6%A0%B7%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%AE%83%E4%BC%9A%E9%80%9A%E8%BF%87">http://localhost:80/api/../..这样的接口的时候，它会通过</a> location &#x2F;api&#x2F; {} 这样的反向代理到 <a href="http://webservers/admin%EF%BC%8C%E6%A0%B9%E6%8D%AEwebservers%E5%90%8D%E7%A7%B0%E6%89%BE%E5%88%B0%E4%B8%80%E7%BB%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%A0%B9%E6%8D%AE%E8%AE%BE%E7%BD%AE%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5(%E9%BB%98%E8%AE%A4%E6%98%AF%E8%BD%AE%E8%AF%A2)%E8%BD%AC%E5%8F%91%E5%88%B0%E5%85%B7%E4%BD%93%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82">http://webservers/admin，根据webservers名称找到一组服务器，根据设置的负载均衡策略(默认是轮询)转发到具体的服务器。</a></p>
<p><strong>注：</strong>upstream后面的名称可自定义，但要上下保持一致。</p>
<h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>默认方式</td>
</tr>
<tr>
<td>weight</td>
<td>权重方式，默认为1，权重越高，被分配的客户端请求就越多</td>
</tr>
<tr>
<td>ip_hash</td>
<td>依据ip分配方式，这样每个访客可以固定访问一个后端服务</td>
</tr>
<tr>
<td>least_conn</td>
<td>依据最少连接方式，把请求优先分配给连接数少的后端服务</td>
</tr>
<tr>
<td>url_hash</td>
<td>依据url分配方式，这样相同的url会被分配到同一个后端服务</td>
</tr>
<tr>
<td>fair</td>
<td>依据响应时间方式，响应时间短的服务将会被优先分配</td>
</tr>
</tbody></table>
<p>具体配置方式：</p>
<p><strong>轮询：</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>weight:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span> weight=<span class="number">90</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span> weight=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ip_hash:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>least_conn:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>url_hash:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    <span class="attribute">hash</span> &amp;request_uri;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>fair:</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>前后端交互时，有时需要userID参数，前端不会传递该参数，后端可以从前端传递的jwt中解析出该参数。但是jwt由拦截器或过滤器校验，如何传递到controller层呢？</p>
<p>ThreadLocal 是Thread的局部变量，为<strong>每个线程提供单独一份存储空间</strong>，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</p>
<p>客户端发起的每一次请求，Tomcat服务器都会分配一个线程，因此每一次请求都有一份独立的存储空间。每一次请求都会验证jwt，因此可以在验证时设置，需要用时返回。</p>
<p><strong>常用方法：</strong></p>
<ul>
<li>public void set(T value) 	设置当前线程的线程局部变量的值</li>
<li>public T get() 		返回当前线程所对应的线程局部变量的值</li>
<li>public void remove()        移除当前线程的线程局部变量</li>
</ul>
<img src="/pic/threadlocal.png" style="zoom:80%;" />

<h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><p>Java中通常使用LocalDateTime来存储时间，这样时间变量不能直接返回给前端，需要做格式化。</p>
<h3 id="方法一：注解"><a href="#方法一：注解" class="headerlink" title="方法一：注解"></a>方法一：注解</h3><p>在每个需要转换的属性上加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：扩展消息转换器"><a href="#方法二：扩展消息转换器" class="headerlink" title="方法二：扩展消息转换器"></a>方法二：扩展消息转换器</h3><p>在WebMvcConfiguration中扩展SpringMVC的消息转换器，统一对日期类型进行格式处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扩展Spring MVC框架的消息转化器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;扩展消息转换器...&quot;</span>);</span><br><span class="line">    <span class="comment">//创建一个消息转换器对象</span></span><br><span class="line">    <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//需要为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span></span><br><span class="line">    converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">    <span class="comment">//将自己的消息转化器加入容器中</span></span><br><span class="line">    converters.add(<span class="number">0</span>,converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对象转换器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="comment">//public static final String DEFAULT_DATE_TIME_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h2><p>业务表中有大量公共字段</p>
<table>
<thead>
<tr>
<th><strong>序号</strong></th>
<th><strong>字段名</strong></th>
<th><strong>含义</strong></th>
<th><strong>数据类型</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>create_time</td>
<td>创建时间</td>
<td>datetime</td>
</tr>
<tr>
<td>2</td>
<td>create_user</td>
<td>创建人id</td>
<td>bigint</td>
</tr>
<tr>
<td>3</td>
<td>update_time</td>
<td>修改时间</td>
<td>datetime</td>
</tr>
<tr>
<td>4</td>
<td>update_user</td>
<td>修改人id</td>
<td>bigint</td>
</tr>
</tbody></table>
<p>并且在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。<strong>操作十分一致</strong></p>
<p><strong>可以使用AOP来对其统一处理，实现功能增强。</strong></p>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul>
<li>自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</li>
<li>自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</li>
<li>在 Mapper 的方法上加入 AutoFill 注解</li>
</ul>
<h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p>
<p><strong>HttpClient作用：</strong></p>
<ul>
<li>发送HTTP请求</li>
<li>接收响应数据</li>
</ul>
<p><strong>应用场景：</strong></p>
<p>当我们在使用扫描支付、查看地图、获取验证码、查看天气等功能时，都需要使用访问这些服务的接口，通过http请求接受响应数据，可以通过HttpClient实现。</p>
<p><strong>maven坐标：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>HttpClient的核心API：</strong></p>
<ul>
<li>HttpClient：Http客户端对象类型，使用该类型对象可发起Http请求。</li>
<li>HttpClients：可认为是构建器，可创建HttpClient对象。</li>
<li>CloseableHttpClient：实现类，实现了HttpClient接口。</li>
<li>HttpGet：Get方式请求类型。</li>
<li>HttpPost：Post方式请求类型。</li>
</ul>
<h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>通过httpclient发送GET方式的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送请求，接受响应结果</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取服务端返回的状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span> + body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过httpclient发送POST方式的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// 创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装请求参数</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">    <span class="comment">//指定请求编码方式</span></span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//数据格式</span></span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析返回结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span> + statusCode);</span><br><span class="line"></span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">    System.out.println(<span class="string">&quot;响应数据为：&quot;</span> + body);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信登陆"><a href="#微信登陆" class="headerlink" title="微信登陆"></a>微信登陆</h2><img src="pic\微信登陆.png" style="zoom: 80%;" />

<p>对于后端程序而言，调用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/login/auth.code2Session.html">auth.code2Session</a> 接口，换取 <strong>用户唯一标识 OpenID</strong>和 <strong>会话密钥 session_key</strong>。</p>
<h3 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GET https://api.weixin.qq.com/sns/jscode2session </span><br></pre></td></tr></table></figure>

<h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">appid</td>
<td align="left">string</td>
<td align="left">是</td>
<td align="left">小程序 appId</td>
</tr>
<tr>
<td align="left">secret</td>
<td align="left">string</td>
<td align="left">是</td>
<td align="left">小程序 appSecret</td>
</tr>
<tr>
<td align="left">js_code</td>
<td align="left">string</td>
<td align="left">是</td>
<td align="left">登录时获取的 code，可通过<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open-api/login/wx.login.html">wx.login</a>获取</td>
</tr>
<tr>
<td align="left">grant_type</td>
<td align="left">string</td>
<td align="left">是</td>
<td align="left">授权类型，此处只需填写 authorization_code</td>
</tr>
</tbody></table>
<h3 id="返回参数"><a href="#返回参数" class="headerlink" title="返回参数"></a>返回参数</h3><table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">session_key</td>
<td align="left">string</td>
<td align="left">会话密钥</td>
</tr>
<tr>
<td align="left">unionid</td>
<td align="left">string</td>
<td align="left">用户在开放平台的唯一标识符，若当前小程序已绑定到微信开放平台账号下会返回，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/union-id.html">UnionID 机制说明</a>。</td>
</tr>
<tr>
<td align="left">errmsg</td>
<td align="left">string</td>
<td align="left">错误信息</td>
</tr>
<tr>
<td align="left">openid</td>
<td align="left">string</td>
<td align="left">用户唯一标识</td>
</tr>
<tr>
<td align="left">errcode</td>
<td align="left">int32</td>
<td align="left">错误码</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用微信接口服务，获取微信用户的openid</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getOpenid</span><span class="params">(String code)</span>&#123;</span><br><span class="line">    <span class="comment">//调用微信接口服务，获得当前微信用户的openid</span></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;appid&quot;</span>,weChatProperties.getAppid());</span><br><span class="line">    map.put(<span class="string">&quot;secret&quot;</span>,weChatProperties.getSecret());</span><br><span class="line">    map.put(<span class="string">&quot;js_code&quot;</span>,code);</span><br><span class="line">    map.put(<span class="string">&quot;grant_type&quot;</span>,<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> HttpClientUtil.doGet(WX_LOGIN, map);</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(json);</span><br><span class="line">    <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> jsonObject.getString(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> openid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="缓存设计和使用"><a href="#缓存设计和使用" class="headerlink" title="缓存设计和使用"></a>缓存设计和使用</h2><p>用户量多，查询压力大时，会导致页面卡顿。可以通过Redis缓存数据来减少数据库查询操作。</p>
<p>以分类下的菜品为例，可以给每个分类下的菜品保存一份缓存数据。将分类id作为key，菜品集合转为Redis字符串保存。</p>
<p>java保存到redis时会将对象序列化，以Redis的String类型存储，取出时再反序列化得到保存对象。</p>
<p>当数据库中<strong>菜品数据变更时要同步更新缓存数据</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询redis中是否存在该分类的菜品数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span>+categoryId;</span><br><span class="line">    <span class="comment">//放入redis时是什么，取出来就是什么</span></span><br><span class="line">    List&lt;DishVO&gt; list = (List&lt;DishVO&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="keyword">if</span>(list!=<span class="literal">null</span>&amp;&amp;list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//存在直接返回</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">    dish.setCategoryId(categoryId);</span><br><span class="line">    dish.setStatus(StatusConstant.ENABLE);<span class="comment">//查询起售中的菜品</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不存在时查询数据库并放入redis</span></span><br><span class="line">    list = dishService.listWithFlavor(dish);</span><br><span class="line">    redisTemplate.opsForValue().set(key,list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h3><p>Spring Cache是一个框架，实现了基于注解的缓存功能，只需要简单地加一个注解，就能实现缓存功能。基于代理技术。</p>
<p>Spring Cache 提供了一层抽象，底层可以切换不同的缓存实现，例如：</p>
<ul>
<li>EHCache</li>
<li>Caffeine</li>
<li>Redis(常用)</li>
</ul>
<p><strong>起步依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  		             <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="常用注解-1"><a href="#常用注解-1" class="headerlink" title="常用注解"></a>常用注解</h4><p>在SpringCache中提供了很多缓存操作的注解，常见的是以下的几个：</p>
<table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@EnableCaching</td>
<td>开启缓存注解功能，通常加在启动类上</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td>
</tr>
<tr>
<td>@CachePut</td>
<td>将方法的返回值放到缓存中</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>将一条或多条数据从缓存中删除</td>
</tr>
</tbody></table>
<p>在spring boot项目中，使用缓存技术只需在项目中导入相关缓存技术的依赖包，并在启动类上使用@EnableCaching开启缓存支持即可。</p>
<h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><p>微信支付包含很多产品：</p>
<img src="/pic/微信支付.png" style="zoom:67%;" />

<p>本项目选择小程序支付。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><img src="/pic/微信支付流程.png" style="zoom:67%;" />

<p><strong>JSAPI下单：</strong>商户系统调用该接口在微信支付服务后台生成预支付交易单(对应时序图的第5步)</p>
<img src="/pic/申请支付接口.png" style="zoom: 50%;" />

<p><strong>微信小程序调起支付：</strong>通过JSAPI下单接口获取到发起支付的必要参数prepay_id，然后使用微信支付提供的小程序方法调起小程序支付(对应时序图的第10步)</p>
<img src="/pic/调起支付.png" style="zoom:50%;" />

<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="保证数据安全"><a href="#保证数据安全" class="headerlink" title="保证数据安全"></a>保证数据安全</h4><p>完成微信支付有两个关键的步骤：</p>
<p><strong>第一个</strong>就是需要在商户系统当中调用微信后台的一个下单接口，就是生成预支付交易单。</p>
<p><strong>第二个</strong>就是支付成功之后微信后台会给推送消息。</p>
<p>这两个接口数据的安全性，要求其实是非常高的。</p>
<p><strong>解决：</strong>微信提供的方式就是对数据进行加密、解密、签名多种方式。要完成数据加密解密，需要提前准备相应的一些文件，其实就是一些证书。</p>
<p><strong>获取微信支付平台证书、商户私钥文件：</strong></p>
<img src="/pic/微信支付证书和文件.png" style="zoom: 67%;" />

<h4 id="微信后台调用到商户系统"><a href="#微信后台调用到商户系统" class="headerlink" title="微信后台调用到商户系统"></a>微信后台调用到商户系统</h4><p>微信后台会调用到商户系统给推送支付的结果，这个调用过程，本质上也是一个HTTP请求。但是在开发阶段，商户系统的ip地址是当前电脑的ip地址，只是一个局域网内的ip，微信后台无法调用到。</p>
<p><strong>解决：</strong>内网穿透。通过<strong>cpolar软件</strong>可以获得一个临时域名，而这个临时域名是一个公网ip，这样，微信后台就可以请求到商户系统了。</p>
<h2 id="DAY-9-校验收货地址是否超出配送范围-百度地图API"><a href="#DAY-9-校验收货地址是否超出配送范围-百度地图API" class="headerlink" title="DAY 9 校验收货地址是否超出配送范围  百度地图API"></a>DAY 9 校验收货地址是否超出配送范围  百度地图API</h2><h2 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring Task"></a>Spring Task</h2><p><strong>Spring Task</strong> 是Spring框架提供的任务调度工具，可以按照约定的时间自动执行某个代码逻辑。比如每月还款提醒、订单状态定时处理等。</p>
<h3 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h3><p><strong>cron表达式</strong>就是一个字符串，通过cron表达式可以<strong>定义任务触发的时间</strong>。</p>
<p><strong>构成规则：</strong>分为6或7个域，由空格分隔开，每个域代表一个含义</p>
<p>每个域的含义分别为：秒、分钟、小时、日、月、周、年(可选)</p>
<p>比如2022年10月12日上午9点整 对应的cron表达式为：<strong>0 0 9 12 10 ? 2022</strong></p>
<p><strong>说明：</strong>一般<strong>日</strong>和<strong>周</strong>的值不同时设置，其中一个设置，另一个用？表示。</p>
<p>cron表达式有在线生成器：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li>导入maven坐标 spring-context</li>
<li>启动类添加注解 @EnableScheduling 开启任务调度</li>
<li>自定义定时任务类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化，生成bean交给容器管理</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时任务 每隔5秒触发一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务开始执行：&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="支付超时处理"><a href="#支付超时处理" class="headerlink" title="支付超时处理"></a>支付超时处理</h3><p>对于已下单未支付的订单，其状态一直是”未支付“，该状态如果保持了15分钟，需要将订单取消。可以通过定时任务来处理。每分钟检查一次是否存在超时订单。</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket 是基于 TCP 的一种新的<strong>网络协议</strong>。它实现了浏览器与服务器全双工通信——浏览器和服务器只需要完成一次握手，两者之间就可以创建<strong>持久性</strong>的连接， 并进行<strong>双向</strong>数据传输。</p>
<p><img src="/pic/http.png" style="zoom:67%;" /><img src="/pic/websocket.png" style="zoom:67%;" /></p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>服务器长期维护长连接需要一定的成本</li>
<li>各个浏览器支持程度不一</li>
<li>WebSocket 是长连接，受网络限制比较大，需要处理好重连</li>
</ul>
<p>因此WebSocket并<strong>不能完全取代HTTP</strong>，它<strong>只适合在特定的场景下使用</strong></p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>视频弹幕<ul>
<li>页面没刷新，没有任何http请求，弹幕实时产生</li>
</ul>
</li>
<li>网页聊天</li>
<li>股票基金实时更新</li>
</ul>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ol>
<li>直接使用websocket.html页面作为WebSocket客户端</li>
<li>导入WebSocket的maven坐标</li>
<li>开发服务端WebSocketServer，用于和客户端通信(作用与controller类似，响应请求)</li>
<li>配置类WebSocketConfiguration，注册WebSocket的服务端组件</li>
<li>定时任务类WebSocketTask，定时向客户端推送数据</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="来单提醒"><a href="#来单提醒" class="headerlink" title="来单提醒"></a>来单提醒</h3><p>用户下单成功后，系统需要通知商家，语音播放并且弹出提示框。</p>
<p><strong>设计思路：</strong></p>
<ul>
<li>通过WebSocket实现管理端页面和服务端保持长连接状态</li>
<li>当客户支付后，调用WebSocket的相关API实现服务端向客户端推送消息</li>
<li>客户端浏览器解析服务端推送的消息，判断是来单提醒还是客户催单，进行相应的消息提示和语音播报</li>
<li>约定服务端发送给客户端浏览器的数据格式为JSON，字段包括：type，orderId，content<ul>
<li>type 为消息类型，1为来单提醒 2为客户催单</li>
<li>orderId 为订单id</li>
<li>content 为消息内容</li>
</ul>
</li>
</ul>
<h2 id="Apache-POI"><a href="#Apache-POI" class="headerlink" title="Apache POI"></a>Apache POI</h2><p>Apache POI 是一个处理Miscrosoft Office各种文件格式的开源项目。简单来说就是，我们可以使用 POI 在 Java 程序中对Miscrosoft Office各种文件进行读写操作。<br>一般情况下，POI 都是用于操作 Excel 文件。</p>
<h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><h4 id="Apache-POI的maven坐标"><a href="#Apache-POI的maven坐标" class="headerlink" title="Apache POI的maven坐标"></a>Apache POI的maven坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="将数据写入Excel文件"><a href="#将数据写入Excel文件" class="headerlink" title="将数据写入Excel文件"></a>将数据写入Excel文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POITest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于POI向Excel文件写入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//在内存中创建一个Excel文件对象</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">//创建Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.createSheet(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在Sheet页中创建行，0表示第1行</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row1</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//创建单元格并在单元格中设置值，单元格编号也是从0开始，1表示第2个单元格</span></span><br><span class="line">        row1.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        row1.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;城市&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row2</span> <span class="operator">=</span> sheet.createRow(<span class="number">1</span>);</span><br><span class="line">        row2.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        row2.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row3</span> <span class="operator">=</span> sheet.createRow(<span class="number">2</span>);</span><br><span class="line">        row3.createCell(<span class="number">1</span>).setCellValue(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        row3.createCell(<span class="number">2</span>).setCellValue(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\itcast.xlsx&quot;</span>));</span><br><span class="line">        <span class="comment">//通过输出流将内存中的Excel文件写入到磁盘上</span></span><br><span class="line">        excel.write(out);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        write();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现效果</strong></p>
<p>在D盘中生成itcast.xlsx文件，创建名称为itcast的Sheet页，同时将内容成功写入。</p>
<h4 id="读取Excel文件中的数据"><a href="#读取Excel文件中的数据" class="headerlink" title="读取Excel文件中的数据"></a>读取Excel文件中的数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POITest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于POI读取Excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\itcast.xlsx&quot;</span>));</span><br><span class="line">        <span class="comment">//通过输入流读取指定的Excel文件</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">excel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(in);</span><br><span class="line">        <span class="comment">//获取Excel文件的第1个Sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> excel.getSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sheet页中的最后一行的行号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= lastRowNum; i++) &#123;</span><br><span class="line">            <span class="comment">//获取Sheet页中的行</span></span><br><span class="line">            <span class="type">XSSFRow</span> <span class="variable">titleRow</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">            <span class="comment">//获取行的第2个单元格</span></span><br><span class="line">            <span class="type">XSSFCell</span> <span class="variable">cell1</span> <span class="operator">=</span> titleRow.getCell(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//获取单元格中的文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue1</span> <span class="operator">=</span> cell1.getStringCellValue();</span><br><span class="line">            <span class="comment">//获取行的第3个单元格</span></span><br><span class="line">            <span class="type">XSSFCell</span> <span class="variable">cell2</span> <span class="operator">=</span> titleRow.getCell(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//获取单元格中的文本内容</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cellValue2</span> <span class="operator">=</span> cell2.getStringCellValue();</span><br><span class="line"></span><br><span class="line">            System.out.println(cellValue1 + <span class="string">&quot; &quot;</span> +cellValue2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        excel.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="导出运营数据Excel报表"><a href="#导出运营数据Excel报表" class="headerlink" title="导出运营数据Excel报表"></a>导出运营数据Excel报表</h3><img src="/pic/报表样式.png" style="zoom:67%;" />

<ul>
<li>接口没有传递参数，因为导出的是最近30天的运营数据，后端计算即可，所以不需要任何参数</li>
<li>接口没有返回数据，因为报表导出功能本质上是文件下载，服务端会通过输出流将Excel文件下载到客户端浏览器</li>
</ul>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><p>1). 设计Excel模板文件</p>
<ul>
<li>在实际开发中，如果用代码创建excel文件会非常繁琐，因此需要提前<strong>准备好一个模板文件</strong>，把样式都设置好。只需要用代码带入数据即可。</li>
</ul>
<p>2). 查询近30天的运营数据</p>
<p>3). 将查询到的运营数据写入模板文件</p>
<p>4). 通过输出流将Excel文件下载到客户端浏览器</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程</title>
    <url>/2023/11/01/19-00-37/</url>
    <content><![CDATA[<h2 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h2><p>Java通过java.lang.Thread 类的对象来代表线程。 </p>
<h3 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h3><p>需要重写run方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前thread输出：&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程输出：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程类已经继承Thread，无法继承其他类，不利于功能的扩展。</p>
<h3 id="实现runnable接口"><a href="#实现runnable接口" class="headerlink" title="实现runnable接口"></a>实现runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">	<span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建任务对象</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        <span class="comment">//把任务对象交给一个线程对象处理</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(target).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>扩展性强，但需要多一个Runnable对象。</p>
<h4 id="匿名内部类写法"><a href="#匿名内部类写法" class="headerlink" title="匿名内部类写法"></a>匿名内部类写法</h4><ul>
<li>创建Runnable的匿名内部类对象</li>
<li>交给Thread线程对象</li>
<li>调用线程对象的start启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>()&#123;</span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;子线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(target).start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//或者将上面两步合起来</span></span><br><span class="line">        <span class="comment">//new Thread(new Runnable()&#123;</span></span><br><span class="line">        <span class="comment">//    @override</span></span><br><span class="line">        <span class="comment">//    public void run()&#123;</span></span><br><span class="line">        <span class="comment">//        System.out.println(&quot;子线程&quot;);</span></span><br><span class="line">        <span class="comment">//    &#125;</span></span><br><span class="line">        <span class="comment">//&#125;).start();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Runnable是函数式接口，可以用lambda简化</span></span><br><span class="line">        <span class="comment">//new Thread(()-&gt;&#123;</span></span><br><span class="line">        <span class="comment">//	  System.out.println(&quot;子线程&quot;);</span></span><br><span class="line">        <span class="comment">//&#125;).start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实现callable接口"><a href="#实现callable接口" class="headerlink" title="实现callable接口"></a>实现callable接口</h3><p><strong>以上两种方法都不能返回线程执行的结果</strong></p>
<p>使用Callable接口和FutureTask类可以返回线程执行后的结果。</p>
<ul>
<li>创建任务对象<br>定义一个类实现Callable接口，重写call方法，封装要做的事情，和要返回的数据。<br>把Callable类型的对象封装成FutureTask（线程任务对象）。</li>
<li>把线程<strong>任务对象</strong>交给Thread对象。</li>
<li>调用Thread对象的start方法启动线程。</li>
<li>线程执行完毕后、通过FutureTask对象的的get方法去获取线程任务执行的结果。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// callable是一个泛型接口，需要填返回类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="comment">// 2、必须重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 描述线程的执行任务。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程MyThread输出：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 3、创建一个Callable的对象</span></span><br><span class="line">        Callable&lt;String&gt; call = <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">        <span class="comment">// 4、把Callable的对象封装成一个FutureTask对象（任务对象）</span></span><br><span class="line">        <span class="comment">// 未来任务对象的作用？</span></span><br><span class="line">        <span class="comment">// 1、是一个任务对象，实现了Runnable对象.</span></span><br><span class="line">        <span class="comment">// 2、可以在线程执行完毕之后，用未来任务对象调用get方法获取线程执行完毕后的结果。</span></span><br><span class="line">        FutureTask&lt;String&gt; f  = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(call);</span><br><span class="line">        <span class="comment">// 5、把任务对象交给一个Thread对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(f).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、获取线程执行完毕后返回的结果。</span></span><br><span class="line">        <span class="comment">// 注意：如果执行到这儿，假如上面的线程还没有执行完毕</span></span><br><span class="line">        <span class="comment">// 这里的代码会暂停，等待上面线程执行完毕后才会获取结果。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> f.get();</span><br><span class="line">        System.out.println(rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table>
<thead>
<tr>
<th>方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>继承Thread类</td>
<td>编程比较简单，可以直接使用Thread类中的方法</td>
<td>扩展性较差，不能再继承其他的类，不能返回线程执行的结果</td>
</tr>
<tr>
<td>实现Runnable接口</td>
<td>扩展性强，实现该接口的同时还可以继承其他的类。</td>
<td>编程相对复杂，不能返回线程执行的结果</td>
</tr>
<tr>
<td>实现Callable接口</td>
<td>扩展性强，实现该接口的同时还可以继承其他的类。<strong>可以得到线程执行的结果</strong></td>
<td>编程相对复杂</td>
</tr>
</tbody></table>
<h2 id="Thread常用方法"><a href="#Thread常用方法" class="headerlink" title="Thread常用方法"></a>Thread常用方法</h2><table>
<thead>
<tr>
<th>Thread提供的常用方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public void run()</td>
<td>线程的任务方法</td>
</tr>
<tr>
<td>public void start()</td>
<td>启动线程</td>
</tr>
<tr>
<td>public String getName()</td>
<td>获取当前线程的名称，线程名称默认是Thread-索引</td>
</tr>
<tr>
<td>public void setName(String name)</td>
<td>为线程设置名称</td>
</tr>
<tr>
<td>public static Thread currentThread()</td>
<td>获取当前执行的线程对象</td>
</tr>
<tr>
<td>public static void sleep(long time)</td>
<td>让当前执行的线程休眠多少毫秒后，再继续执行</td>
</tr>
<tr>
<td>public final void join()</td>
<td>让调用当前这个方法的线程先执行完！</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>Thread提供的常见构造器</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Thread(String name)</td>
<td>可以为当前线程指定名称</td>
</tr>
<tr>
<td>public Thread(Runnable target)</td>
<td>封装Runnable对象成为线程对象</td>
</tr>
<tr>
<td>public Thread(Runnable target, String name)</td>
<td>封装Runnable对象成为线程对象，并指定线程名称</td>
</tr>
</tbody></table>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><h3 id="存在原因"><a href="#存在原因" class="headerlink" title="存在原因"></a>存在原因</h3><ul>
<li>存在多个线程在同时执行</li>
<li>同时访问一个共享资源</li>
<li>存在修改该共享资源</li>
</ul>
<p>解决线程安全可以用线程同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="comment">// 1、创建一个账户对象，代表两个人的共享账户。</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;ICBC-110&quot;</span>, <span class="number">100000</span>);</span><br><span class="line">        <span class="comment">// 2、创建两个线程，分别代表小明 小红，再去同一个账户对象中取钱10万。</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(acc, <span class="string">&quot;小明&quot;</span>).start(); <span class="comment">// 小明</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DrawThread</span>(acc, <span class="string">&quot;小红&quot;</span>).start(); <span class="comment">// 小红</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>让多个线程实现先后依次访问共享资源，方法：<strong>加锁</strong>。有三种方式</p>
<h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p>把访问共享资源的核心<strong>代码</strong>给上锁，以此保证线程安全。</p>
<p>每次只允许一个线程加锁后进入，执行完毕后自动解锁，其他线程才可以进来执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synchronized(同步锁) &#123;</span><br><span class="line">	访问共享资源的核心代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">    <span class="comment">// 先搞清楚是谁来取钱？</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">// 1、判断余额是否足够</span></span><br><span class="line">    <span class="comment">// this正好代表共享资源！</span></span><br><span class="line">    <span class="comment">// 选中代码后ctrl alt t</span></span><br><span class="line">    <span class="comment">//synchronized (&quot;lock&quot;) &#123; //锁对象可以任意取</span></span><br><span class="line">    <span class="comment">//字符串作为锁对象是全局唯一的。也就是说如果这个锁对象同时锁住了所有账户上的所有其他线程</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.money &gt;= money)&#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱&quot;</span> + money + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.money -= money;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="built_in">this</span>.money);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;来取钱：余额不足~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>建议把共享资源作为锁对象, 不要将随便无关的对象当做锁对象</li>
<li>对于实例方法，建议使用this作为锁对象</li>
<li>对于静态方法，建议把类的字节码(类名.class)当做锁对象</li>
</ol>
<h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>把访问共享资源的核心<strong>方法</strong>给上锁，以此保证线程安全</p>
<p>每次只能一个线程进入，执行完毕以后自动解锁，其他线程才可以进来执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步方法</span></span><br><span class="line"><span class="comment">// 把操作共享资源的方法用synchronized修饰</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">    <span class="comment">// 先搞清楚是谁来取钱？</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">// 1、判断余额是否足够</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.money &gt;= money)&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;来取钱&quot;</span> + money + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.money -= money;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="built_in">this</span>.money);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;来取钱：余额不足~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>同步方法其实底层也是有隐式锁对象的，只是锁的范围是整个方法代码。</li>
<li>如果方法是实例方法：同步方法默认用this作为的锁对象。</li>
<li>如果方法是静态方法：同步方法默认用类名.class作为的锁对象。</li>
</ul>
<h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>范围上：同步代码块锁的范围更小，同步方法锁的范围更大。因此同步代码块性能更好<br>可读性：同步方法更好。</p>
<h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>Lock锁是JDK5版本专门提供的一种锁对象，通过这个锁对象的方法来达到加锁，和释放锁的目的，使用起来<strong>更加灵活</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建锁对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">mylock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mylock.lock(); <span class="comment">// 加锁</span></span><br><span class="line">            <span class="comment">// 1、判断余额是否足够</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.money &gt;= money)&#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;来取钱&quot;</span> + money + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.money -= money;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;来取钱后，余额剩余：&quot;</span> + <span class="built_in">this</span>.money);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;来取钱：余额不足~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//加try catch finally防止加锁和解锁之间有异常，导致加了锁但没解锁</span></span><br><span class="line">            mylock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>当多个线程共同操作共享的资源时，线程间通过某种方式互相告知自己的状态，以相互协调，并避免无效的资源争夺。</p>
<p>常见的模型为生产者与消费者模型。</p>
<p>Object类的等待和唤醒方法：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void wait()</td>
<td>让当前线程等待并释放所占锁，直到另一个线程调用notify()方法或 notifyAll()方法</td>
</tr>
<tr>
<td>void notify()</td>
<td>唤醒正在等待的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>唤醒正在等待的所有线程</td>
</tr>
</tbody></table>
<p>注意：上述方法应该<strong>使用当前同步锁对象进行调用</strong>(只有锁对象知道谁等待谁唤醒)，此外，<strong>先唤醒再等待</strong></p>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>以三个生产者，两个消费者为例。生产者生产完数据后应该让自己等待，通知其他消费者消费；消费者消费完数据之后应该让自己等待，同时通知生产者生成。</p>
<blockquote>
<p>1.先确定在这个案例中，什么是共享数据？<br>答：这里案例中桌子是共享数据，因为厨师和顾客都需要对桌子上的包子进行操作。</p>
<p>2.再确定有那几条线程？哪个是生产者，哪个是消费者？<br>答：厨师是生产者线程，3条生产者线程；<br>   顾客是消费者线程，2条消费者线程</p>
<p>3.什么时候将哪一个线程设置为什么状态<br>生产者线程(厨师)放包子：<br>     1)先判断是否有包子<br>     2)没有包子时，厨师开始做包子, 做完之后把别人唤醒，然后让自己等待<br>     3)有包子时，不做包子了，直接唤醒别人、然后让自己等待<br>     	<br>消费者线程(顾客)吃包子：<br>     1)先判断是否有包子<br>     2)有包子时，顾客开始吃包子, 吃完之后把别人唤醒，然后让自己等待<br>     3)没有包子时，不吃包子了，直接唤醒别人、然后让自己等待</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放1个包子的方法</span></span><br><span class="line">    <span class="comment">// 厨师1 厨师2 厨师3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="comment">// 判断是否有包子。</span></span><br><span class="line">            <span class="keyword">if</span>(list.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                list.add(name + <span class="string">&quot;做的肉包子&quot;</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;做了一个肉包子~~&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 唤醒别人, 等待自己</span></span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 有包子了，不做了。</span></span><br><span class="line">                <span class="comment">// 唤醒别人, 等待自己</span></span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吃货1 吃货2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">if</span>(list.size() == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 有包子，吃了</span></span><br><span class="line">                System.out.println(name  + <span class="string">&quot;吃了：&quot;</span> + list.get(<span class="number">0</span>));</span><br><span class="line">                list.clear();</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 没有包子</span></span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//   需求：3个生产者线程，负责生产包子，每个线程每次只能生产1个包子放在桌子上</span></span><br><span class="line">        <span class="comment">//      2个消费者线程负责吃包子，每人每次只能从桌子上拿1个包子吃。</span></span><br><span class="line">        <span class="type">Desk</span> <span class="variable">desk</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建3个生产者线程（3个厨师）</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                desk.put();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;厨师1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                desk.put();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;厨师2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                desk.put();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;厨师3&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建2个消费者线程（2个吃货）</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                desk.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;吃货1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                desk.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;吃货2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池是可以复用线程的技术。</p>
<p>用户每发起一个请求，后台就需要创建一个新线程来处理，下次新任务来了肯定又要创建新线程处理的，  而创建新线程的开销是很大的，并且请求过多时，肯定会产生大量的线程出来，这样会严重影响系统的性能。</p>
<img src="/pic/线程池工作原理.jpg" style="zoom:50%;" />

<p>线程池中有<strong>一定数量</strong>的工作线程，将<strong>任务对象</strong>(实现了runnable或callable)放入任务队列中，工作线程会依次执行这些任务，其余的任务在队列中等待。</p>
<p>由于线程数量是一定的，资源的耗费是可控的。</p>
<h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>JDK 5.0起提供了代表线程池的<strong>接口</strong>：ExecutorService。</p>
<h4 id="通过实现类创建对象"><a href="#通过实现类创建对象" class="headerlink" title="通过实现类创建对象"></a>通过实现类创建对象</h4><p>java提供了线程池接口的实现类，常用的是<code>ThreadPoolExecutor</code>。</p>
<img src="/pic/ThreadPoolExecutor构造器.jpg" style="zoom: 67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    <span class="number">3</span>,	<span class="comment">//核心线程数有3个</span></span><br><span class="line">    <span class="number">5</span>,  <span class="comment">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span></span><br><span class="line">    <span class="number">8</span>,	<span class="comment">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span></span><br><span class="line">    TimeUnit.SECONDS,<span class="comment">//时间单位（秒）</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">4</span>), <span class="comment">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span></span><br><span class="line">    Executors.defaultThreadFactory(), <span class="comment">//用于创建线程的工厂对象</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="comment">//拒绝策略</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>新任务提交时发现核心线程都在忙，任务队列也满了，并且还可以创建临时线程，此时才会<strong>创建临时线程</strong>。</li>
<li>核心线程和临时线程都在忙，任务队列也满了，新的任务过来的时候才会开始<strong>拒绝任务</strong>。</li>
</ul>
<p>ExecutorService的常用方法</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void execute(Runnable command)</td>
<td>执行 Runnable 任务</td>
</tr>
<tr>
<td>Future<T> submit(Callable<T> task)</td>
<td>执行 Callable 任务，返回未来任务对象，用于获取线程返回的结果</td>
</tr>
<tr>
<td>void shutdown()</td>
<td>等全部任务执行完毕后，再关闭线程池！</td>
</tr>
<tr>
<td>List<Runnable> shutdownNow()</td>
<td>立刻关闭线程池，停止正在执行的任务，并返回队列中未执行的任务</td>
</tr>
</tbody></table>
<p>新任务拒绝策略</p>
<table>
<thead>
<tr>
<th><strong>策略</strong></th>
<th><strong>详解</strong></th>
</tr>
</thead>
<tbody><tr>
<td>ThreadPoolExecutor.AbortPolicy</td>
<td>丢弃任务并抛出RejectedExecutionException异常。<strong>是默认的策略</strong></td>
</tr>
<tr>
<td>ThreadPoolExecutor.DiscardPolicy：</td>
<td>丢弃任务，但是不抛出异常 这是不推荐的做法</td>
</tr>
<tr>
<td>ThreadPoolExecutor.DiscardOldestPolicy</td>
<td>抛弃队列中等待最久的任务 然后把当前任务加入队列中</td>
</tr>
<tr>
<td>ThreadPoolExecutor.CallerRunsPolicy</td>
<td>由主线程负责调用任务的run()方法从而绕过线程池直接执行</td>
</tr>
</tbody></table>
<h4 id="通过工具类返回对象-少用"><a href="#通过工具类返回对象-少用" class="headerlink" title="通过工具类返回对象(少用)"></a>通过工具类返回对象(少用)</h4><p>Executors是一个线程池的工具类，提供了很多静态方法用于返回不同特点的线程池对象。</p>
<p>底层基本还是用ThreadPoolExecutor实现的</p>
<p><strong>大型并发系统不建议使用</strong></p>
<table>
<thead>
<tr>
<th><strong>方法名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public static ExecutorService newFixedThreadPool(int nThreads)</td>
<td>创建固定线程数量的线程池，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程替代它。</td>
</tr>
<tr>
<td>public static ExecutorService newSingleThreadExecutor()</td>
<td>创建只有一个线程的线程池对象，如果该线程出现异常而结束，那么线程池会补充一个新线程。</td>
</tr>
<tr>
<td>public static ExecutorService newCachedThreadPool()</td>
<td>线程数量随着任务增加而增加，如果线程任务执行完毕且空闲了60s则会被回收掉。</td>
</tr>
<tr>
<td>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</td>
<td>创建一个线程池，可以实现在给定的延迟后运行任务，或者定期执行任务。</td>
</tr>
</tbody></table>
<h3 id="处理runnable任务"><a href="#处理runnable任务" class="headerlink" title="处理runnable任务"></a>处理runnable任务</h3><p>先准备一个线程任务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 任务是干啥的？</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ==&gt; 输出666~~&quot;</span>);</span><br><span class="line">        <span class="comment">//为了模拟线程一直在执行，这里睡久一点</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">    <span class="number">3</span>,	<span class="comment">//核心线程数有3个</span></span><br><span class="line">    <span class="number">5</span>,  <span class="comment">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span></span><br><span class="line">    <span class="number">8</span>,	<span class="comment">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span></span><br><span class="line">    TimeUnit.SECONDS,<span class="comment">//时间单位（秒）</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">4</span>), <span class="comment">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span></span><br><span class="line">    Executors.defaultThreadFactory(), <span class="comment">//用于创建线程的工厂对象</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy() <span class="comment">//拒绝策略</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">pool.execute(target); <span class="comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span><br><span class="line">pool.execute(target); <span class="comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span><br><span class="line">pool.execute(target); <span class="comment">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span><br><span class="line"><span class="comment">//下面4个任务在任务队列里排队</span></span><br><span class="line">pool.execute(target);</span><br><span class="line">pool.execute(target);</span><br><span class="line">pool.execute(target);</span><br><span class="line">pool.execute(target);</span><br><span class="line"></span><br><span class="line"><span class="comment">//任务队列满了还有新任务，且线程池最大数量没达到，就创建临时线程</span></span><br><span class="line">pool.execute(target);</span><br><span class="line">pool.execute(target);</span><br><span class="line"><span class="comment">// 到了新任务的拒绝时机了！</span></span><br><span class="line">pool.execute(target);</span><br></pre></td></tr></table></figure>



<h3 id="处理callable任务"><a href="#处理callable任务" class="headerlink" title="处理callable任务"></a>处理callable任务</h3><p>callable任务相对于Runnable任务来说，就是多了一个返回值。</p>
<p>准备一个Callable线程任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCallable</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、重写call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 描述线程的任务，返回线程执行返回后的结果。</span></span><br><span class="line">        <span class="comment">// 需求：求1-n的和返回。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;求出了1-&quot;</span> + n + <span class="string">&quot;的和是：&quot;</span> + sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、通过ThreadPoolExecutor创建一个线程池对象。</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,</span><br><span class="line">            TimeUnit.SECONDS, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">4</span>),</span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、使用线程处理Callable任务。</span></span><br><span class="line">        Future&lt;String&gt; f1 = pool.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="number">100</span>));</span><br><span class="line">        Future&lt;String&gt; f2 = pool.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="number">200</span>));</span><br><span class="line">        Future&lt;String&gt; f3 = pool.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="number">300</span>));</span><br><span class="line">        Future&lt;String&gt; f4 = pool.submit(<span class="keyword">new</span> <span class="title class_">MyCallable</span>(<span class="number">400</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、执行完Callable任务后，需要获取返回结果。</span></span><br><span class="line">        System.out.println(f1.get());</span><br><span class="line">        System.out.println(f2.get());</span><br><span class="line">        System.out.println(f3.get());</span><br><span class="line">        System.out.println(f4.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>进程中的线程是由CPU负责调度执行的，但CPU能同时处理线程的数量有限，为了保证全部线程都能往前执行，CPU会轮询为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。</p>
<h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><p>在同一个时刻上，同时有多个线程在被CPU调度执行。</p>
<p><strong>多线程是并发和并行同时进行的</strong></p>
<h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>线程从生到死的过程中，经历的各种状态及状态转换。</p>
<p>java中定义了6中状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        NEW,</span><br><span class="line">        RUNNABLE,</span><br><span class="line">        BLOCKED,</span><br><span class="line">        WAITING,</span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/pic/线程生命周期.jpg" style="zoom: 80%;" />

<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>之前介绍的锁都是悲观锁：一上来就上锁，每次一个线程访问完毕后再解锁，线程安全但性能差。</p>
<p>乐观锁：一开始不上锁，要出现线程安全问题时才上锁，线程安全且性能好。</p>
<p>CAS算法(比较和修改)，把值取出来修改，在写回去之前比较最新的值和取出来的值，如果一样，说明中间没有别的线程修改，可以安全修改；如果不一样说明被别的线程修改过了，需要重新取最新值比较和修改。</p>
<p>把公共资源用Atomic修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java常用API</title>
    <url>/2023/10/18/10-30-37/</url>
    <content><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object是java中所有类的祖先类，所以Java中所有类的对象都可以直接使用Object类中提供的一些方法。</p>
<span id="more"></span>

<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><h3 id="equals-Object-o"><a href="#equals-Object-o" class="headerlink" title="equals(Object o)"></a>equals(Object o)</h3><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><p>浅克隆</p>
<ul>
<li>基本类型直接拷贝，字符串数据拷贝地址，<strong>引用类型拷贝地址</strong></li>
</ul>
<p>深克隆</p>
<ul>
<li>基本类型直接拷贝，字符串数据拷贝地址，<strong>引用类型创建新对象</strong></li>
</ul>
<h2 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h2><p>Objects是一个<strong>工具类</strong>，提供了一些方法可以对任意<strong>对象</strong>进行操作。</p>
<img src="/pic/Objects常用方法.png" style="zoom: 50%;" />

<h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><p>Java中<strong>万物皆对象</strong>，但8种基本数据类型还不是对象，所以要把它们变成对象，变成对象之后，可以提供一些方法对数据进行操作。</p>
<img src="/pic/基本类型包装类.png" style="zoom: 67%;" />

<p>学习包装类，主要学习两点：</p>
<ul>
<li><ol>
<li>创建包装类的对象方式、<strong>自动装箱和拆箱</strong>的特性；</li>
</ol>
</li>
<li><ol start="2">
<li>利用包装类提供的方法对字符串和基本类型数据进行相互转换</li>
</ol>
</li>
</ul>
<p>把字符串转换为数值型数据：包装类.parseXxx(字符串)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(String s)</span></span><br></pre></td></tr></table></figure>

<p>将数值型数据转换为字符串：包装类.valueOf(数据);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> a)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.字符串转换为数值型数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> <span class="string">&quot;29&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">scoreStr</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> Double.prarseDouble(scoreStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.整数转换为字符串</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> Integer.toString(a);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> a.toString();</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> a+<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> String.valueOf(a);</span><br></pre></td></tr></table></figure>

<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol>
<li>String是不可变字符串对象，每次变化都会指向一个新的对象，原本的对象永远不会变。</li>
<li>以字面量方式创建的字符串对象存储在<strong>字符串常量池</strong>，且<strong>相同内容的字符串只存储一份</strong>。而new出来的对象放在<strong>堆内存</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true,都指向常量池中的唯一对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// false,每次new出来的都是新对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s2 + <span class="string">&quot;c&quot;</span>;</span><br><span class="line">System.out.println(s1 == s3); <span class="comment">// false,s3是运算出来的，在堆内存，s1在常量池</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>+<span class="string">&quot;c&quot;</span>;</span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true,编译优化，&quot;ab&quot;+&quot;c&quot;直接转成&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h3><p>用于以某种模式分割字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以冒号分割字符串</span></span><br><span class="line">String[] str=s.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"><span class="comment">// 匹配任意个空格字符</span></span><br><span class="line">String[] str=s.split(<span class="string">&quot;[ ]+&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="replaceAll方法"><a href="#replaceAll方法" class="headerlink" title="replaceAll方法"></a>replaceAll方法</h3><p>将字符串中的部分字符替换，如果是正则表达式中有特殊含义的字符，需要<strong>转义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 去除所有的[</span></span><br><span class="line">str.replaceAll(<span class="string">&quot;\\[&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 去除所有的 [ 和 ]</span></span><br><span class="line">str.replaceAll(<span class="string">&quot;\\[|\\]&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="StringBuilder和StringBuffer"><a href="#StringBuilder和StringBuffer" class="headerlink" title="StringBuilder和StringBuffer"></a>StringBuilder和StringBuffer</h2><p>StringBuilder代表可变字符串对象，相当于是一个容器，它里面装的字符串是可以改变的，就是用来操作字符串的。</p>
<img src="/pic/StringBuilder.png" style="zoom: 67%;" />

<ul>
<li>StringBuffer的用法与StringBuilder是一模一样的</li>
<li>但 StringBuilder是线程不安全的，效率高。StringBuffer是线程安全的，效率低。</li>
</ul>
<h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><p>Arrays是用来操作数组的一个<strong>工具类</strong>。</p>
<img src="/pic/Arrays.png" style="zoom:80%;" />

<ul>
<li><code>Arrays.asList(elem1,elem2);</code></li>
</ul>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection 代表单列集合</p>
<img src="/pic/collection.png" style="zoom:60%;" />

<p>collection常用方法，子类都会继承</p>
<img src="/pic/collection方法.png" style="zoom:80%;" />

<p>迭代器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = lists.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ele</span> <span class="operator">=</span> it.next();</span><br><span class="line">    System.out.println(ele);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><p>List 系列集合特点 : <strong>有序，可重复，有索引</strong></p>
<h4 id="List特有方法"><a href="#List特有方法" class="headerlink" title="List特有方法"></a>List特有方法</h4><img src="/pic/list特有方法.png" alt="list特有方法"  />

<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><ul>
<li>ArrayList是<strong>基于数组</strong>实现的，查询快，增删慢</li>
<li>利用无参构造器创建时，会在底层<strong>创建一个默认长度为 0 的数组</strong></li>
<li>添加第一个元素时，底层<strong>创建一个新的长度为10的数组</strong></li>
<li>存满时扩容1.5倍</li>
<li>若一次添加多个元素，1.5倍放不下。则创建新数组，长度以实际为准</li>
</ul>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><ul>
<li><strong>基于双链表</strong>实现</li>
</ul>
<h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>Set 系列集合特点 : <strong>不重复，无索引</strong>。Set的常用方法几乎都是父类提供的。</p>
<h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul>
<li>无序，基于 <strong>数组+链表+红黑树(自平衡二叉树)</strong> ，即主干基于数组，哈希碰撞后叠加链表，链表长度超过8且数组长度超过64后，将链表转成红黑树。</li>
</ul>
<h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><ul>
<li><strong>有序</strong>，在HashSet的基础上多了<strong>双链表</strong>的机制用于记录前后元素的位置。</li>
</ul>
<h4 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h4><ul>
<li>可排序，基于红黑树实现的排序，默认升序。</li>
</ul>
<h3 id="集合并发修改异常"><a href="#集合并发修改异常" class="headerlink" title="集合并发修改异常"></a>集合并发修改异常</h3><p>使用迭代器<strong>遍历</strong>集合时，又<strong>同时删除</strong>集合中的数据，程序就会出现并发修改异常的错误。</p>
<p>由于增强 for 循环遍历集合就是迭代器遍历集合的简化写法，因此也会出现并发修改异常的错误。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; it = lists.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ele</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(...)&#123;</span><br><span class="line">        lists.remove(ele);</span><br><span class="line">        <span class="comment">// 这里会有问题，因为删掉ele之后，后面的元素整体前移，it就指向删除元素的后一位</span></span><br><span class="line">        <span class="comment">// 但紧接着迭代器又把it后移一位，就跳过了删除元素的后一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用迭代器遍历集合，但用迭代器自己的删除方法删除数据即可。</li>
<li>如果用 for 循环遍历时：可以倒着遍历并删除；或者从前往后遍历，但删除元素后做 i – 操作。</li>
</ul>
<h3 id="工具类Collections"><a href="#工具类Collections" class="headerlink" title="工具类Collections"></a>工具类Collections</h3><img src="/pic/Collections工具类.png" style="zoom:90%;" />

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>双列集合，键不允许重复，但值可以重复（<strong>Map只对键有约束</strong>，值任意）。 特点也是不重复、无索引。</p>
<p><strong>Set底层是基于Map实现的</strong>，只是Set只要键，不要值。因此Map底层数据结构和Set是一样的。</p>
<p><img src="/pic/Map%E4%BD%93%E7%B3%BB.png"></p>
<p>Map常用方法</p>
<p><img src="/pic/map%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.png"></p>
<p>使用forEach遍历map最简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.forEach((k , v) -&gt; &#123;</span><br><span class="line">	System.out.println(k +<span class="string">&quot;-----&gt;&quot;</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>同HashSet</p>
<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>同LinkedHashSet</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>同TreeMap</p>
<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><img src="/pic/常见集合.png" style="zoom: 67%;" />

<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>基于Vector动态数组类实现，也属于List。是线程安全的，但同步开销较大，在Java中 <strong>不经常使用</strong> 。</p>
<h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>有很多实现类。</p>
<ul>
<li><p>LinkedList：双向链表实现，常用。</p>
</li>
<li><p>PriorityQueue: Object[] 数组来实现小顶堆。</p>
</li>
<li><p>DelayQueue: PriorityQueue。详细可以查看：DelayQueue 源码分析。</p>
</li>
<li><p>ArrayDeque: 可扩容动态双向数组。</p>
</li>
</ul>
<p>通常使用双端队列来完成栈的功能。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-Web案例</title>
    <url>/2023/11/12/11-00-37/</url>
    <content><![CDATA[<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>Springboot中的请求和响应 用于后端与前端的交互，Mybatis为三层架构中的Dao持久层提供了更方便的管理，在mybatis中一般称为mapper。</p>
<span id="more"></span>

<p>目录结构如下：</p>
<img src="/pic/javaWeb项目结构.jpg" style="zoom: 80%;" />

<img src="/pic/web工程结构.jpg" style="zoom:80%;" />

<h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><p>于当前最为主流的开发模式是前后端分离模式，开发人员都需要根据提前定义好的接口文档，来进行前后端功能的开发。</p>
<p>在前后端交互时，基于当前主流的REST风格的API接口进行交互。</p>
<h4 id="传统URL风格"><a href="#传统URL风格" class="headerlink" title="传统URL风格"></a>传统URL风格</h4><ul>
<li><p><code>http://localhost:8080/user/getById?id=1</code> GET：查询id为1的用户</p>
</li>
<li><p><code>http://localhost:8080/user/saveUser </code>POST：新增用户</p>
</li>
<li><p><code>http://localhost:8080/user/updateUser</code> POST：修改用户</p>
</li>
<li><p><code>http://localhost:8080/user/deleteUser?id=1</code> GET：删除id为1的用户</p>
</li>
</ul>
<p>传统URL，定义比较复杂，而且将资源的访问行为对外暴露出来了。</p>
<h4 id="基于REST风格URL"><a href="#基于REST风格URL" class="headerlink" title="基于REST风格URL"></a>基于REST风格URL</h4><ul>
<li><code>http://localhost:8080/users/1</code> GET：查询id为1的用户</li>
<li><code>http://localhost:8080/users</code> POST：新增用户</li>
<li><code>http://localhost:8080/users</code>PUT：修改用户</li>
<li><code>http://localhost:8080/users/1</code> DELETE：删除id为1的用户</li>
</ul>
<p>通过URL定位要操作的资源，通过不同的请求方式来描述具体的操作，比如用get执行查询操作；post执行增加操作；put执行修改操作；delete执行删除操作。</p>
<p>由于参数写在路径中，因此需要使用路径参数的解析方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">    System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="特定请求的mapping标签"><a href="#特定请求的mapping标签" class="headerlink" title="特定请求的mapping标签"></a>特定请求的mapping标签</h4><p>使用rest风格的url，在controller层需要<strong>指定请求的方法</strong>，如果使用原本的RequestMapping标签，需要在method中指定，比较臃肿。</p>
<p>spring提供了相应的衍生注解，使用<code>@xxxMapping</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptService deptService;</span><br><span class="line">    <span class="comment">//@RequestMapping(value = &quot;/depts&quot; , method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/depts&quot;)</span></span><br><span class="line">    <span class="comment">//PostMapping,PutMapping,DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询所有部门数据&quot;</span>);</span><br><span class="line">        List&lt;Dept&gt; deptList = deptService.list();</span><br><span class="line">        <span class="keyword">return</span> Result.success(deptList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="统一响应结果"><a href="#统一响应结果" class="headerlink" title="统一响应结果"></a>统一响应结果</h3><p>前后端工程在进行交互时，使用统一响应结果 Result。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//响应信息 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line">    <span class="comment">//增删改 成功响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="分析与实现"><a href="#分析与实现" class="headerlink" title="分析与实现"></a>分析与实现</h3><p>当查询数据较多时，需要分页展示。在MySQL数据库中，使用<code>LIMIT</code>关键字来进行分页查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 参数1：起始索引</span></span><br><span class="line"><span class="comment">-- 参数2：查询返回的记录数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>前端给后端传递的参数是当前页码和每页记录数量，后端给前端返回数据列表和总记录数，可以把数据列表和总记录数定义为<strong>实体类返回</strong>。</p>
<p><strong>EmpController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/emps&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//条件分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer page,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        log.info(<span class="string">&quot;分页查询，参数：&#123;&#125;,&#123;&#125;&quot;</span>, page, pageSize);</span><br><span class="line">        <span class="comment">//调用业务层分页查询功能</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> empService.page(page, pageSize);</span><br><span class="line">        <span class="comment">//响应</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(pageBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@RequestParam(defaultValue&#x3D;”默认值”)   &#x2F;&#x2F;设置请求参数默认值</p>
</blockquote>
<p><strong>EmpService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页展示记录数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmpServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageBean <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//1、获取总记录数</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> empMapper.count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取分页查询结果列表</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">start</span> <span class="operator">=</span> (page - <span class="number">1</span>) * pageSize; <span class="comment">//计算起始索引 , 公式: (页码-1)*页大小</span></span><br><span class="line">        List&lt;Emp&gt; empList = empMapper.list(start, pageSize);</span><br><span class="line">        <span class="comment">//3、封装PageBean对象</span></span><br><span class="line">        <span class="type">PageBean</span> <span class="variable">pageBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageBean</span>(count , empList);</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>EmpMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//获取总记录数</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(*) from emp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前页的结果列表</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp limit #&#123;start&#125;, #&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(Integer start, Integer pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PageHelper插件"><a href="#PageHelper插件" class="headerlink" title="PageHelper插件"></a>PageHelper插件</h3><p>PageHelper是Mybatis的一款功能强大、方便易用的分页插件，支持任何形式的单表、多表的分页查询。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/pic/pagehelper.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total; <span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> List records; <span class="comment">//当前页数据集合</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分类分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;分类分页查询:&#123;&#125;&quot;</span>,categoryPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> categoryService.pageQuery(categoryPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="comment">// 传入页码和每页记录数</span></span><br><span class="line">    PageHelper.startPage(categoryPageQueryDTO.getPage(), categoryPageQueryDTO.getPageSize());</span><br><span class="line">	<span class="comment">// 结果封装在page中</span></span><br><span class="line">    Page&lt;Category&gt; page = categoryMapper.pageQuery(categoryPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from category&quot;)</span></span><br><span class="line">Page&lt;Category&gt; <span class="title function_">pageQuery</span><span class="params">(CategoryPageQueryDTO categoryPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure>



<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>文件上传，是指将本地图片、视频、音频等文件上传到服务器，供其他用户浏览或下载的过程。<br>文件上传在项目中应用非常广泛，我们经常发微博、发微信朋友圈都用到了文件上传功能。</p>
<p>后端接收到前端的请求后，会将图片保存为临时文件，当请求结束后，临时文件会被删除。因此需要将临时文件存储起来。</p>
<h3 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h3><p>在服务端，接收到上传上来的文件之后，将文件存储在本地服务器磁盘中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">upload</span><span class="params">(String username, Integer age, MultipartFile image)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,username,age,image);</span><br><span class="line">        <span class="comment">//获取原始文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//构建新的文件名，当不同用户上传了两个相同名字的文件，会产生覆盖</span></span><br><span class="line">        <span class="comment">//用uuid(通用唯一识别码)获取随机文件名，保证每次上传文件时文件名都唯一的</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">extname</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));<span class="comment">//文件扩展名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString()+extname;<span class="comment">//随机名+文件扩展名</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将文件存储在服务器的磁盘目录</span></span><br><span class="line">        image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:/images/&quot;</span>+originalFilename));</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在SpringBoot中，文件上传时默认单个文件最大大小为1M</p>
<p>那么如果需要上传大文件，可以在application.properties进行如下配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置单个文件最大上传大小</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-request-size</span>=<span class="string">100MB</span></span><br></pre></td></tr></table></figure>

<h3 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h3><p>阿里云对象存储OSS（Object Storage Service），是一款海量、安全、低成本、高可靠的云存储服务。使用OSS，可以通过网络随时存储和调用包括文本、图片、音频和视频等在内的各种文件，和七牛云一样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;https://oss-cn-shanghai.aliyuncs.com&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI5t9MZK8iq5T2Av5GLDxX&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;C0IrHzKZGKqU8S7YQcevcotD3Zd5Tc&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> <span class="string">&quot;web-framework01&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> multipartFile.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line">        ossClient.putObject(bucketName, fileName, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + bucketName + <span class="string">&quot;.&quot;</span> + endpoint.split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭ossClient</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;<span class="comment">// 把上传到oss的路径返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h3><p>第三方服务，如阿里云oss，需要很多参数配置，之前是写在代码片段中，不便于维护和管理。可以将这些参数交给配置文件来管理。</p>
<p>application.properties是springboot项目默认的配置文件，所以springboot程序在启动时会默认读取application.properties配置文件，而我们可以使用一个现成的注解：@Value，获取配置文件中的数据。</p>
<p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.accessKeySecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"> 	</span><br><span class="line"> 	<span class="comment">//省略其他代码...</span></span><br><span class="line"> &#125;   </span><br></pre></td></tr></table></figure>

<p>以上的方法，在每一个成员上都要加一行注解，略显臃肿。当<strong>配置项的名字和变量名一样</strong>时，可以使用<code>@ConfigurationProperties</code>批量的<strong>将外部的属性配置注入到bean对象的属性</strong>中。</p>
<h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><p>需要引入依赖，否则会有警告</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先创建bean对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*阿里云OSS相关配置*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line">    <span class="comment">//区域</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="comment">//身份ID</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId ;</span><br><span class="line">    <span class="comment">//身份密钥</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret ;</span><br><span class="line">    <span class="comment">//存储空间</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AliOSSUtils工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//当前类对象由Spring创建和管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line">    <span class="comment">//注入配置参数实体类对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSProperties aliOSSProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取上传的文件的输入流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> multipartFile.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 避免文件覆盖</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.randomUUID().toString() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件到 OSS</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(aliOSSProperties.getEndpoint(),</span><br><span class="line">                aliOSSProperties.getAccessKeyId(), aliOSSProperties.getAccessKeySecret());</span><br><span class="line">        ossClient.putObject(aliOSSProperties.getBucketName(), fileName, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件访问路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span>aliOSSProperties.getEndpoint().split(<span class="string">&quot;//&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;//&quot;</span> + aliOSSProperties.getBucketName() + <span class="string">&quot;.&quot;</span> + aliOSSProperties.getEndpoint().split(<span class="string">&quot;//&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;/&quot;</span> + fileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭ossClient</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        <span class="keyword">return</span> url;<span class="comment">// 把上传到oss的路径返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h3><p>前面我们一直使用springboot项目创建完毕后自带的application.properties进行属性的配置，在springboot项目中支持多种配置方式，比如yml格式的配置文件。</p>
<img src="/pic/配置文件对比.png" style="zoom:67%;" />

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>容易阅读</li>
<li>容易与脚本语言交互</li>
<li>以数据为核心，重数据轻格式</li>
</ul>
<h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul>
<li>大小写敏感</li>
<li>数值前边必须有空格，作为分隔符</li>
<li>使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li><code>#</code>表示注释，从这个字符一直到行尾，都会被解析器忽略</li>
</ul>
<h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><p>常见的有两类：</p>
<ul>
<li>对象&#x2F;Map集合</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组&#x2F;List&#x2F;Set集合</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hobby:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">game</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sport</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>直接将<code>application.properties</code>替换成<code>application.yml</code>后，程序也能正常运行</p>
<h2 id="登录校验"><a href="#登录校验" class="headerlink" title="登录校验"></a>登录校验</h2><p>登录校验，指的是我们在服务器端接收到浏览器发送过来的请求之后，首先我们要对请求进行校验。</p>
<p>先要校验一下用户登录了没有，如果用户已经登录了，就直接执行对应的业务操作就可以了；如果用户没有登录，此时就不允许他执行相关的业务操作，直接给前端响应一个错误的结果，最终跳转到登录页面，要求他登录成功之后，再来访问对应的数据。</p>
<p>但是HTTP协议是无状态协议。是每一次请求都是独立的，下一次请求并不会携带上一次请求的数据，所以是无法判断这个员工到底登陆了没有。</p>
<p>实现思路可以分为两部分：</p>
<ol>
<li><p>在员工登录成功后，需要将用户登录成功的信息存起来，记录用户已经登录成功的标记。</p>
</li>
<li><p>在浏览器发起请求时，需要在服务端进行统一拦截，拦截后进行登录校验。</p>
</li>
</ol>
<p>这涉及到web开发中的两个技术：</p>
<ul>
<li>会话技术</li>
<li>统一拦截技术</li>
</ul>
<h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><p>在web开发当中，浏览器与服务器之间的一次连接，就称为一次会话。</p>
<p>在用户打开浏览器第一次访问服务器的时候，这个会话就建立了，直到有任何一方断开连接，此时会话就结束了。<strong>在一次会话当中，可以包含多次请求和响应</strong>。</p>
<h4 id="会话跟踪"><a href="#会话跟踪" class="headerlink" title="会话跟踪"></a>会话跟踪</h4><p>一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据。</p>
<p>传统的会话跟踪技术有两种，主流的是令牌技术。</p>
<ul>
<li>Cookie(客户端会话跟踪)<ul>
<li>存储在客户端浏览器，在浏览器第一次发起请求时，在服务器端设置cookie。在 cookie 中就可以来存储用户相关的一些数据信息。服务器端会<strong>自动</strong>的将 cookie 响应给浏览器，浏览器接收到响应回来的 cookie 之后，会<strong>自动</strong>的将 cookie 的值存储在浏览器本地。接下来在后续的每一次请求当中，都会将浏览器本地所存储的 cookie <strong>自动</strong>地携带到服务端。</li>
<li>在登录校验时，就是去判断cookie值是否正确，上面的三个自动，是因为cookie 是HTTP协议中所支持的技术，而各大浏览器厂商都支持了这一标准。在 HTTP协议官方给我们提供了一个响应头和请求头：<ul>
<li>响应头 Set-Cookie ：设置Cookie数据的</li>
<li>请求头 Cookie：携带Cookie数据的</li>
</ul>
</li>
<li>缺点：移动端中无法使用；不安全，用户可以禁用cookie；cookie不能跨域</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie1</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;login_username&quot;</span>,<span class="string">&quot;itheima&quot;</span>)); <span class="comment">//设置Cookie/响应Cookie</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//获取Cookie</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/c2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">cookie2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;login_username&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;login_username: &quot;</span>+cookie.getValue()); <span class="comment">//输出name为login_username的cookie</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<ul>
<li>Session(服务端会话跟踪技术)<ul>
<li>存储在服务器端，底层基于Cookie实现。浏览器在第一次请求服务器的时候，会话对象是不存在的，这个时候服务器会自动的创建一个会话对象Session 。而每一个会话对象Session ，它都有一个SessionID。服务器端会将 SessionID 通过 Cookie 响应给浏览器。浏览器会自动Cookie存储在本地。</li>
<li>在后续的每一次请求当中，都会将 Cookie 的数据获取出来，并且携带到服务端。接下来服务器拿到SessionID，从众多的 Session 中找到当前请求对应的会话对象Session。</li>
<li>由于session基于cookie，所以继承了cookie的所有缺点。并且在服务器集群环境下无法直接使用Session。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session1</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s1: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, <span class="string">&quot;tom&quot;</span>); <span class="comment">//往session中存储数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/s2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">session2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        log.info(<span class="string">&quot;HttpSession-s2: &#123;&#125;&quot;</span>, session.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginUser&quot;</span>); <span class="comment">//从session中获取数据</span></span><br><span class="line">        log.info(<span class="string">&quot;loginUser: &#123;&#125;&quot;</span>, loginUser);</span><br><span class="line">        <span class="keyword">return</span> Result.success(loginUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>令牌技术<ul>
<li>所谓令牌，其实就是个字符串，是用户身份的标识。</li>
<li>在请求登录接口的时候，如果登录成功，服务器端生成一个令牌，令牌就是用户的合法身份凭证。接下来在响应数据的时候，可以直接将令牌响应给前端。前端程序将这个令牌存储起来，可以存储在 cookie 当中，也可以存储在其他的存储空间(比如：localStorage)当中。</li>
<li>在后续的每一次请求当中，都需要<strong>将令牌携带到服务端来校验令牌</strong>的有效性。如果令牌是有效的，就说明用户已经执行了登录操作，如果令牌是无效的，就说明用户之前并未执行登录操作。</li>
<li>令牌中也可以存放 同一次会话的多个请求之间的共享数据。支持PC端、移动端解决集群环境下的认证问题减轻服务器的存储压力（无需在服务器端存储）</li>
</ul>
</li>
</ul>
<h3 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h3><p>JWT全称：JSON Web Token  （官网：<a href="https://jwt.io/%EF%BC%89%E3%80%82%E5%AE%9A%E4%B9%89%E4%BA%86%E4%B8%80%E7%A7%8D%E7%AE%80%E6%B4%81%E7%9A%84%E3%80%81%E8%87%AA%E5%8C%85%E5%90%AB%E7%9A%84%E6%A0%BC%E5%BC%8F%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%9C%A8%E9%80%9A%E4%BF%A1%E5%8F%8C%E6%96%B9%E4%BB%A5json%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%AE%89%E5%85%A8%E7%9A%84%E4%BC%A0%E8%BE%93%E4%BF%A1%E6%81%AF%E3%80%82%E7%94%B1%E4%BA%8E%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E7%9A%84%E5%AD%98%E5%9C%A8%EF%BC%8C%E8%BF%99%E4%BA%9B%E4%BF%A1%E6%81%AF%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84%E3%80%82">https://jwt.io/）。定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</a></p>
<blockquote>
<p>简洁：是指jwt就是一个简单的字符串。可以在请求参数或者是请求头当中直接传递。</p>
<p>自包含：指的是jwt令牌，看似是一个随机的字符串，但是我们是可以根据自身的需求在jwt令牌中存储自定义的数据内容。如：可以直接在jwt令牌中存储用户的相关信息。</p>
<p>简单来讲，jwt就是将原始的json数据格式进行了安全的封装，这样就可以直接基于jwt在通信双方安全的进行信息传输了。</p>
</blockquote>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h4><ul>
<li>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：{“alg”:”HS256”,”type”:”JWT”}</li>
<li>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：{“id”:”1”,”username”:”Tom”}</li>
<li>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，<strong>通过指定签名算法计算而来</strong>。</li>
</ul>
<p><img src="/pic/jwt%E7%BB%84%E6%88%90.png" alt="jwt的组成"></p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>jwt通过base64编码将json数据编码成字符串，能编码就意味着也能解码。但签名部分并不是base64编码，是经过签名算法计算出来的，所以是不会被解析出来的。</p>
<h4 id="应用到项目中"><a href="#应用到项目中" class="headerlink" title="应用到项目中"></a>应用到项目中</h4><p>先引入JWT的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JWT工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signKey</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;<span class="comment">//签名密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> <span class="number">43200000L</span>; <span class="comment">//有效时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims JWT第二部分负载 payload 中存储的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateJwt</span><span class="params">(Map&lt;String, Object&gt; claims)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .addClaims(claims)<span class="comment">//自定义信息（有效载荷）</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signKey)<span class="comment">//签名算法（头部）</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expire))<span class="comment">//过期时间</span></span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jwt JWT令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> JWT第二部分负载 payload 中存储的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">parseJWT</span><span class="params">(String jwt)</span>&#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(signKey)<span class="comment">//指定签名密钥</span></span><br><span class="line">                .parseClaimsJws(jwt)<span class="comment">//指定令牌Token</span></span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>登录成功，生成JWT令牌并返回</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Emp emp)</span> &#123;</span><br><span class="line">        <span class="comment">//调用业务层：登录功能</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">loginEmp</span> <span class="operator">=</span> empService.login(emp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断：登录用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(loginEmp !=<span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="comment">//自定义信息</span></span><br><span class="line">            Map&lt;String , Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            claims.put(<span class="string">&quot;id&quot;</span>, loginEmp.getId());</span><br><span class="line">            claims.put(<span class="string">&quot;username&quot;</span>,loginEmp.getUsername());</span><br><span class="line">            claims.put(<span class="string">&quot;name&quot;</span>,loginEmp.getName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用JWT工具类，生成身份令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.generateJwt(claims);</span><br><span class="line">            <span class="keyword">return</span> Result.success(token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后续的每一次请求中，请求头都应该包含一个token(JWT令牌)，将这个令牌携带到服务端校验。</p>
<h3 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h3><p>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能。过滤器一般完成一些<strong>通用的操作</strong>，比如：登录校验、统一编码处理、敏感字符处理等。</p>
<h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><p>定义一个类，实现 Filter 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <span class="comment">//配置过滤器要拦截的请求路径（/* 表示拦截浏览器的所有请求）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//初始化方法, 只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 初始化方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//拦截到请求之后调用, 调用多次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo 拦截到了请求...放行前逻辑&quot;</span>);<span class="comment">//放行之前的逻辑</span></span><br><span class="line">        chain.doFilter(request,response);<span class="comment">//放行操作</span></span><br><span class="line">        <span class="comment">//放行之后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//销毁方法, 只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy 销毁方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还需要在<strong>启动类</strong>上面加上一个注解@ServletComponentScan，通过这个注解来开启SpringBoot项目对于Servlet组件的支持。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TliasWebManagementApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TliasWebManagementApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>过滤器拦截到了请求之后，如果希望继续访问后面的web资源，就要<strong>执行放行操作</strong>，放行就是调用FilterChain对象当中的doFilter()方法，在调用doFilter()这个方法之前所编写的代码属于放行之前的逻辑。在放行后访问完 web 资源之后<strong>还会回到过滤器中</strong>，如有需求还可以执行放行之后的逻辑，放行之后的逻辑写在doFilter()这行代码之后。</p>
<h4 id="拦截路径"><a href="#拦截路径" class="headerlink" title="拦截路径"></a>拦截路径</h4><table>
<thead>
<tr>
<th>拦截路径</th>
<th>urlPatterns值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>拦截具体路径</td>
<td>&#x2F;login</td>
<td>只有访问 &#x2F;login 路径时，才会被拦截</td>
</tr>
<tr>
<td>目录拦截</td>
<td>&#x2F;emps&#x2F;*</td>
<td>访问&#x2F;emps下的所有资源，都会被拦截</td>
</tr>
<tr>
<td>拦截所有</td>
<td>&#x2F;*</td>
<td>访问所有资源，都会被拦截</td>
</tr>
</tbody></table>
<h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>过滤器链指的是在一个web应用程序当中，可以配置多个过滤器，多个过滤器就形成了一个过滤器链。</p>
<p>链上的过滤器在执行的时候会一个一个的执行，会先执行第一个Filter，放行之后再来执行第二个Filter，如果执行到了最后一个过滤器放行之后，才会访问对应的web资源。</p>
<p>访问完web资源之后，按照我们刚才所介绍的过滤器的执行流程，还会回到过滤器当中来执行过滤器放行后的逻辑，而在执行放行后的逻辑的时候，顺序是反着的。</p>
<p>先要执行过滤器2放行之后的逻辑，再来执行过滤器1放行之后的逻辑，最后在给浏览器响应数据。</p>
<p><strong>如何确定谁是第一个，谁是第二个</strong></p>
<p>以注解方式配置的Filter过滤器，它的执行优先级是按过滤器<strong>类名的字典序</strong>自动排序确定的，类名排名越靠前，优先级越高。</p>
<h4 id="登录校验Filter"><a href="#登录校验Filter" class="headerlink" title="登录校验Filter"></a>登录校验Filter</h4><img src="/pic/登录校验filter.png" style="zoom:67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span> <span class="comment">//拦截所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//前置：强制转换为http协议的请求对象、响应对象 （转换原因：要使用子类中特有方法）</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取请求url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURL().toString();</span><br><span class="line">        log.info(<span class="string">&quot;请求路径：&#123;&#125;&quot;</span>, url); <span class="comment">//请求路径：http://localhost:8080/login</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span></span><br><span class="line">        <span class="keyword">if</span>(url.contains(<span class="string">&quot;/login&quot;</span>))&#123;</span><br><span class="line">            chain.doFilter(request, response);<span class="comment">//放行请求</span></span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//结束当前方法的执行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌（token）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;从请求头中获取的令牌：&#123;&#125;&quot;</span>,token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(token))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Token不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Result</span> <span class="variable">responseResult</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//把Result对象转换为JSON格式字符串 </span></span><br><span class="line">            <span class="comment">//之前在controller中有responsebody注解，会自动转换</span></span><br><span class="line">            <span class="comment">//(fastjson是阿里提供的用于实现对象和json的转换工具类)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.toJSONString(responseResult);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJWT(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌解析失败!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Result</span> <span class="variable">responseResult</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//把Result对象转换为JSON格式字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.toJSONString(responseResult);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fastjson需要引入如下依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h3><p>是一种动态拦截方法调用的机制，类似于过滤器。Spring框架提供的，用来动态<strong>拦截控制器方法</strong>的执行。</p>
<p>拦截请求，在指定方法调用前后，根据业务执行预先设定的代码。拦截器通常也是做一些通用性的操作</p>
<h4 id="简单实现-1"><a href="#简单实现-1" class="headerlink" title="简单实现"></a>简单实现</h4><p><strong>自定义拦截器：</strong>实现HandlerInterceptor接口，并重写其所有方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义拦截器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//目标资源方法执行前执行。 返回true：放行    返回false：不放行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle .... &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//true表示放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标资源方法执行后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle ... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//视图渲染完毕后执行，最后执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion .... &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注册配置拦截器</strong>：实现WebMvcConfigurer接口，并重写addInterceptors方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//spring中配置类标识</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自定义的拦截器对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       <span class="comment">//注册自定义拦截器对象</span></span><br><span class="line">       registry.addInterceptor(loginCheckInterceptor)</span><br><span class="line">               .addPathPatterns(<span class="string">&quot;/**&quot;</span>);<span class="comment">//设置拦截器拦截的请求路径（ /** 表示拦截所有请求）</span></span><br><span class="line">        	   .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);<span class="comment">//设置不拦截的请求路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="拦截路径-1"><a href="#拦截路径-1" class="headerlink" title="拦截路径"></a>拦截路径</h4><table>
<thead>
<tr>
<th>拦截路径</th>
<th>含义</th>
<th>举例</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;*</td>
<td>一级路径</td>
<td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td>
</tr>
<tr>
<td>&#x2F;**</td>
<td>任意级路径</td>
<td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td>
</tr>
<tr>
<td>&#x2F;depts&#x2F;*</td>
<td>&#x2F;depts下的一级路径</td>
<td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td>
</tr>
<tr>
<td>&#x2F;depts&#x2F;**</td>
<td>&#x2F;depts下的任意级路径</td>
<td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td>
</tr>
</tbody></table>
<h4 id="执行流程-1"><a href="#执行流程-1" class="headerlink" title="执行流程"></a>执行流程</h4><p>过滤器是servlet提供的，拦截所有资源；拦截器是spring提供的，拦截spring中的资源。</p>
<p>浏览器访问web应用时，过滤器会拦截到这次请求。由于我们基于springboot开发，过滤器放行之后进入到了spring的环境当中，也就是要访问controller接口方法。Tomcat并不识别所编写的Controller程序，但是它识别Servlet程序，所以在Spring的Web环境中提供了一个非常核心的Servlet：DispatcherServlet（前端控制器），所有请求都会先进行到DispatcherServlet，再将请求转给Controller。</p>
<p>当我们定义了拦截器后，会在执行Controller的方法之前，请求被拦截器拦截住。执行<code>preHandle()</code>方法，这个方法执行完成后需要返回一个布尔类型的值，如果返回true，就表示放行本次操作，才会继续访问controller中的方法；如果返回false，则不会放行（controller中的方法也不会执行）。在controller当中的方法执行完毕之后，再回过来执行<code>postHandle()</code>这个方法以及<code>afterCompletion()</code> 方法，然后再返回给DispatcherServlet，最终再来执行过滤器当中放行后的这一部分逻辑的逻辑。执行完毕之后，最终给浏览器响应数据。</p>
<img src="/pic/拦截器执行过程.png" style="zoom:80%;" />

<h4 id="登录校验拦截器"><a href="#登录校验拦截器" class="headerlink" title="登录校验拦截器"></a>登录校验拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义拦截器</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//当前拦截器对象由Spring创建和管理</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//前置方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle .... &quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取请求url</span></span><br><span class="line">        <span class="comment">//2.判断请求url中是否包含login，如果包含，说明是登录操作，放行</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取请求头中的令牌（token）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;从请求头中获取的令牌：&#123;&#125;&quot;</span>,token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断令牌是否存在，如果不存在，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(token))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;Token不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建响应结果对象</span></span><br><span class="line">            <span class="type">Result</span> <span class="variable">responseResult</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.toJSONString(responseResult);</span><br><span class="line">            <span class="comment">//设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//不放行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.解析token，如果解析失败，返回错误结果（未登录）</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.parseJWT(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;令牌解析失败!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建响应结果对象</span></span><br><span class="line">            <span class="type">Result</span> <span class="variable">responseResult</span> <span class="operator">=</span> Result.error(<span class="string">&quot;NOT_LOGIN&quot;</span>);</span><br><span class="line">            <span class="comment">//把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.toJSONString(responseResult);</span><br><span class="line">            <span class="comment">//设置响应头</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//响应</span></span><br><span class="line">            response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注册配置拦截器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//拦截器对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">       <span class="comment">//注册自定义拦截器对象</span></span><br><span class="line">        registry.addInterceptor(loginCheckInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>当前案例中没有任何的异常处理，三层架构默认的处理异常的方案：</p>
<ul>
<li>Mapper接口在操作数据库的时候出错了，此时异常会往上抛(谁调用Mapper就抛给谁)，会抛给service。 </li>
<li>service 中也存在异常了，会抛给controller。</li>
<li>controller把异常会再往上抛。最终抛给框架之后，框架就会返回一个JSON格式的数据，里面封装的就是错误的信息，但是框架返回的JSON格式的数据并不符合我们的开发规范。</li>
</ul>
<p>添加异常处理有<strong>两种方案</strong></p>
<ul>
<li>方案一：在所有Controller的所有方法中进行try…catch处理<ul>
<li>缺点：代码臃肿（不推荐）</li>
</ul>
</li>
<li>方案二：全局异常处理器<ul>
<li>好处：简单、优雅（推荐）</li>
</ul>
</li>
</ul>
<h3 id="全局异常处理器"><a href="#全局异常处理器" class="headerlink" title="全局异常处理器"></a>全局异常处理器</h3><p>定义一个类，在类上加上一个注解@RestControllerAdvice，代表这是一个全局异常处理器。</p>
<p>在全局异常处理器当中，需要定义一个方法来捕获异常，在这个方法上需要加上注解@ExceptionHandler。通过@ExceptionHandler注解当中的value属性来指定我们要捕获的是哪一类型的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span> <span class="comment">//指定能够处理的异常类型</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">ex</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        e.printStackTrace();<span class="comment">//打印堆栈中的异常信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//捕获到异常之后，响应一个标准的Result</span></span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;对不起,操作失败,请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@RestControllerAdvice &#x3D; @ControllerAdvice + @ResponseBody</p>
<p>处理异常的方法返回值会转换为json后再响应给前端</p>
</blockquote>
<h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>在数据库中已经接触过事务，<strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体，一起向数据库提交或者是撤销操作请求。所以这组操作要么同时成功，要么同时失败。</p>
<p>怎么样来控制这组操作，让这组操作同时成功或同时失败呢？此时就要涉及到事务的具体操作了。</p>
<p>事务的操作主要有三步：</p>
<ol>
<li>开启事务（一组操作开始前，开启事务）：start transaction &#x2F; begin ;</li>
<li>提交事务（这组操作全部成功后，提交事务）：commit ;</li>
<li>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</li>
</ol>
<h3 id="spring事务管理"><a href="#spring事务管理" class="headerlink" title="spring事务管理"></a>spring事务管理</h3><blockquote>
<p>注解：@Transactional</p>
<p>位置：业务（service）层的方法上(或类上、接口上)</p>
<p>作用：将当前方法交给spring进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常时，回滚事务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>  <span class="comment">//当前方法添加了事务管理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="comment">//根据部门id删除部门信息</span></span><br><span class="line">        deptMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除部门下的所有员工信息</span></span><br><span class="line">        empMapper.deleteByDeptId(id);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在application.yml配置文件中开启事务管理日志，这样就可以在控制看到和事务相关的日志信息了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring事务管理日志</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.jdbc.support.JdbcTransactionManager:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h3 id="rollbackfor属性"><a href="#rollbackfor属性" class="headerlink" title="rollbackfor属性"></a>rollbackfor属性</h3><p>l默认情况下，只有<strong>出现 RuntimeException 才回滚异常</strong>。rollbackFor属性用于控制出现何种异常类型时回滚事务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="comment">//根据部门id删除部门信息</span></span><br><span class="line">        deptMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除部门下的所有员工信息</span></span><br><span class="line">        empMapper.deleteByDeptId(id);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h3><p>这个属性用来配置事务的传播行为。事务的传播行为是当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</p>
<p>例如在A方法运行的时候，首先会开启一个事务，在A方法当中又调用了B方法， B方法自身也具有事务，那么B方法在运行的时候，到底是加入到A方法的事务当中来，还是B方法在运行的时候新建一个事务？这个就涉及到了事务的传播行为。</p>
<table>
<thead>
<tr>
<th><strong>属性值</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>REQUIRED</strong></td>
<td>【默认值】需要事务，有则加入，无则创建新事务</td>
</tr>
<tr>
<td><strong>REQUIRES_NEW</strong></td>
<td>需要新事务，无论有无，总是创建新事务</td>
</tr>
<tr>
<td>SUPPORTS</td>
<td>支持事务，有则加入，无则在无事务状态中运行</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>不支持事务，在无事务状态下运行,如果当前存在已有事务,则挂起当前事务</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>必须有事务，否则抛异常</td>
</tr>
<tr>
<td>NEVER</td>
<td>必须没事务，否则抛异常</td>
</tr>
</tbody></table>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>解散部门时，无论是成功还是失败，都要记录操作日志。</p>
<blockquote>
<ol>
<li>执行解散部门的业务：先删除部门，再删除部门下的员工</li>
<li>记录解散部门的日志，到数据库日志表</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@Transactional //当前业务实现类中的所有的方法，都添加了spring事务管理机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptLogService deptLogService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据部门id，删除部门信息及部门下的所有员工</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//根据部门id删除部门信息</span></span><br><span class="line">            deptMapper.deleteById(id);</span><br><span class="line">            <span class="comment">//模拟：异常</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;出现异常了~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//删除部门下的所有员工信息</span></span><br><span class="line">            empMapper.deleteByDeptId(id);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//不论是否有异常，最终都要执行的代码：记录日志</span></span><br><span class="line">            <span class="type">DeptLog</span> <span class="variable">deptLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeptLog</span>();</span><br><span class="line">            deptLog.setCreateTime(LocalDateTime.now());</span><br><span class="line">            deptLog.setDescription(<span class="string">&quot;执行了解散部门的操作，此时解散的是&quot;</span>+id+<span class="string">&quot;号部门&quot;</span>);</span><br><span class="line">            <span class="comment">//调用其他业务类中的方法</span></span><br><span class="line">            deptLogService.insert(deptLog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略其他代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeptLogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DeptLogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DeptLogMapper deptLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(DeptLog deptLog)</span> &#123;</span><br><span class="line">        deptLogMapper.insert(deptLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>插入日志和删除部门都是事务，如果按默认的事务传播行为，这两个操作在一个事务范围内。在删除失败报出异常后，这个事务就会被回滚，两个操作都被撤销，不满足需求。</p>
<p>正确的做法是指定传播行为是<code>Propagation.REQUIRES_NEW</code>，保证两个操作属于不同的事务。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP英文全称：Aspect Oriented Programming（面向切面编程、面向方面编程），其实说白了，面向切面编程就是<strong>面向特定方法编程</strong>。 sping三大核心：控制反转、依赖注入、AOP。</p>
<p>比如现在要统计项目中所有的方法耗时，就需要在所有的方法开始之前计时，结束时计时，统计耗时。需要一个一个方法去修改，很繁琐。</p>
<p>AOP面向方法编程，就可以做到在不改动这些原始方法的基础上，<strong>针对特定的方法进行功能的增强或改动</strong>。</p>
<p>可以定义一个模板方法，前后统计时间，中间就来运行原始的业务方法。而原始的业务方法可以是某个单一的方法，也可以是一系列相关的方法。<strong>面向这样的指定的一个或多个方法进行编程，我们就称之为 面向切面编程。</strong></p>
<p><strong>动态代理是面向切面编程最主流的实现</strong>，SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中<strong>底层使用动态代理机制</strong>，对特定的方法进行编程(功能增强)。</p>
<h3 id="SpringAOP入门"><a href="#SpringAOP入门" class="headerlink" title="SpringAOP入门"></a>SpringAOP入门</h3><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写AOP程序：针对于特定方法根据业务需要进行编程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//IoC</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//当前类为切面类</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span> <span class="comment">//切入点表达式，对哪些特点方法有效</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//记录方法执行开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录方法执行结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算方法执行耗时</span></span><br><span class="line">        log.info(pjp.getSignature()+<span class="string">&quot;执行耗时: &#123;&#125;毫秒&quot;</span>,end-begin);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相关方法执行时，会自动执行这个程序。</p>
<p><strong>应用场景</strong>如下：</p>
<ul>
<li>记录系统的操作日志</li>
<li>权限控制</li>
<li>事务管理：我们前面所讲解的Spring事务管理，底层其实也是通过AOP来实现的，只要添加@Transactional注解之后，AOP程序自动会在原始方法运行前先来开启事务，在原始方法运行完毕之后提交或回滚事务</li>
</ul>
<p>AOP面向切面编程的一些<strong>优势</strong>：</p>
<ul>
<li><p>代码无侵入：没有修改原始的业务方法，就已经对原始的业务方法进行了功能的增强或者是功能的改变</p>
</li>
<li><p>减少了重复代码</p>
</li>
<li><p>提高开发效率</p>
</li>
<li><p>维护方便</p>
</li>
</ul>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p><strong>1. 连接点：JoinPoint</strong></p>
<p>被AOP控制的方法（暗含方法执行时的相关信息），在SpringAOP提供的JoinPoint当中，封装了连接点方法在执行时的相关信息。</p>
<p><strong>2. 通知：Advice</strong>，指哪些重复的逻辑，也就是共性功能（最终体现为一个方法）。比如上面的案例中，统计时间的函数<code>recordTime</code>就是一个通知。</p>
<p><strong>3. 切入点：PointCut</strong>，匹配连接点的条件(哪些方法成为连接点)，通知仅会在切入点方法执行时被应用。由<code>@Around</code>定义</p>
<p><strong>4. 切面：Aspect</strong>，描述通知与切入点的对应关系（通知+切入点），切面所在的类，我们一般称为<strong>切面类</strong>（被@Aspect注解标识的类）</p>
<p><strong>5. 目标对象：Target</strong>，通知所应用的对象</p>
<p>Spring的AOP底层是基于动态代理技术来实现的，运行时会自动的基于动态代理技术为目标对象生成一个对应的代理对象。在代理对象当中就会对目标对象当中的原始方法进行功能的增强，代理的具体内容就是通知。 </p>
<p>在执行切入点方法时，自动注入的就不是切入点方法对象，而是代理对象。</p>
<h3 id="通知方式"><a href="#通知方式" class="headerlink" title="通知方式"></a>通知方式</h3><ul>
<li>@Around：环绕通知，此注解标注的通知方法在目标方法前、后都被执行</li>
<li>@Before：前置通知，此注解标注的通知方法在目标方法前被执行</li>
<li>@After ：后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</li>
<li>@AfterReturning ： 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</li>
<li>@AfterThrowing ： 异常后通知，此注解标注的通知方法发生异常后执行</li>
</ul>
<p>注意事项：</p>
<ul>
<li>@Around环绕通知需要自己调用 ProceedingJoinPoint.proceed() 来让原始方法执行，其他通知不需要考虑目标方法执行</li>
<li>@Around环绕通知方法的返回值，必须指定为Object，来接收原始方法的返回值，否则原始方法执行完毕，是获取不到返回值的</li>
</ul>
<h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><p>如果多个切面类中多个切入点都匹配到了同一个目标方法。此时当目标方法在运行的时候，这多个切面类当中的这些通知方法都会运行。</p>
<p>在不同切面类中，<strong>默认按照切面类的类名字母排序：</strong></p>
<ul>
<li>前置通知：字母排名靠前的先执行</li>
<li>后置通知：字母排名靠前的后执行</li>
</ul>
<h4 id="更改方式"><a href="#更改方式" class="headerlink" title="更改方式"></a>更改方式</h4><ul>
<li><p>修改切面类的类名（这种方式非常繁琐、而且不便管理）</p>
</li>
<li><p>使用Spring提供的@Order注解</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(2)</span>  <span class="comment">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect2</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect2 -&gt; before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知 </span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect2 -&gt; after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Order(3)</span>  <span class="comment">//切面类的执行顺序（前置通知：数字越小先执行; 后置通知：数字越小越后执行）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect3</span> &#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect3 -&gt; before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;MyAspect3 -&gt;  after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><h4 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h4><p>对于相同的切入点表达式，不是很次都要重新写一遍，可以像函数一样封装起来直接使用，称为<strong>抽取</strong>。Spring提供了@PointCut注解，该注解的作用是将公共的切入点表达式抽取出来，需要用到时引用该切入点表达式即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切入点方法（公共的切入点表达式）</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知（引用切入点）</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h4><ul>
<li><p>execution(……)：根据方法的签名来匹配</p>
<ul>
<li><blockquote>
<p>execution(访问修饰符?  返回值  包名.类名.?方法名(方法参数) throws 异常?)</p>
<p>其中带 ? 的表示可以省略的部分<br>访问修饰符：可省略（比如: public、protected）<br>包名.类名： 可省略<br>throws 异常：可省略（注意是方法上声明抛出的异常，不是实际抛出的异常）</p>
<p>可以使用通配符描述切入点</p>
<ul>
<li>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li>
</ul>
<p>.. ：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p>
</blockquote>
</li>
</ul>
</li>
<li><p>@annotation(……) ：根据注解匹配，匹配标识有特定注解的方法，可以是自定义的注解</p>
<ul>
<li><blockquote>
<p>@annotation(com.itheima.anno.Log)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>在Spring中用JoinPoint抽象了连接点，用它可以获得方法执行时的相关信息，如目标类名、方法名、方法参数等。</p>
<ul>
<li><p>对于@Around通知，获取连接点信息只能使用ProceedingJoinPoint类型</p>
</li>
<li><p>对于其他四种通知，获取连接点信息只能使用JoinPoint，它是ProceedingJoinPoint的父类型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.itheima.anno.MyLog)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(joinPoint.getSignature().getName() + <span class="string">&quot; MyAspect7 -&gt; before ...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果使用注解作为切入点，获取注解中的value(AutoFill注解为例)</span></span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature)joinPoint.getSignature();</span><br><span class="line">        <span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);</span><br><span class="line">        <span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(joinPoint.getSignature().getName() + <span class="string">&quot; MyAspect7 -&gt; after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//获取目标类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> pjp.getTarget().getClass().getName();</span><br><span class="line">        log.info(<span class="string">&quot;目标类名：&#123;&#125;&quot;</span>,name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> pjp.getSignature().getName();</span><br><span class="line">        log.info(<span class="string">&quot;目标方法名：&#123;&#125;&quot;</span>,methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法执行时需要的参数</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        log.info(<span class="string">&quot;目标方法参数：&#123;&#125;&quot;</span>, Arrays.toString(args));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><img src="/pic/spring.png" style="zoom:80%;" />

<p>IOC控制反转、DI依赖注入、AOP面向切面编程、事务管理、全局异常处理、拦截器等，这些技术都是 Spring Framework框架当中提供的核心功能。</p>
<p>在Spring框架的生态中，对web程序开发提供了很好的支持，如：全局异常处理器、拦截器。这些都是Spring框架中web开发模块所提供的功能，而Spring框架的web开发模块，我们也称为：SpringMVC</p>
<img src="/pic/web总结.png" style="zoom: 80%;" />

<p>SpringMVC不是一个单独的框架，它是Spring框架的一部分，是Spring框架中的web开发模块，是用来简化原始的Servlet程序开发的。</p>
<p>SSM，就是由：SpringMVC、Spring Framework、Mybatis三块组成。</p>
<p>基于传统的SSM框架进行整合开发项目会比较繁琐，而且效率也比较低，所以在现在的企业项目开发当中，基本上都是直接基于SpringBoot整合SSM进行项目开发的。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java微服务</title>
    <url>/2024/01/22/21-57-37/</url>
    <content><![CDATA[<h2 id="认识微服务"><a href="#认识微服务" class="headerlink" title="认识微服务"></a>认识微服务</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>将业务的所有功能集中在一个项目中开发，打成一个包部署。适合开发功能相对简单，规模较小的项目。</p>
<p>优点是架构简单，部署成本低。但是耦合度高，不利于维护。</p>
<h3 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h3><p>根据业务功能将系统拆分，每个业务模块作为独立项目开发，称为一个<strong>服务</strong>。可以降低耦合，有利于服务升级扩展。</p>
<span id="more"></span>

<h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>分布式架构要考虑很多问题</p>
<ul>
<li>服务拆分粒度</li>
<li>服务集群地址如何维护</li>
<li>服务之间如何远程调用</li>
<li>服务健康状态如何感知</li>
</ul>
<p><strong>微服务是一种经过良好架构设计的分布式架构方案</strong></p>
<ul>
<li><p>单一职责，粒度小，每个服务对应唯一的业务能力。</p>
</li>
<li><p>面向服务：微服务对外暴露业务接口</p>
</li>
<li><p>自治：团队独立、技术独立、数据独立、部署独立</p>
</li>
<li><p>隔离性好：避免出现级联问题</p>
</li>
</ul>
<h3 id="微服务技术对比"><a href="#微服务技术对比" class="headerlink" title="微服务技术对比"></a>微服务技术对比</h3><p>国内最知名的微服务框架是SpringCloud和阿里的Dubbo。通常微服务需要有注册中心、配置中心、服务网关等。</p>
<img src="/pic/微服务技术对比.png" style="zoom: 80%;" />

<p>企业中大致可以分为两类：基于Dubbo方式的和基于Feign方式的</p>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud%E3%80%82">https://spring.io/projects/spring-cloud。</a></p>
<p>SpringCloud<strong>集成</strong>了各种微服务功能组件，包括SpringCloud Alibaba，并<strong>基于SpringBoot</strong>实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p>
<p>对于SpringBoot的版本也有兼容性要求：</p>
<table>
<thead>
<tr>
<th>SpringCloud版本</th>
<th>SpringBoot版本</th>
</tr>
</thead>
<tbody><tr>
<td>2022.0.x aka Kilburn</td>
<td>3.0.x</td>
</tr>
<tr>
<td>2021.0.x aka Jubilee</td>
<td>2.6.x, 2.7.x (Starting with 2021.0.3)</td>
</tr>
<tr>
<td>2020.0.x aka Ilford</td>
<td>2.4.x, 2.5.x (Starting with 2020.0.3)</td>
</tr>
<tr>
<td>Hoxton</td>
<td>2.2.x, 2.3.x (Starting with SR5)</td>
</tr>
<tr>
<td>Greenwich</td>
<td>2.1.x</td>
</tr>
<tr>
<td>Finchley</td>
<td>2.0.x</td>
</tr>
<tr>
<td>Edgware</td>
<td>1.5.x</td>
</tr>
<tr>
<td>Dalston</td>
<td>1.5.x</td>
</tr>
</tbody></table>
<h3 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h3><ol>
<li>不同的微服务，不要重复开发相同业务</li>
<li>微服务数据独立，不要访问其他微服务的数据库</li>
<li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li>
</ol>
<h3 id="服务远程调用"><a href="#服务远程调用" class="headerlink" title="服务远程调用"></a>服务远程调用</h3><p>现在有两个服务，订单模块和用户模块，有个需求：查询订单信息并把订单所属用户的信息一起返回。</p>
<p>显然不能让订单模块去查用户表，因为数据是独立的。可以让订单模块<strong>发起请求</strong>，获取到用户数据。Spring提供了 <code>RestTemplate</code> 来发起各种请求。</p>
<h4 id="注册RestTemplate"><a href="#注册RestTemplate" class="headerlink" title="注册RestTemplate"></a>注册<code>RestTemplate</code></h4><p>在order-service服务中的OrderApplication启动类中，注册RestTemplate实例 (其他配置类也可，注入bean而已)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mapper类前没加@Mapper注解，被这个注解代替了，可以把bean交给容器管理</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2.查询用户</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> +  order.getUserId();</span><br><span class="line">    <span class="comment">// 自动把json序列化成对象 ，get请求</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="comment">// 3.封装user信息</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="提供者和消费者"><a href="#提供者和消费者" class="headerlink" title="提供者和消费者"></a>提供者和消费者</h3><p>在服务调用关系中，会有两个不同的角色：</p>
<p><strong>服务提供者</strong>：<strong>一次业务中</strong>，被其它微服务调用的服务。（提供接口给其它微服务）</p>
<p><strong>服务消费者</strong>：<strong>一次业务中</strong>，调用其它微服务的服务。（调用其它微服务提供的接口）</p>
<p>一个服务在不同的业务中可能是不同角色，即任何一个微服务都可以是提供者，也可以是消费者。</p>
<h2 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h2><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>如果服务提供者user-service部署了多个实例，那么会存在几个问题</p>
<ul>
<li>order-service在提供服务时，消费者该如何得知各实例的ip地址和端口？</li>
<li>有多个user-service实例地址，消费者该如何选择？</li>
<li>各user-service实例是否依然健康，是不是已经宕机？</li>
</ul>
<h3 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h3><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka。</p>
<img src="/pic/Eureka注册中心.png" style="zoom:67%;" />

<p>Eureka分为两部分，一是server，是一个注册中心；二是client，服务提供者和消费者都属于client。</p>
<p>服务启动时，每个服务会把自己的信息注册给Eureka记录下来。消费者向Eureka进行<strong>服务拉取</strong>，获取提供者的信息，利用<strong>负载均衡</strong>选中其中一个实例，从而发起请求。</p>
<p>微服务会向Euraka发<strong>心跳</strong>，当超过一定时间没有发送心跳时，eureka会认为微服务实例故障，将该实例从服务列表中剔除。</p>
<h3 id="搭建Eureka-server"><a href="#搭建Eureka-server" class="headerlink" title="搭建Eureka-server"></a>搭建Eureka-server</h3><p>需要创建一个独立的微服务。</p>
<h4 id="引入eureka依赖"><a href="#引入eureka依赖" class="headerlink" title="引入eureka依赖"></a>引入eureka依赖</h4><p>引入SpringCloud为eureka提供的starter依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写启动类"><a href="#编写启动类" class="headerlink" title="编写启动类"></a>编写启动类</h4><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p>编写一个application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<p>启动Eureka后，在idea的底部service标签栏可以看到正在运行的服务，点击端口后可以直接进入Eureka 的管理页面。</p>
<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>把其他微服务注册到eureka-server中去，以user-service为例。</p>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure>

<h4 id="启动多个实例"><a href="#启动多个实例" class="headerlink" title="启动多个实例"></a>启动多个实例</h4><p>为了<strong>演示</strong>一个服务有多个实例的场景，添加一个SpringBoot的启动配置，再启动一个user-service。</p>
<p>首先，复制原来的user-service启动配置：</p>
<p><img src="/pic/%E5%A4%8D%E5%88%B6%E9%85%8D%E7%BD%AE.png"></p>
<p>然后，在弹出的窗口中，填写信息，启动多个实例时需要更改端口，否则会端口冲突。</p>
<img src="/pic/config.png" style="zoom:80%;" />

<p>启动后发现eureka-server管理页面的变化，<strong>USERSERVICE</strong>实例数量变成2个</p>
<h3 id="服务拉取"><a href="#服务拉取" class="headerlink" title="服务拉取"></a>服务拉取</h3><p>服务拉取是<strong>基于服务名称获取服务列表</strong>，然后对服务列表做负载均衡。</p>
<ul>
<li>修改order-service代码，修改请求路径，用服务名代替ip和端口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8081/user/&quot;</span> +  order.getUserId();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改为</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br></pre></td></tr></table></figure>



<ul>
<li>在order-service的启动类中的RestTemplate添加负载均衡注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="comment">// 这个注释标记 restTemplate的请求会被Ribbon拦截和处理</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时，消费者能正常请求提供者的服务，并且在<strong>消费者端完成了负载均衡</strong>。</p>
<h3 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h3><p>上面负载均衡的功能是由Ribbon组件实现的，由<code>@LoadBalanced</code>调用。</p>
<img src="/pic/ribbon负载均衡.png" style="zoom: 67%;" />

<p>SpringCloud Ribbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。</p>
<img src="/pic/ribbon负载均衡原理.png" style="zoom: 67%;" />

<ul>
<li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li>
<li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li>
<li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li>
<li>eureka返回列表，localhost:8081、localhost:8082</li>
<li><strong>IRule</strong>利用内置<strong>负载均衡规则</strong>，从列表中选择一个，例如localhost:8081</li>
<li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82">http://localhost:8081/user/1，发起真实请求</a></li>
</ul>
<h4 id="IRule负载均衡策略"><a href="#IRule负载均衡策略" class="headerlink" title="IRule负载均衡策略"></a>IRule负载均衡策略</h4><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p>
<img src="/pic/IRule实现类.png" style="zoom: 67%;" />

<p>常用的负载均衡规则如下：</p>
<table>
<thead>
<tr>
<th><strong>内置负载均衡规则类</strong></th>
<th><strong>规则描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>RoundRobinRule</td>
<td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td>
</tr>
<tr>
<td><strong>ZoneAvoidanceRule</strong></td>
<td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td>
</tr>
<tr>
<td>BestAvailableRule</td>
<td>忽略那些短路的服务器，并选择并发数较低的服务器。</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个可用的服务器。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>重试机制的选择逻辑</td>
</tr>
</tbody></table>
<p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案。</p>
<h5 id="自定义负载均衡策略"><a href="#自定义负载均衡策略" class="headerlink" title="自定义负载均衡策略"></a>自定义负载均衡策略</h5><p>通过定义IRule实现可以<strong>修改负载均衡规则</strong>，有两种方式：</p>
<ol>
<li>代码方式：在<strong>消费者</strong>中的OrderApplication类中，定义一个新的IRule（全局）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置文件方式：在<strong>消费者</strong>的application.yml文件中，添加新的配置也可以修改规则（局部）</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p>
</blockquote>
<h4 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h4><p>Ribbon<strong>默认是采用懒加载</strong>，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p>
<p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure>



<h2 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h2><p>SpringCloud Alibaba推出的名为Nacos的注册中心。现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>解压安装包即可，需要配置JAVA_HOME环境变量，默认使用8848端口，可以在<code>conf/application.properties</code>文件中修改端口。</p>
<p>启动命令为 <code>.\startup.cmd -m standalone</code> , standalone代表单机启动</p>
<p>然后可以在 <a href="http://127.0.0.1:8848/nacos">http://127.0.0.1:8848/nacos</a> 登录控制台，默认的用户名和密码均为 <code>nacos</code></p>
<h3 id="服务注册-1"><a href="#服务注册-1" class="headerlink" title="服务注册"></a>服务注册</h3><p>把Eureka改成Nacos非常方便，只有两步：改依赖、改地址。</p>
<h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在user-service和order-service中的pom文件中引入nacos-discovery依赖，注释掉eureka的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置地址"><a href="#配置地址" class="headerlink" title="配置地址"></a>配置地址</h4><p>在user-service和order-service的application.yml中添加nacos地址，注释掉eureka的地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure>

<h3 id="服务分级存储模型"><a href="#服务分级存储模型" class="headerlink" title="服务分级存储模型"></a>服务分级存储模型</h3><p>一个<strong>服务</strong>可以有多个实例，大公司通常会把不同实例分布到全国各地的不同机房。Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。如user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p>
<img src="/pic/集群概念.png" style="zoom: 67%;" />

<p>微服务互相访问时，应该尽可能访问<strong>同集群实例</strong>，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。</p>
<h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><p>修改user-service的application.yml文件，添加集群配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span>	</span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure>

<p>再复制一个user-service启动配置，添加属性：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure>

<p>发现这些实例就属于不同集群了。</p>
<h4 id="NacosRule负载均衡"><a href="#NacosRule负载均衡" class="headerlink" title="NacosRule负载均衡"></a>NacosRule负载均衡</h4><p>上面说到要实现同集群优先的负载均衡规则，那就要把默认的规则改掉。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure>

<p><strong>同集群内的多个实例之间是随机</strong>负载均衡。如果同集群的实例挂掉，使得跨集群访问不得不发生，那么系统会弹出警告。</p>
<h3 id="权重配置"><a href="#权重配置" class="headerlink" title="权重配置"></a>权重配置</h3><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p>
<p>因此，Nacos提供了权重配置来<strong>控制访问频率</strong>，权重越大则访问频率越高。</p>
<p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重。</p>
<p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问。这一点也被用于更新实例，更新前把权重置为0，更新完毕后，将权重置为小值，让部分用户测试更新，保证大部分用户的体验。</p>
<h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p>Nacos提供了namespace来实现环境隔离功能。</p>
<img src="/pic/环境隔离.png" style="zoom: 67%;" />

<ul>
<li>nacos中可以有多个namespace，每个namespace都有唯一的ID号。</li>
<li>namespace下可以有group、service等</li>
<li>不同namespace之间相互隔离，例如<strong>不同namespace的服务互相不可见</strong>，远程调用也会失效。</li>
</ul>
<p>默认情况下，Nacos只有一个namespace，叫public。可以在控制台添加新的namespace，把微服务配置到别的namespace需要<strong>修改配置文件</strong>。</p>
<p>例如，修改order-service的application.yml文件，注意<strong>填的是命名空间的ID</strong>，不是名称。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure>

<h2 id="Nacos和Eureka的区别"><a href="#Nacos和Eureka的区别" class="headerlink" title="Nacos和Eureka的区别"></a>Nacos和Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p>
<ul>
<li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p>
</li>
<li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p>
</li>
</ul>
<p>配置一个服务实例为永久实例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure>

<p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p>
<p><img src="/pic/Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83.png" alt="image-20210714001728017"></p>
<ul>
<li><p>Nacos与eureka的共同点</p>
<ul>
<li>都支持服务注册和服务拉取</li>
<li>都支持服务提供者心跳方式做健康检测</li>
</ul>
</li>
<li><p>Nacos与Eureka的区别</p>
<ul>
<li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li>
<li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li>
<li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li>
<li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li>
</ul>
</li>
</ul>
<h2 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h2><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p>
<img src="/pic/Nacos配置中心.png" style="zoom:67%;" />

<p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的<strong>热更新</strong>。</p>
<h4 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h4><p>Nacos控制台的配置管理，默认是空的，需要添加一个表单，填写配置文件信息。</p>
<p>在配置内容中写入<strong>有热更新需求的配置项</strong>。</p>
<img src="/pic/配置管理.png" style="zoom: 80%;" />

<blockquote>
<p> 注意：需要热更新的配置才有放到nacos管理的必要。项目的核心配置、基本不会变更的一些配置还是保存在微服务本地比较好。</p>
</blockquote>
<h4 id="拉取配置"><a href="#拉取配置" class="headerlink" title="拉取配置"></a>拉取配置</h4><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p>
<p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p>
<p>因此spring引入了一种新的配置文件：<strong>bootstrap.yaml文件，会在application.yml之前被读取</strong>，流程如下：</p>
<img src="/pic/Nacos配置读取.png" style="zoom: 50%;" />

<ul>
<li><p>引入依赖</p>
<ul>
<li>在user-service服务中，引入nacos-config的客户端依赖：</li>
</ul>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>添加<code>bootstrap.yaml</code></p>
<ul>
<li>在user-service中添加一个bootstrap.yaml文件，内容如下：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p>
<p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p>
<img src="/pic/配置文件名拼接.png" style="zoom: 80%;" /></li>
</ul>
</li>
<li><p>读取nacos配置</p>
<ul>
<li>使用读取配置文件的方法即可，如<code>@Value</code>注解</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取在nacos控制台配置的日期格式字段</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h3><p>有两种方式，对应配置文件注入的两种方式。</p>
<ul>
<li>使用@Value注入时，在其所在类上添加注解@RefreshScope：</li>
</ul>
<img src="/pic/热更新1.png" alt="image-20210714171036335" style="zoom:80%;" />

<ul>
<li>使用<code>@ConfigurationProperties</code>注入时，不用加<code>@RefreshScope</code>注解也能实现热更新，因此<strong>这种方式更推荐</strong>。</li>
</ul>
<h3 id="配置共享"><a href="#配置共享" class="headerlink" title="配置共享"></a>配置共享</h3><p>其实微服务启动时，会去nacos读取多个配置文件，包括环境配置文件和公共配置文件</p>
<ul>
<li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p>
</li>
<li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p>
</li>
</ul>
<p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被<strong>多个环境共享</strong>。</p>
<h4 id="添加环境共享配置"><a href="#添加环境共享配置" class="headerlink" title="添加环境共享配置"></a>添加环境共享配置</h4><p>在nacos中添加一个userservice.yaml文件：</p>
<img src="/pic/环境共享配置文件.png" style="zoom: 80%;" />

<p>拉取配置同上。</p>
<h4 id="共享的优先级"><a href="#共享的优先级" class="headerlink" title="共享的优先级"></a>共享的优先级</h4><p><img src="/pic/%E7%8E%AF%E5%A2%83%E5%85%B1%E4%BA%AB%E4%BC%98%E5%85%88%E7%BA%A7.png"></p>
<h3 id="搭建Nacos集群"><a href="#搭建Nacos集群" class="headerlink" title="搭建Nacos集群"></a>搭建Nacos集群</h3><p>见Nacos集群搭建</p>
<h2 id="Feign远程调用"><a href="#Feign远程调用" class="headerlink" title="Feign远程调用"></a>Feign远程调用</h2><p>以前使用RestTemplate发起远程调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userservice/user/&quot;</span> + order.getUserId();</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br></pre></td></tr></table></figure>

<p>存在下面的问题：</p>
<ul>
<li>代码可读性差，编程体验不统一</li>
<li>参数复杂的URL难以维护</li>
</ul>
<p>Feign是一个<strong>声明式</strong>的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p>
<p>其作用就是帮助我们优雅的实现http请求的发送</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>引入依赖</li>
</ol>
<p>在order-service服务的pom文件中引入feign的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加注释，开启功能</li>
</ol>
<p>在order-service的启动类添加<code>@EnableFeignClients</code>注解开启Feign的功能</p>
<ol start="3">
<li>编写Feign客户端</li>
</ol>
<p>在order-service中新建一个接口，无需实现，Feign会自动发起调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.clients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span> <span class="comment">// 需要指定服务名称，在发http请求时需要</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="comment">// Feign为了降低学习成本，复用了GetMapping等注解</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>远程调用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2.Feign远程调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">    <span class="comment">// 3.封装user信息</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并且Feign已经<strong>集成了Ribbon，自动实现了负载均衡</strong>。</p>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>Feign可以支持很多的自定义配置，如下表所示：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>feign.Logger.Level</strong></td>
<td>修改日志级别</td>
<td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td>
</tr>
<tr>
<td>feign.codec.Decoder</td>
<td>响应结果的解析器</td>
<td>http远程调用的结果做解析，例如解析json字符串为java对象</td>
</tr>
<tr>
<td>feign.codec.Encoder</td>
<td>请求参数编码</td>
<td>将请求参数编码，便于通过http请求发送</td>
</tr>
<tr>
<td>feign. Contract</td>
<td>支持的注解格式</td>
<td>默认是SpringMVC的注解</td>
</tr>
<tr>
<td>feign. Retryer</td>
<td>失败重试机制</td>
<td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td>
</tr>
</tbody></table>
<p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p>
<p>以日志为例来演示如何自定义配置。</p>
<ul>
<li><p>配置文件方式</p>
<ul>
<li>基于配置文件修改feign的日志级别可以针对单个服务：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以针对所有服务：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure>



<p>而日志的级别分为四种：</p>
<ul>
<li>NONE：不记录任何日志信息，这是默认值。</li>
<li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li>
<li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li>
<li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li>
</ul>
</li>
<li><p>代码方式</p>
<ul>
<li><p>基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>Feign底层客户端实现包括：</p>
<ul>
<li><p>URLConnection：默认实现，不支持连接池</p>
</li>
<li><p>Apache HttpClient ：支持连接池</p>
</li>
<li><p>OKHttp：支持连接池</p>
</li>
</ul>
<p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection，另外，日志的界别最好用basic或none。</p>
<h4 id="用Apache-HttpClient代替URLConnection"><a href="#用Apache-HttpClient代替URLConnection" class="headerlink" title="用Apache HttpClient代替URLConnection"></a>用Apache HttpClient代替URLConnection</h4><ul>
<li><p>引入依赖</p>
<p>在order-service的pom文件中引入Apache的HttpClient依赖：</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置连接池</p>
<p>在order-service的application.yml中添加配置：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">	<span class="attr">client:</span></span><br><span class="line">		<span class="attr">config:</span></span><br><span class="line">			<span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">				<span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">	<span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">        <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">        <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>消费者的服务调用和提供者的Controller接口，内容上比较一致，可以抽象成一个接口</p>
<img src="/pic/Feign接口.png" style="zoom: 80%;" />

<p>但官方并不推荐，因为这样紧耦合了，并且参数列表中的注解映射不会继承，Controller中必须再次声明方法、参数列表、注解。</p>
<h4 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h4><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，<strong>提供给所有消费者使用</strong>。</p>
<p>比如现在有两个服务，order和pay，都需要调用user的接口，他们只能单独去调用，后面服务多了，相同的调用代码就写了很多遍，</p>
<img src="/pic/Feign抽取.png" style="zoom: 67%;" />

<p>这种方法的缺点是，如果有一个服务只需要少量的公共模块，也必须把完整的公共模块引入项目。</p>
<ul>
<li>新建一个module，名为feign-api</li>
</ul>
<p><img src="/pic/feign%E6%8A%BD%E5%8F%96%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p>
<ul>
<li><p>在feign-api中引入feign 的依赖，将公共部分移入，如order-service中编写的UserClient、User、DefaultFeignConfiguration。</p>
</li>
<li><p>在order-service的pom文件中中引入feign-api的依赖：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p>
</li>
<li><p>但是现在FeignClient不在application的扫描包范围内，无法注入bean。解决扫描包问题</p>
<p>方式一：</p>
<p>指定Feign应该扫描的包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<p>指定需要加载的Client接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><p>网关是<strong>所有微服务的统一入口</strong>。</p>
<p>网关的<strong>核心功能特性</strong>：</p>
<ul>
<li>请求路由和负载均衡<ul>
<li>一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</li>
</ul>
</li>
<li>权限控制<ul>
<li>网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</li>
</ul>
</li>
<li>限流<ul>
<li>当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</li>
</ul>
</li>
</ul>
<img src="/pic/网关.png" style="zoom: 50%;" />

<p>在SpringCloud中网关的实现包括两种：</p>
<ul>
<li>gateway</li>
<li>zuul</li>
</ul>
<p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p>
<h3 id="gateway搭建"><a href="#gateway搭建" class="headerlink" title="gateway搭建"></a>gateway搭建</h3><h4 id="创建服务，引入依赖"><a href="#创建服务，引入依赖" class="headerlink" title="创建服务，引入依赖"></a>创建服务，引入依赖</h4><p>网关和注册中心一样，也是一个微服务，因此要先创建一个服务。</p>
<img src="/pic/搭建网关.png" style="zoom:67%;" />

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="编写启动类-1"><a href="#编写启动类-1" class="headerlink" title="编写启动类"></a>编写启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="编写基础配置和路由规则"><a href="#编写基础配置和路由规则" class="headerlink" title="编写基础配置和路由规则"></a>编写基础配置和路由规则</h4><p>创建application.yml文件，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure>

<h4 id="网关路由流程图"><a href="#网关路由流程图" class="headerlink" title="网关路由流程图"></a>网关路由流程图</h4><img src="/pic/网关访问流程图.png" style="zoom:67%;" />

<h3 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h3><p>spring提供了11种基本的断言工厂</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
<th><strong>示例</strong></th>
</tr>
</thead>
<tbody><tr>
<td>After</td>
<td>是某个时间点后的请求</td>
<td>-  After&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Before</td>
<td>是某个时间点之前的请求</td>
<td>-  Before&#x3D;2031-04-13T15:14:47.433+08:00[Asia&#x2F;Shanghai]</td>
</tr>
<tr>
<td>Between</td>
<td>是某两个时间点之前的请求</td>
<td>-  Between&#x3D;2037-01-20T17:42:47.789-07:00[America&#x2F;Denver],  2037-01-21T17:42:47.789-07:00[America&#x2F;Denver]</td>
</tr>
<tr>
<td>Cookie</td>
<td>请求必须包含某些cookie</td>
<td>- Cookie&#x3D;chocolate, ch.p</td>
</tr>
<tr>
<td>Header</td>
<td>请求必须包含某些header</td>
<td>- Header&#x3D;X-Request-Id, \d+</td>
</tr>
<tr>
<td>Host</td>
<td>请求必须是访问某个host（域名）</td>
<td>-  Host&#x3D;<strong>.somehost.org,</strong>.anotherhost.org</td>
</tr>
<tr>
<td>Method</td>
<td>请求方式必须是指定方式</td>
<td>- Method&#x3D;GET,POST</td>
</tr>
<tr>
<td>Path</td>
<td>请求路径必须符合指定规则</td>
<td>- Path&#x3D;&#x2F;red&#x2F;{segment},&#x2F;blue&#x2F;**</td>
</tr>
<tr>
<td>Query</td>
<td>请求参数必须包含指定参数</td>
<td>- Query&#x3D;name, Jack或者-  Query&#x3D;name</td>
</tr>
<tr>
<td>RemoteAddr</td>
<td>请求者的ip必须是指定范围</td>
<td>- RemoteAddr&#x3D;192.168.1.1&#x2F;24</td>
</tr>
<tr>
<td>Weight</td>
<td>权重处理</td>
<td></td>
</tr>
</tbody></table>
<p>上面配置网关时使用的就是Path路由工厂。</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的<strong>请求</strong>和微服务返回的<strong>响应</strong>做处理：</p>
<img src="/pic/过滤器工厂.png" style="zoom:67%;" />

<p>Spring提供了31种不同的路由过滤器工厂。例如：</p>
<table>
<thead>
<tr>
<th><strong>名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>AddRequestHeader</td>
<td>给当前请求添加一个请求头</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>移除请求中的一个请求头</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>给响应结果中添加一个响应头</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>从响应结果中移除有一个响应头</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>限制请求的流量</td>
</tr>
</tbody></table>
<h4 id="请求头过滤器"><a href="#请求头过滤器" class="headerlink" title="请求头过滤器"></a>请求头过滤器</h4><blockquote>
<p>给所有进入userservice的请求添加一个请求头：Truth&#x3D;fangjun</p>
</blockquote>
<p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">fangjun</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure>

<p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p>
<p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下，变成<strong>默认过滤器</strong>。格式如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">fangjun</span> <span class="comment"># 添加请求头 </span></span><br></pre></td></tr></table></figure>

<h4 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h4><p>前面的过滤器都是组件提供的，处理逻辑固定，在开发中难免有别的需求，这就需要我们自定义过滤器的逻辑，可以通过GlobalFilter实现。</p>
<p>定义方式是实现GlobalFilter接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在filter中编写自定义逻辑，可以实现下列功能：</p>
<ul>
<li>登录状态判断</li>
<li>权限校验</li>
<li>请求限流等</li>
</ul>
<p><strong>案例</strong>：判断当前用户是否为管理员</p>
<ul>
<li><p>参数中是否有authorization，</p>
</li>
<li><p>authorization参数值是否为admin</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义过滤器的顺序，值越小，优先级越高</span></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p>
<p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个<strong>过滤器链</strong>（集合）中，排序后依次执行每个过滤器：</p>
<img src="/pic/过滤器顺序.png" style="zoom: 67%;" />

<ul>
<li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li>
<li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li>
<li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li>
<li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li>
</ul>
<h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p>
<ul>
<li><p>域名不同</p>
</li>
<li><p>域名相同，端口不同</p>
</li>
</ul>
<p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p>
<p>解决方案：CORS</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题：</p>
<ul>
<li><p>依赖关系复杂，容易出现兼容性问题</p>
</li>
<li><p>开发、测试、生产环境有差异</p>
</li>
</ul>
<p>Docker为了<strong>解决依赖的兼容问题</strong>，采用了两个手段：</p>
<ul>
<li><p>将应用的Libs（函数库）、Deps（依赖）、配置与应用一起打包</p>
</li>
<li><p>将每个应用放到一个隔离<strong>容器</strong>去运行，避免互相干扰</p>
</li>
</ul>
<p>Docker如何<strong>解决不同系统环境的问题</strong>？</p>
<ul>
<li>Docker将用户程序与所需要调用的系统(比如Ubuntu)函数库一起打包</li>
<li>Docker运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的Linux内核来运行</li>
</ul>
<img src="/pic/Docker系统环境.png" style="zoom: 25%;" />

<h3 id="Docker和虚拟机的区别"><a href="#Docker和虚拟机的区别" class="headerlink" title="Docker和虚拟机的区别"></a>Docker和虚拟机的区别</h3><ul>
<li><p>docker是一个系统进程；虚拟机是在操作系统中的操作系统</p>
</li>
<li><p>docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般</p>
</li>
</ul>
<img src="/pic/Docker和虚拟机的区别.png" style="zoom: 33%;" />

<h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p><strong>镜像（Image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p>
<p><strong>容器（Container）</strong>：镜像中的应用程序运行后形成的进程就是<strong>容器</strong>，只是Docker会给容器进程做隔离，对外不可见。</p>
<p>DockerHub：DockerHub是一个官方的Docker镜像的托管平台。这样的平台称为Docker Registry。</p>
<p>Docker结构：</p>
<ul>
<li><p>服务端：接收命令或远程请求，操作镜像或容器</p>
</li>
<li><p>客户端：发送命令或者请求到Docker服务端</p>
</li>
</ul>
<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>Docker中容器与数据（容器内文件）耦合，解耦需要用到数据卷。</p>
<p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统中的某个目录。</p>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>微服务间通讯有同步和异步两种方式，之前学习的Feign调用就是同步方式，可以实时得到结果，但是</p>
<ul>
<li>耦合度高</li>
<li>性能和吞吐能力下降</li>
<li>有额外的资源消耗</li>
<li>有级联失败问题</li>
</ul>
<h3 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h3><p>以购买商品为例，用户支付后需要调用订单服务完成订单状态修改，调用物流服务，从仓库分配响应的库存并准备发货。</p>
<p>在<strong>事件模式</strong>中，支付服务是事件发布者（publisher），在支付完成后只需要发布一个支付成功的事件（event），事件中带上订单id。</p>
<p>订单服务和物流服务是事件订阅者（Consumer），订阅支付成功的事件，监听到事件后完成自己业务即可。</p>
<img src="/pic/购买商品.png" style="zoom: 80%;" />

<p>为了解除事件发布者与订阅者之间的耦合，两者并不是直接通信，而是有一个中间人（Broker）。发布者发布事件到Broker，不关心谁来订阅事件。订阅者从Broker订阅事件，不关心谁发来的消息。</p>
<p>即使后面要扩展或解除业务，支付服务和其他服务完全不需要改业务代码，只需要增加和删除订阅即可。</p>
<p>好处：</p>
<ul>
<li><p>吞吐量提升：无需等待订阅者处理完成，响应更快速</p>
</li>
<li><p>故障隔离：服务没有直接调用，不存在级联失败问题</p>
</li>
<li><p>调用间没有阻塞，不会造成无效的资源占用</p>
</li>
<li><p>耦合度极低，每个服务都可以灵活插拔，可替换</p>
</li>
<li><p>流量削峰：不管发布事件的流量波动多大，都由Broker接收，订阅者可以按照自己的速度去处理事件</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>架构复杂了，业务没有明显的流程线，不好管理</li>
<li>需要依赖于Broker的可靠、安全、性能</li>
</ul>
<h3 id="消息队列MQ"><a href="#消息队列MQ" class="headerlink" title="消息队列MQ"></a>消息队列MQ</h3><p>MQ是Broker的一种实现形式，比较常见的MQ实现：</p>
<ul>
<li>ActiveMQ</li>
<li>RabbitMQ</li>
<li>RocketMQ</li>
<li>Kafka</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th><strong>RabbitMQ</strong></th>
<th><strong>ActiveMQ</strong></th>
<th><strong>RocketMQ</strong></th>
<th><strong>Kafka</strong></th>
</tr>
</thead>
<tbody><tr>
<td>公司&#x2F;社区</td>
<td>Rabbit</td>
<td>Apache</td>
<td>阿里</td>
<td>Apache</td>
</tr>
<tr>
<td>开发语言</td>
<td>Erlang</td>
<td>Java</td>
<td>Java</td>
<td>Scala&amp;Java</td>
</tr>
<tr>
<td>协议支持</td>
<td>AMQP，XMPP，SMTP，STOMP</td>
<td>OpenWire,STOMP，REST,XMPP,AMQP</td>
<td>自定义协议</td>
<td>自定义协议</td>
</tr>
<tr>
<td>可用性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>单机吞吐量</td>
<td>一般</td>
<td>差</td>
<td>高</td>
<td>非常高</td>
</tr>
<tr>
<td>消息延迟</td>
<td>微秒级</td>
<td>毫秒级</td>
<td>毫秒级</td>
<td>毫秒以内</td>
</tr>
<tr>
<td>消息可靠性</td>
<td>高</td>
<td>一般</td>
<td>高</td>
<td>一般</td>
</tr>
</tbody></table>
<h3 id="RabbitMQ介绍"><a href="#RabbitMQ介绍" class="headerlink" title="RabbitMQ介绍"></a>RabbitMQ介绍</h3><img src="/pic/RabbitMQ架构.png" style="zoom:67%;" />

<ul>
<li>exchange：交换机，负责消息路由</li>
<li>queue：队列，存储消息</li>
<li>virtualHost：虚拟主机，一般每个用户一个，起到隔离作用。</li>
</ul>
<p>RabbitMQ官方提供了5个不同的Demo示例，对应了不同的<strong>消息模型</strong>：</p>
<img src="/pic/RabbitMQ消息模型.png" style="zoom: 67%;" />

<h3 id="基本消息队列"><a href="#基本消息队列" class="headerlink" title="基本消息队列"></a>基本消息队列</h3><h4 id="publisher实现"><a href="#publisher实现" class="headerlink" title="publisher实现"></a>publisher实现</h4><ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>发送消息</li>
<li>关闭连接和channel</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublisherTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.发送消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, rabbitmq!&quot;</span>;</span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, queueName, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息成功：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.关闭通道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="consumer实现"><a href="#consumer实现" class="headerlink" title="consumer实现"></a>consumer实现</h4><ul>
<li>建立连接</li>
<li>创建Channel</li>
<li>声明队列</li>
<li>订阅消息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">// 1.建立连接</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">// 1.1.设置连接参数，分别是：主机名、端口号、vhost、用户名、密码</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;192.168.150.101&quot;</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2.建立连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建通道Channel</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.创建队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.订阅消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span><br><span class="line"><span class="params">                                       AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="comment">// 5.处理消息</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot;接收到消息：【&quot;</span> + message + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接收消息。。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Spring-AMQP"><a href="#Spring-AMQP" class="headerlink" title="Spring AMQP"></a>Spring AMQP</h3><p>Spring AMQP( Advanced Message Queuing Protocol )是基于RabbitMQ封装的一套模板，并且还利用SpringBoot对其实现了自动装配，使用起来非常方便。</p>
<p>SpringAMQP提供了三个功能：</p>
<ul>
<li>自动声明队列、交换机及其绑定关系</li>
<li>基于注解的监听器模式，异步接收消息</li>
<li>封装了RabbitTemplate工具，用于发送消息</li>
</ul>
<h4 id="简单队列模型"><a href="#简单队列模型" class="headerlink" title="简单队列模型"></a>简单队列模型</h4><p>在父工程mq-demo中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h5><p>首先配置MQ地址，在<strong>publisher</strong>服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在publisher服务中编写测试类SpringAmqpTest，并利用RabbitTemplate实现消息发送：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAmqpTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 队列名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="comment">// 消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello, spring amqp!&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h5><p>首先配置MQ地址，在consumer服务的application.yml中添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span> <span class="comment"># 主机名</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># 端口</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span> <span class="comment"># 虚拟主机</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">itcast</span> <span class="comment"># 用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123321</span> <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>然后在consumer服务的<code>cn.itcast.mq.listener</code>包中新建一个类SpringRabbitListener，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueueMessage</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;spring 消费者接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="工作队列模型"><a href="#工作队列模型" class="headerlink" title="工作队列模型"></a>工作队列模型</h4><p>简单来说就是<strong>让多个消费者绑定到一个队列，共同消费队列中的消息</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面两个消费者的消费能力差别很大，但是消息是<strong>平均分配</strong>给两个消费者，没有考虑消费能力。</p>
<p>在spring中有一个简单的配置，可以解决这个问题。我们修改consumer服务的application.yml文件，添加配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure>

<h4 id="发布订阅模型"><a href="#发布订阅模型" class="headerlink" title="发布订阅模型"></a>发布订阅模型</h4><img src="/pic/发布订阅模型.png" style="zoom:67%;" />

<p>在订阅模型中，多了一个exchange角色，而且过程略有变化：</p>
<ul>
<li>Publisher：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</li>
<li>Exchange：交换机。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange的类型。Exchange有以下3种类型：<ul>
<li>Fanout：广播，将消息交给所有绑定到交换机的队列</li>
<li>Direct：定向，把消息交给符合指定routing key 的队列</li>
<li>Topic：通配符，把消息交给符合routing pattern（路由模式） 的队列</li>
</ul>
</li>
<li>Consumer：消费者，与以前一样，订阅队列，没有变化</li>
<li>Queue：消息队列也与以前一样，接收消息、缓存消息。</li>
</ul>
<p><strong>Exchange（交换机）只负责转发消息，不具备存储消息的能力</strong>，因此如果没有任何队列与Exchange绑定，或者没有符合路由规则的队列，那么消息会丢失！</p>
<h2 id="分布式搜索引擎"><a href="#分布式搜索引擎" class="headerlink" title="分布式搜索引擎"></a>分布式搜索引擎</h2><h3 id="Elastic-Search介绍"><a href="#Elastic-Search介绍" class="headerlink" title="Elastic Search介绍"></a>Elastic Search介绍</h3><p>ES是一款非常强大的开源<strong>搜索引擎</strong>，具备非常多强大功能，可以帮助我们从海量数据中快速找到需要的内容，结合了kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。而ES是elastic stack的核心，负责存储、搜索和分析数据。</p>
<img src="/pic/es.png" style="zoom: 80%;" />

<p>ES底层基于<strong>lucene</strong>实现，<strong>Lucene</strong>是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，提供了搜索引擎的核心API。</p>
<h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>Lucene中的核心技术就是倒排索引，这个概念是相对于MySQL这样的正向索引而言的。在MySQL中，如果有局部内容查询，需要用到模糊查询的LIKE语句，会逐行扫描和比较数据，即全表扫描，当数据量大时不可取。</p>
<p>倒排索引中有两个重要的概念：</p>
<ul>
<li>文档（<code>Document</code>）：用来搜索的数据，其中的<strong>每一条数据就是一个文档</strong>。</li>
<li>词条（<code>Term</code>）：文档按照语义分成的词语。例如：我是中国人，就可以分为：我、是、中国人、中国、国人这样的几个词条</li>
</ul>
<p><strong>创建倒排索引</strong></p>
<p>以词条为索引存储。</p>
<ul>
<li>将每一个文档的数据利用算法分词，得到一个个词条</li>
<li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li>
<li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li>
</ul>
<img src="/pic/倒排索引.png" style="zoom: 67%;" />

<p>倒排索引的<strong>搜索流程</strong>如下（以搜索”华为手机”为例）：</p>
<p>词条 –&gt;文档id –&gt;具体文档</p>
<p>1）用户输入条件<code>&quot;华为手机&quot;</code>进行搜索。</p>
<p>2）对用户输入内容<strong>分词</strong>，<strong>得到词条</strong>：<code>华为</code>、<code>手机</code>。</p>
<p>3）拿着词条在倒排索引中查找，可以<strong>得到包含词条的文档id</strong>：1、2、3。</p>
<p>4）拿着文档id到正向索引中<strong>查找具体文档</strong>。</p>
<h3 id="ES对比SQL"><a href="#ES对比SQL" class="headerlink" title="ES对比SQL"></a>ES对比SQL</h3><table>
<thead>
<tr>
<th><strong>MySQL</strong></th>
<th>ES</th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>Table</td>
<td>Index</td>
<td>索引(index)，是相同类型的文档的集合，类似数据库的表(table)</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
<td>文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是 <strong>JSON格式</strong></td>
</tr>
<tr>
<td>Column</td>
<td>Field</td>
<td>字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td>
</tr>
<tr>
<td>Schema</td>
<td>Mapping</td>
<td>Mapping（映射）是索引中文档的字段约束信息。类似数据库的表结构（Schema）</td>
</tr>
<tr>
<td>SQL</td>
<td>DSL</td>
<td>DSL是ES提供的JSON风格的请求语句，用来操作ES，实现CRUD。SQL通过连接，把SQL语句发给数据库，而DSL是通过<strong>http请求</strong>发出，符合Restful风格。</td>
</tr>
</tbody></table>
<p>Mysql：擅长<strong>事务类型操作</strong>，可以确保数据的安全和一致性；而Elasticsearch擅长<strong>海量数据的搜索</strong>、分析、计算</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-数据库</title>
    <url>/2023/11/08/11-00-37/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>建立在关系模型基础上，由多张相互连接的<strong>二维表</strong>组成的数据库。</p>
<ul>
<li>使用表存储数据，格式统一，便于维护</li>
<li>使用SQL语言操作，标准统一，使用方便，可用于复杂查询</li>
</ul>
<span id="more"></span>

<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><ul>
<li><p>通过MySQL客户端连接数据库管理系统DBMS，然后通过DBMS操作数据库</p>
</li>
<li><p>使用MySQL客户端，向数据库管理系统发送一条SQL语句，由数据库管理系统根据SQL语句指令去</p>
</li>
<li><p>操作数据库中的表结构及数据一个数据库服务器中可以创建多个数据库，一个数据库中也可以包含多张表，而一张表中又可以包含多行记录。</p>
</li>
</ul>
<h2 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h2><p>结构化查询语言。一门操作关系型数据库的编程语言，定义操作所有关系型数据库的统一标准。</p>
<p>SQL语句根据其功能被分为四大类：DDL、DML、DQL、DCL</p>
<h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><p>数据定义语言，用来定义数据库对象(数据库，表，字段)</p>
<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>数据操作语言，用来对数据库表中的数据进行增删改</p>
<h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>数据查询语言，用来查询数据库中表的记录</p>
<h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><p>数据控制语言，用来创建数据库用户、控制数据库的访问权限</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引（index）是帮助数据库高效获取数据的数据结构 。没有索引时，查询是全表扫描。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>提高数据查询的效率，降低数据库的IO成本。</li>
<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li>
</ul>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>索引会占用存储空间。</li>
<li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li>
</ul>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。我们平常所说的索引，如果没有特别指明，都是指默认的 <strong>B+Tree</strong> (多路平衡搜索树)结构组织的索引。</p>
<p><img src="/pic/B+tree.jpg"></p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Java DataBase Connectivity，就是使用Java语言操作关系型数据库的一套API。只提供了一套规范，没有具体实现，由各数据库厂商提供具体实现。各大厂商提供的具体实现称为该数据库的<strong>驱动</strong>。比如下面创建工程时引入的<code>MySQL Driver</code>。</p>
<p>这套代码很繁琐，<strong>Mybatis提供了封装，简化操作且性能更好</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取数据库连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行SQL</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(); <span class="comment">//操作SQL的对象</span></span><br><span class="line">        String sql=<span class="string">&quot;select id,name,age,gender,phone from user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//SQL查询结果会封装在ResultSet对象中</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象（用于存储User对象）</span></span><br><span class="line">        <span class="comment">//4. 处理SQL执行结果</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//取出一行记录中id、name、age、gender、phone下的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">            <span class="comment">//把一行记录中的数据，封装到User对象中</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);<span class="comment">//User对象添加到集合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        rs.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Redis是一个基于<strong>内存</strong>的<strong>key-value</strong>结构数据库，是互联网技术领域使用最为广泛的<strong>存储中间件</strong>。</p>
<ul>
<li>基于内存存储，读写性能高  </li>
<li>适合存储热点数据（热点商品、资讯、新闻）</li>
<li>企业应用广泛</li>
</ul>
<p>Redis是用C语言开发的一个开源的高性能键值对(key-value)数据库，官方提供的数据是可以达到100000+的QPS（每秒内查询次数）。它存储的value类型比较丰富，也被称为结构化的NoSql数据库。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Redis存储的是key-value结构的数据，其中key是字符串类型，value有5种常用的数据类型：</p>
<ul>
<li>字符串 string：普通字符串，Redis中最简单的数据类型</li>
<li>哈希 hash：也叫散列，类似于Java中的HashMap结构</li>
<li>列表 list：按照插入顺序排序，可以有重复元素，类似于Java中的LinkedList</li>
<li>集合 set：无序集合，没有重复元素，类似于Java中的HashSet</li>
<li>有序集合 sorted set &#x2F; zset：集合中每个元素关联一个分数(score)，根据分数升序排序，没有重复元素</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="字符串操作命令"><a href="#字符串操作命令" class="headerlink" title="字符串操作命令"></a>字符串操作命令</h3><ul>
<li><strong>SET</strong> key value 					         设置指定key的值，当key存在时覆盖掉原本value的值</li>
<li><strong>GET</strong> key                                        获取指定key的值</li>
<li><strong>SETEX</strong> key seconds value         设置指定key的值，并将 key 的过期时间设为 seconds 秒</li>
<li><strong>SETNX</strong> key value                        key不存在时设置 key 的值</li>
</ul>
<h3 id="哈希操作命令"><a href="#哈希操作命令" class="headerlink" title="哈希操作命令"></a>哈希操作命令</h3><p>Redis hash 是一个string类型的 field 和 value 的映射表，hash特别适合用于存储对象，常用命令：</p>
<ul>
<li><strong>HSET</strong> key field value             将哈希表 key 中的字段 field 的值设为 value</li>
<li><strong>HGET</strong> key field                       获取存储在哈希表中指定字段的值</li>
<li><strong>HDEL</strong> key field                       删除存储在哈希表中的指定字段</li>
<li><strong>HKEYS</strong> key                              获取哈希表中所有字段</li>
<li><strong>HVALS</strong> key                              获取哈希表中所有值</li>
</ul>
<img src="/pic/redis-hash.png" style="zoom: 67%;" />

<h3 id="列表操作命令"><a href="#列表操作命令" class="headerlink" title="列表操作命令"></a>列表操作命令</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序，常用命令：</p>
<ul>
<li><strong>LPUSH</strong> key value1 [value2]         将一个或多个值插入到列表头部</li>
<li><strong>LRANGE</strong> key start stop                获取列表指定范围内的元素</li>
<li><strong>RPOP</strong> key                                       移除并获取列表最后一个元素</li>
<li><strong>LLEN</strong> key                                        获取列表长度</li>
<li><strong>BRPOP</strong> key1 [key2 ] timeout       移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止</li>
</ul>
<img src="/pic/redis-list.png" style="zoom:67%;" />

<h3 id="集合操作命令"><a href="#集合操作命令" class="headerlink" title="集合操作命令"></a>集合操作命令</h3><p>Redis set 是string类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据，常用命令：</p>
<ul>
<li><strong>SADD</strong> key member1 [member2]            向集合添加一个或多个成员</li>
<li><strong>SMEMBERS</strong> key                                         返回集合中的所有成员</li>
<li><strong>SCARD</strong> key                                                  获取集合的成员数</li>
<li><strong>SINTER</strong> key1 [key2]                                   返回给定所有集合的交集</li>
<li><strong>SUNION</strong> key1 [key2]                                 返回所有给定集合的并集</li>
<li><strong>SREM</strong> key member1 [member2]            移除集合中一个或多个成员</li>
</ul>
<img src="/pic/redis-set.png" style="zoom:67%;" />

<h3 id="有序集合操作命令"><a href="#有序集合操作命令" class="headerlink" title="有序集合操作命令"></a>有序集合操作命令</h3><p>Redis有序集合是string类型元素的集合，且不允许有重复成员。每个元素都会关联一个double类型的分数。常用命令：</p>
<p>常用命令：</p>
<ul>
<li><strong>ZADD</strong> key score1 member1 [score2 member2]     向有序集合添加一个或多个成员</li>
<li><strong>ZRANGE</strong> key start stop [WITHSCORES]                     通过索引区间返回有序集合中指定区间内的成员</li>
<li><strong>ZINCRBY</strong> key increment member                              有序集合中对指定成员的分数加上增量 increment</li>
<li><strong>ZREM</strong> key member [member …]                                移除有序集合中的一个或多个成员</li>
</ul>
<img src="/pic/redis-zset.png" style="zoom: 67%;"/> 

<h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>Redis的通用命令是不分数据类型的，都可以使用的命令：</p>
<ul>
<li>KEYS pattern 		查找所有符合给定模式( pattern)的 key </li>
<li>EXISTS key 		检查给定 key 是否存在</li>
<li>TYPE key 		返回 key 所储存的值的类型</li>
<li>DEL key 		该命令用于在 key 存在是删除 key</li>
</ul>
<h2 id="在java中使用redis"><a href="#在java中使用redis" class="headerlink" title="在java中使用redis"></a>在java中使用redis</h2><p>需要使用Redis的Java客户端，就如同我们使用JDBC操作MySQL数据库一样。</p>
<p>Redis 的 Java 客户端很多，常用的几种：</p>
<ul>
<li>Jedis</li>
<li>Lettuce</li>
<li>Spring Data Redis</li>
</ul>
<p>Spring 对 Redis 客户端进行了整合，提供了 <strong>Spring Data Redis</strong>，在Spring Boot项目中还提供了对应的Starter，即 spring-boot-starter-data-redis。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在application.yml中添加相关Redis配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>Spring Data Redis中提供了一个高度封装的类：<strong>RedisTemplate</strong>，对相关api进行了归类封装,将同一类型操作封装为operation接口，具体分类如下：</p>
<ul>
<li>ValueOperations：string数据操作</li>
<li>SetOperations：set类型数据操作</li>
<li>ZSetOperations：zset类型数据操作</li>
<li>HashOperations：hash类型的数据操作</li>
<li>ListOperations：list类型的数据操作</li>
</ul>
<h3 id="编写配置类，创建RedisTemplate对象"><a href="#编写配置类，创建RedisTemplate对象" class="headerlink" title="编写配置类，创建RedisTemplate对象"></a>编写配置类，创建RedisTemplate对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis模板对象...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置redis的连接工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置redis key的序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>解释说明：</strong></p>
<p>当前配置类不是必须的，因为 Spring Boot 框架会自动装配 RedisTemplate 对象，但是默认的key序列化器为</p>
<p>JdkSerializationRedisSerializer，导致我们存到Redis中后的数据和原始数据有差别，故设置为</p>
<p>StringRedisSerializer序列化器。</p>
<h3 id="操作redis"><a href="#操作redis" class="headerlink" title="操作redis"></a>操作redis</h3><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//string数据操作</span></span><br><span class="line"><span class="type">ValueOperations</span> <span class="variable">valueOperations</span> <span class="operator">=</span> redisTemplate.opsForValue();</span><br><span class="line"></span><br><span class="line">valueOperations.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> (String) valueOperations.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(city);</span><br><span class="line"><span class="comment">//插入数据且设置有效期</span></span><br><span class="line">valueOperations.set(<span class="string">&quot;code&quot;</span>,<span class="string">&quot;1234&quot;</span>,<span class="number">3</span>, TimeUnit.MINUTES);</span><br><span class="line">valueOperations.setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">valueOperations.setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashOperations</span> <span class="variable">hashOperations</span> <span class="operator">=</span> redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">hashOperations.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;20&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) hashOperations.get(<span class="string">&quot;100&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> hashOperations.keys(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(keys);</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">values</span> <span class="operator">=</span> hashOperations.values(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(values);</span><br><span class="line"></span><br><span class="line">hashOperations.delete(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ListOperations</span> <span class="variable">listOperations</span> <span class="operator">=</span> redisTemplate.opsForList();</span><br><span class="line"></span><br><span class="line">listOperations.leftPushAll(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">listOperations.leftPush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">List</span> <span class="variable">mylist</span> <span class="operator">=</span> listOperations.range(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">listOperations.rightPop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> listOperations.size(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">System.out.println(size);</span><br></pre></td></tr></table></figure>



<h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SetOperations</span> <span class="variable">setOperations</span> <span class="operator">=</span> redisTemplate.opsForSet();</span><br><span class="line"></span><br><span class="line">setOperations.add(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">setOperations.add(<span class="string">&quot;set2&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">members</span> <span class="operator">=</span> setOperations.members(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">System.out.println(members);</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">size</span> <span class="operator">=</span> setOperations.size(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line">System.out.println(size);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">intersect</span> <span class="operator">=</span> setOperations.intersect(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">System.out.println(intersect);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">union</span> <span class="operator">=</span> setOperations.union(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>);</span><br><span class="line">System.out.println(union);</span><br><span class="line"></span><br><span class="line">setOperations.remove(<span class="string">&quot;set1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="number">10</span>);</span><br><span class="line">zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="number">12</span>);</span><br><span class="line">zSetOperations.add(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Set</span> <span class="variable">zset1</span> <span class="operator">=</span> zSetOperations.range(<span class="string">&quot;zset1&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">System.out.println(zset1);</span><br><span class="line"></span><br><span class="line">zSetOperations.incrementScore(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">zSetOperations.remove(<span class="string">&quot;zset1&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="通用命令-1"><a href="#通用命令-1" class="headerlink" title="通用命令"></a>通用命令</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">System.out.println(keys);</span><br><span class="line"></span><br><span class="line"><span class="type">Boolean</span> <span class="variable">name</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">set1</span> <span class="operator">=</span> redisTemplate.hasKey(<span class="string">&quot;set1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line"><span class="type">DataType</span> <span class="variable">type</span> <span class="operator">=</span> redisTemplate.type(key);</span><br><span class="line">System.out.println(type.name());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">redisTemplate.delete(<span class="string">&quot;mylist&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java网络编程</title>
    <url>/2023/11/02/21-57-37/</url>
    <content><![CDATA[<h2 id="通信架构"><a href="#通信架构" class="headerlink" title="通信架构"></a>通信架构</h2><p>基本的通信架构有2种形式：CS架构（ Client客户端&#x2F;Server服务端 ） 、 BS架构(Browser浏览器&#x2F;Server服务端)。</p>
<span id="more"></span>

<h2 id="网络通信三要素"><a href="#网络通信三要素" class="headerlink" title="网络通信三要素"></a>网络通信三要素</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>全称”互联网协议地址”，是设备在网络中的地址，是唯一的标识。有两种形式：IPv4、IPv6。</p>
<h4 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h4><p>有4字节，用点分十进制表示法</p>
<blockquote>
<p>11000000 10101000 00000001 01000010   —-&gt;   192.168.1.66</p>
</blockquote>
<p>IPv4总共32位，能容纳40多亿台设备，在全球范围内肯定是不够用的。</p>
<h4 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h4><p>共128位，号称可以为地球每一粒沙子编号。IPv6分成8段表示，每段每四位编码成一个十六进制位表示， 数之间用冒号（：）分开，即冒分十六进制表示法。</p>
<blockquote>
<p>2001:0db8:0000:0023:0008:0800:200c:417a</p>
</blockquote>
<h4 id="IP域名"><a href="#IP域名" class="headerlink" title="IP域名"></a>IP域名</h4><p>使用域名访问服务时，会先由本地DNS服务器将域名解析为IP地址进行访问。</p>
<h4 id="公网、内网"><a href="#公网、内网" class="headerlink" title="公网、内网"></a>公网、内网</h4><p>公网IP：是可以连接互联网的IP地址；</p>
<p>内网IP：也叫局域网IP，只能组织机构内部使用。<br>192.168. 开头的就是常见的局域网地址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用。</p>
<p>127.0.0.1、localhost：代表本机IP，只会寻找当前所在的主机。</p>
<h4 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h4><p>Java提供了对象来表示ip地址，常用方法如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static InetAddress getLocalHost()</td>
<td>获取本机IP，会以一个inetAddress的对象返回</td>
</tr>
<tr>
<td>public static InetAddress getByName(String host)</td>
<td>根据ip地址或者域名，返回一个inetAdress对象</td>
</tr>
<tr>
<td>public String getHostName()</td>
<td>获取该ip地址对象对应的主机名。</td>
</tr>
<tr>
<td>public String getHostAddress()</td>
<td>获取该ip地址对象中的ip地址信息。</td>
</tr>
<tr>
<td>public boolean isReachable(int timeout)</td>
<td>在指定毫秒内，判断主机与该ip对应的主机是否能连通</td>
</tr>
</tbody></table>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>程序在设备中唯一的标识，为一个 16 位的二进制，范围是 0~65535。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li>周知端口：0~1023，被预先定义的知名应用占用（如：HTTP占用 80，FTP占用21） </li>
<li>注册端口：1024~49151，分配给用户进程或某些应用程序。</li>
<li>动态端口：49152到65535，之所以称为动态端口，是因为它 一般不固定分配某种进程，而是动态分配。</li>
</ul>
<h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>连接和数据在网络中传输的规则。</p>
<ul>
<li>OSI网络参考模型：全球网络互联标准。</li>
<li>TCP&#x2F;IP网络模型：事实上的国际标准。</li>
</ul>
<table>
<thead>
<tr>
<th>OSI网络参考模型</th>
<th>TCP&#x2F;IP网络模型</th>
<th><strong>各层对应</strong></th>
<th><strong>面向操作</strong></th>
</tr>
</thead>
<tbody><tr>
<td>应用层</td>
<td>应用层</td>
<td>HTTP、FTP、SMTP…</td>
<td>应用程序需要关注的：浏览器，邮箱。程序员一般在这一层开发</td>
</tr>
<tr>
<td>表示层</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>会话层</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>传输层</td>
<td>传输层</td>
<td>UDP、TCP…</td>
<td>选择使用的TCP , UDP协议</td>
</tr>
<tr>
<td>网络层</td>
<td>网络层</td>
<td>IP…</td>
<td>封装源和目标IP</td>
</tr>
<tr>
<td>数据链路层</td>
<td>数据链路层+ 物理</td>
<td>比特流…</td>
<td>物理设备中传输</td>
</tr>
<tr>
<td>物理层</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>用户数据报协议，无连接、不可靠通信，但效率高，通常用于视频和语音。</p>
<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul>
<li>特点：面向连接、可靠通信。</li>
<li>TCP的最终目的：要保证在不可靠的信道上实现可靠的传输。</li>
<li>TCP主要有三个步骤实现可靠传输：<strong>三次握手建立连接</strong>，双方均确认<strong>对方的收和发</strong>均无问题，四次挥手断开连接(a:b,我走了；b:a,等会,我看看数据传完没有；b:a,好了走吧；a:b,好的再见)。传输数据时也会进行确认。</li>
</ul>
<p>可靠连接：确定通信双方，收发消息都是正常无问题的！（全双工）</p>
<h2 id="UDP通信"><a href="#UDP通信" class="headerlink" title="UDP通信"></a>UDP通信</h2><p>Java提供了一个java.net.DatagramSocket类来实现UDP通信。发送端每次把要发送的数据（限制在64KB内）、接收端IP、等信息封装成一个数据包，发出去就不管了。</p>
<p><img src="/pic/UDP%E5%AF%B9%E8%B1%A1.jpg"></p>
<h3 id="发送端"><a href="#发送端" class="headerlink" title="发送端"></a>发送端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建客户端对象（发韭菜出去的人）</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(); <span class="comment">//这里会给发送端随机分配ip</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建数据包对象封装要发出去的数据（创建一个韭菜盘子）</span></span><br><span class="line">       <span class="comment">/* public DatagramPacket(byte buf[], int length,</span></span><br><span class="line"><span class="comment">             InetAddress address, int port)</span></span><br><span class="line"><span class="comment">               参数一：封装要发出去的数据。</span></span><br><span class="line"><span class="comment">               参数二：发送出去的数据大小（字节个数）</span></span><br><span class="line"><span class="comment">               参数三：服务端的IP地址（找到服务端主机）</span></span><br><span class="line"><span class="comment">               参数四：服务端程序的端口。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;我是快乐的客户端，我爱你abc&quot;</span>.getBytes();</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(bytes, bytes.length</span><br><span class="line">                , InetAddress.getLocalHost(),  <span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、开始正式发送这个数据包的数据出去了</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端数据发送完毕~~~&quot;</span>);</span><br><span class="line">        socket.close(); <span class="comment">// 释放资源！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收端"><a href="#接收端" class="headerlink" title="接收端"></a>接收端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----服务端启动----&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、创建一个服务端对象（创建一个接韭菜的人） 注册端口</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">6666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、创建一个数据包对象，用于接收数据的（创建一个韭菜盘子）</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">64</span>]; <span class="comment">// 64KB.</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buffer, buffer.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、开始正式使用数据包来接收客户端发来的数据</span></span><br><span class="line">        socket.receive(packet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、从字节数组中，把接收到的数据直接打印出来</span></span><br><span class="line">        <span class="comment">// 接收多少就倒出多少</span></span><br><span class="line">        <span class="comment">// 获取本次数据包接收了多少数据。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> packet.getLength();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span> , len);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取发送端的ip和端口</span></span><br><span class="line">        System.out.println(packet.getAddress().getHostAddress());</span><br><span class="line">        System.out.println(packet.getPort());</span><br><span class="line"></span><br><span class="line">        socket.close(); <span class="comment">// 释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><p>Java提供了一个java.net.Socket类来实现TCP通信。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><table>
<thead>
<tr>
<th><strong>构造器</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public Socket(String host , int port)</td>
<td>根据指定的服务器ip、端口号请求与服务端建立连接，连接通过，就获得了客户端socket</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public OutputStream getOutputStream()</td>
<td>获得字节输出流对象</td>
</tr>
<tr>
<td>public InputStream getInputStream()</td>
<td>获得字节输入流对象</td>
</tr>
<tr>
<td>原始的字节流不是很好用，把原始的OutputStream包装为DataOutputStream比较好用。</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建Socket对象，并同时请求与服务端程序的连接。</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、从socket通信管道中得到一个字节输出流，用来发数据给服务端程序。</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、把低级的字节输出流包装成数据输出流</span></span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">dos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、开始写数据出去了</span></span><br><span class="line">        dos.writeUTF(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        dos.close();</span><br><span class="line"></span><br><span class="line">        socket.close(); <span class="comment">// 释放连接资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><table>
<thead>
<tr>
<th><strong>构造器</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public ServerSocket(int port)</td>
<td>为服务端程序注册端口</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>public Socket accept()</td>
<td>阻塞等待客户端的连接请求，一旦与某个客户端成功连接，则返回服务端这边的Socket对象。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----服务端启动成功-------&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、从socket通信管道中得到一个字节输入流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、把原始的字节输入流包装成数据输入流</span></span><br><span class="line">        <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、使用数据输入流读取客户端发送过来的消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">        System.out.println(rs);</span><br><span class="line">        <span class="comment">// 也可以获取客户端的IP地址</span></span><br><span class="line">        System.out.println(socket.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">        dis.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多线程改进"><a href="#多线程改进" class="headerlink" title="多线程改进"></a>多线程改进</h3><p>让服务端能够支持多个客户端通信，就需要用到多线程技术。</p>
<p>每当有一个客户端连接服务端，在服务端这边就为Socket开启一条线程取执行读取数据的操作，来多少个客户端，就有多少条线程。<strong>一个线程负责一条socket通信管道</strong></p>
<p>写一个服务端的读取数据的线程类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerReaderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerReaderThread</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">dis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(is);</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> dis.readUTF();</span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;有人下线了：&quot;</span> + socket.getRemoteSocketAddress());</span><br><span class="line">                    dis.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----服务端启动成功-------&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;有人上线了：&quot;</span> + socket.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span></span><br><span class="line">            <span class="type">ServerReaderThread</span> <span class="variable">mythread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerReaderThread</span>(socket);</span><br><span class="line">            mythread1.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="群聊案例"><a href="#群聊案例" class="headerlink" title="群聊案例"></a>群聊案例</h3><p>如何能让一个客户端的消息被多个客户端接收？</p>
<p>服务端维护一个集合，存储在线的socket，收到一个客户端的消息后转发给其他客户端。</p>
<h3 id="BS架构通信"><a href="#BS架构通信" class="headerlink" title="BS架构通信"></a>BS架构通信</h3><p>服务器必须给浏览器响应HTTP协议规定的数据格式，否则浏览器不识别返回的数据。</p>
<p>客户端程序不需要我们编写（浏览器就是），所以我们只需要写服务端就可以了。</p>
<p>先写一个线程类，用于按照HTTP协议的格式返回数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerReaderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerReaderThread</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//  立即响应一个网页内容：“黑马程序员”给浏览器展示。</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            <span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(os);</span><br><span class="line">            ps.println(<span class="string">&quot;HTTP/1.1 200 OK&quot;</span>);</span><br><span class="line">            ps.println(<span class="string">&quot;Content-Type:text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            ps.println(); <span class="comment">// 必须换行</span></span><br><span class="line">            ps.println(<span class="string">&quot;&lt;div style=&#x27;color:red;font-size:120px;text-align:center&#x27;&gt;黑马程序员666&lt;div&gt;&quot;</span>);</span><br><span class="line">            ps.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再写服务端的主程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----服务端启动成功-------&quot;</span>);</span><br><span class="line">        <span class="comment">// 1、创建ServerSocket的对象，同时为服务端注册端口。</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 2、使用serverSocket对象，调用一个accept方法，等待客户端的连接请求</span></span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;有人上线了：&quot;</span> + socket.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、把这个客户端对应的socket通信管道，交给一个独立的线程负责处理。</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServerReaderThread</span>(socket).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java高级</title>
    <url>/2023/11/03/11-00-37/</url>
    <content><![CDATA[<h2 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h2><p>单元测试就是针对最小的功能单元(方法)，编写测试代码对该功能进行正确性测试。</p>
<span id="more"></span>

<p>JUnit是使用Java语言实现的单元测试框架，它是第三方公司开源出来的，很多开发工具已经集成了Junit框架，比如IDEA。</p>
<ul>
<li>编写的测试代码很灵活，可以指某个测试方法执行测试，也支持一键完成自动化测试。</li>
<li>不需要程序员去分析测试的结果，会自动生成测试报告出来。</li>
</ul>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ul>
<li>将Junit框架的jar包导入到项目中（注意：IDEA集成了Junit框架，不需要我们自己手工导入了），一般导入junit4版本</li>
<li>编写测试类、测试类方法（注意：测试方法必须是公共的，无参数，无返回值的非静态方法）</li>
<li>必须在测试方法上使用@Test注解（标注该方法是一个测试方法）</li>
<li>在测试方法中，编写程序调用被测试的方法即可。</li>
<li>选中测试方法，右键选择“JUnit运行” ，如果测试通过则是绿色；如果测试失败，则是红色</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtil</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printNumber</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;名字长度：&quot;</span>+name.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写一个测试类，测试StringUtil工具类中的方法能否正常使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilTest</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//声明测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPrintNumber</span><span class="params">()</span>&#123;</span><br><span class="line">        StringUtil.printNumber(<span class="string">&quot;admin&quot;</span>);<span class="comment">//传递字符串，测试通过</span></span><br><span class="line">        StringUtil.printNumber(<span class="literal">null</span>);<span class="comment">//传递非法字符，会报异常，测试不通过</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击绿色的三角形按钮，就可以运行测试方法。</p>
<p><strong>所谓测试，也只是运行代码看有没有异常，能不能测试出效果还要看测试代码的质量</strong></p>
<h3 id="断言机制"><a href="#断言机制" class="headerlink" title="断言机制"></a>断言机制</h3><p>可以用于判断代码的实际输出和目标输出是否匹配，从而<strong>判断代码逻辑</strong>是否出错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtil</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxIndex</span><span class="params">(String data)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data==<span class="literal">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> data.length();  <span class="comment">//这里逻辑错误，应该是length()-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringUtilTest</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//声明测试方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetMaxIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> index1=StringUtil.getMaxIndex(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        <span class="comment">//提示信息，期望值，实际值</span></span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;有bug&quot;</span>,<span class="number">4</span>,index1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Junit常用注解"><a href="#Junit常用注解" class="headerlink" title="Junit常用注解"></a>Junit常用注解</h3><p>before通常用于申请资源，after通常用于释放资源</p>
<h4 id="Junit4版本"><a href="#Junit4版本" class="headerlink" title="Junit4版本"></a>Junit4版本</h4><table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试方法</td>
</tr>
<tr>
<td>@Before</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次。</td>
</tr>
<tr>
<td>@After</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次。</td>
</tr>
<tr>
<td>@BeforeClass</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次。</td>
</tr>
<tr>
<td>@AfterClass</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次。</td>
</tr>
</tbody></table>
<h4 id="Junit5版本"><a href="#Junit5版本" class="headerlink" title="Junit5版本"></a>Junit5版本</h4><table>
<thead>
<tr>
<th><strong>注解</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>@Test</td>
<td>测试方法</td>
</tr>
<tr>
<td>@BeforeEach</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之前执行一次。</td>
</tr>
<tr>
<td>@AfterEach</td>
<td>用来修饰一个实例方法，该方法会在每一个测试方法执行之后执行一次。</td>
</tr>
<tr>
<td>@BeforeAll</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之前只执行一次。</td>
</tr>
<tr>
<td>@AfterAll</td>
<td>用来修饰一个静态方法，该方法会在所有测试方法之后只执行一次。</td>
</tr>
</tbody></table>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射就是加载类，并且允许以编程方式访问已加载类的成分。反射主要<strong>用于做框架</strong>。比如idea中的代码提示，在对象名.之后会把对象的属性罗列出来。</p>
<h3 id="获取类"><a href="#获取类" class="headerlink" title="获取类"></a>获取类</h3><p>就是获取类的<strong>字节码</strong>，通过Class对象操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1Class</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//方法一：类名.class</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(c1.getName()); <span class="comment">//获取全类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName()); <span class="comment">//获取简单类名</span></span><br><span class="line">        <span class="comment">//方法二：Class.forName(全类名)</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.d2_reflect.Student&quot;</span>);</span><br><span class="line">        System.out.println(c1 == c2); <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//方法三：对象.getClass</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(c2 == c3); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取类构造器"><a href="#获取类构造器" class="headerlink" title="获取类构造器"></a>获取类构造器</h3><p>通过Constructor对象操作</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回所有构造器对象的数组（只能拿public的）</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回所有构造器对象的数组，存在就能拿到</td>
</tr>
<tr>
<td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个构造器对象（只能拿public的）</td>
</tr>
<tr>
<td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个构造器对象，存在就能拿到</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2Constructor</span>()&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1、反射第一步：必须先得到这个类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、获取类的全部构造器</span></span><br><span class="line">        Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">        <span class="comment">//遍历数组中的每一个构造器对象。</span></span><br><span class="line">        <span class="keyword">for</span>(Constructor constructor: constructors)&#123;</span><br><span class="line">            System.out.println(constructor.getName()+<span class="string">&quot;---&gt; 参数个数：&quot;</span>+constructor.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">//3、获取private修饰的有两个参数的构造器，第一个参数String类型，第二个参数int类型</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        </span><br><span class="line">        System.out.println(constructor2.getName()+<span class="string">&quot;---&gt; 参数个数：&quot;</span>+constructor1.getParameterCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取构造器最终是<strong>为了初始化对象返回</strong></p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object… initargs)</td>
<td>根据指定的构造器创建对象</td>
</tr>
<tr>
<td>public void setAccessible(boolean flag)</td>
<td>设置为true,表示取消访问检查，进行暴力反射</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2Constructor</span>()&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line">         <span class="comment">//获取private修饰的有两个参数的构造器</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>); <span class="comment">//私有构造器不允许类外访问，用这条语句可以禁止检查访问权限</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) constructor.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：非public的构造器，需要打开权限（暴力反射），因此反射可以破坏封装性，私有的也可以执行了。</p>
<p>在框架发开中，这样的对象获取方法是常用的。</p>
<h3 id="获取类成员变量"><a href="#获取类成员变量" class="headerlink" title="获取类成员变量"></a>获取类成员变量</h3><p>通过Field对象操作</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getFields()</td>
<td>返回所有成员变量对象的数组（只能拿public的）</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回所有成员变量对象的数组，存在就能拿到</td>
</tr>
<tr>
<td>Field getField(String name)</td>
<td>返回单个成员变量对象（只能拿public的）</td>
</tr>
<tr>
<td>Field getDeclaredField(String name)</td>
<td>返回单个成员变量对象，存在就能拿到</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2Constructor</span>()&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetConstructors</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Cat.class;</span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field:fields)&#123;</span><br><span class="line">            System.out.println(field.getName()+field.getType());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Field</span> <span class="variable">fName</span> <span class="operator">=</span> c.getDeclaredFields(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        FName.set(cat,<span class="string">&quot;加菲&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取成员变量的目的依然是取值和赋值，如果私有也需要暴力反射</p>
<ul>
<li>void set(Object obj, Object value)：</li>
<li>Object get(Object obj)</li>
</ul>
<h3 id="获取类成员方法"><a href="#获取类成员方法" class="headerlink" title="获取类成员方法"></a>获取类成员方法</h3><p>通过Method对象操作</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>返回所有成员方法对象的数组（只能拿public的）</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>返回所有成员方法对象的数组，存在就能拿到</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象（只能拿public的）</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象，存在就能拿到</td>
</tr>
</tbody></table>
<p>获取的目的是为了执行</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>运行方法参数一：用obj对象调用该方法。参数二：调用方法的传递的参数（如果没有就不写）。</td>
</tr>
</tbody></table>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li>可以得到一个类的全部成分然后操作</li>
<li>可以破坏封装性</li>
<li>可以破坏泛型的约束性<ul>
<li>泛型只在编译时有效，在字节码中泛型被擦除了，而反射是作用在运行时的技术，操作的时字节码，可以在有泛型类型的集合中存入其他任意类型的元素</li>
</ul>
</li>
<li><strong>适合做框架</strong></li>
</ul>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。Java 语言中的类、构造器、方法、成员变量、参数等都可以被注解进行标注，其作用是让其他程序根据注解信息决定怎么执行该程序。</p>
<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public @interface 注解名称 &#123;</span></span><br><span class="line"><span class="comment">//    public 属性类型 属性名() default 默认值 ;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest&#123;</span><br><span class="line">    String <span class="title function_">aaa</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">bbb</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;	</span><br><span class="line">    String[] ccc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTest(aaa=&quot;牛魔王&quot;,ccc=&#123;&quot;HTML&quot;,&quot;Java&quot;&#125;)</span><span class="comment">//标注类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest1</span>&#123;</span><br><span class="line">    <span class="meta">@MyTest(aaa=&quot;铁扇公主&quot;,bbb=false, ccc=&#123;&quot;前端&quot;,&quot;Java&quot;&#125;)</span><span class="comment">//标注方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：注解的属性名如何是value的话，并且只有value没有默认值，使用注解时value名称可以省略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest2&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>; <span class="comment">//特殊属性</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTest2(&quot;孙悟空&quot;)</span> <span class="comment">//等价于 @MyTest2(value=&quot;孙悟空&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>以把注解的字节码进行反编译，使用XJad工具进行反编译</p>
<ul>
<li>注解本质上是接口，每一个注解接口都继承子Annotation接口</li>
<li>注解中的属性本质上是抽象方法</li>
<li>使用注解实际上是作为接口的实现类对象</li>
<li>@MyTest1(aaa&#x3D;”孙悟空”,bbb&#x3D;false,ccc&#x3D;{“Python”,”前端”,”Java”})里面的属性值，可以通过调用aaa()、bbb()、ccc()方法获取到。</li>
</ul>
<h3 id="注解解析"><a href="#注解解析" class="headerlink" title="注解解析"></a>注解解析</h3><p><strong>把获取类上、方法上、变量上等位置注解及注解属性值的过程称为解析注解。</strong>注解在谁身上，就先获取谁，再用谁获取谁身上的注解</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Annotation[]  getDeclaredAnnotations()</td>
<td>获得当前对象上使用的所有注解，返回注解数组。</td>
</tr>
<tr>
<td>T getDeclaredAnnotation(Class<T> annotationClass)</td>
<td>根据注解类型获得对应注解对象</td>
</tr>
<tr>
<td>boolean isAnnotationPresent(Class<Annotation> annotationClass)</td>
<td>判断当前对象是否使用了指定的注解，如果使用了则返回true，否则false</td>
</tr>
</tbody></table>
<p>所有的类成分Class, Method , Field , Constructor，都实现了AnnotatedElement接口他们都拥有解析注解的能力</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest3</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseClass</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Demo.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.解析Demo类上的注解</span></span><br><span class="line">        <span class="keyword">if</span>(c.isAnnotationPresent(MyTest4.class))&#123;</span><br><span class="line">            <span class="comment">//获取类上的MyTest4注解</span></span><br><span class="line">            <span class="type">MyTest4</span> <span class="variable">myTest4</span> <span class="operator">=</span> (MyTest4)c.getDeclaredAnnotation(MyTest4.class);</span><br><span class="line">            <span class="comment">//获取MyTests4注解的属性值</span></span><br><span class="line">            System.out.println(myTest4.value());</span><br><span class="line">            System.out.println(myTest4.aaa());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseMethods</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1.先获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Demo.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.解析Demo类中test1方法上的注解MyTest4注解</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(m.isAnnotationPresent(MyTest4.class))&#123;</span><br><span class="line">            <span class="comment">//获取方法上的MyTest4注解</span></span><br><span class="line">            <span class="type">MyTest4</span> <span class="variable">myTest4</span> <span class="operator">=</span> (MyTest4)m.getDeclaredAnnotation(MyTest4.class);</span><br><span class="line">            <span class="comment">//获取MyTests4注解的属性值</span></span><br><span class="line">            System.out.println(myTest4.value());</span><br><span class="line">            System.out.println(myTest4.aaa());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p><strong>元注解是修饰注解的注解</strong>，常见的元注解有<code>@Target</code>和<code>@Retention</code></p>
<p>@Target：约束自定义注解只能在哪些地方使用。可使用的值定义在ElementType枚举类中，常用值如下</p>
<ul>
<li>TYPE，类，接口</li>
<li>FIELD, 成员变量</li>
<li>METHOD, 成员方法</li>
<li>PARAMETER, 方法参数</li>
<li>CONSTRUCTOR, 构造器</li>
<li>LOCAL_VARIABLE, 局部变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明@MyTest3注解只能用在类上和方法上</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span>	</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest3&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Retention：申明注解的生命周期。可使用的值定义在RetentionPolicy枚举类中，常用值如下</p>
<ul>
<li>SOURCE： 注解只作用在源码阶段，生成的字节码文件中不存在</li>
<li>CLASS：  注解作用在源码阶段，字节码文件阶段，运行阶段不存在，默认值.</li>
<li>RUNTIME：注解作用在源码阶段，字节码文件阶段，运行阶段（开发常用）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@MyTest3保留到运行时期</span></span><br><span class="line"><span class="meta">@Retetion(RetetionPloicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest3&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>模拟Junit写一个测试框架，要求有@MyTest注解的方法可以被框架执行，没有@MyTest注解的方法不能被框架执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span>	</span><br><span class="line"><span class="meta">@Retetion(RetetionPloicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTest&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationTest4</span>&#123;</span><br><span class="line">    <span class="meta">@MyTest</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====test1====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====test2====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">AnnotationTest4</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationTest4</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.先获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> AnnotationTest4.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.解析AnnotationTest4类中所有的方法对象</span></span><br><span class="line">        Method[] methods = c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method m: methods)&#123;</span><br><span class="line">            <span class="comment">//3.判断方法上是否有MyTest注解，有就执行该方法</span></span><br><span class="line">            <span class="keyword">if</span>(m.isAnnotationPresent(MyTest.class))&#123;</span><br><span class="line">            	m.invoke(a);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java面向对象</title>
    <url>/2023/10/10/15-00-37/</url>
    <content><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><h3 id="类与对象的执行原理"><a href="#类与对象的执行原理" class="headerlink" title="类与对象的执行原理"></a>类与对象的执行原理</h3><p><code>Student s1 = new Student();</code>这句话中的原理如下</p>
<ul>
<li><code>Student s1</code>表示的是在<strong>栈</strong>内存中，创建了一个Student类型的变量，变量名为s1</li>
<li>而<code>new Student()</code>会在<strong>堆</strong>内存中创建一个对象，而对象中包含学生的属性名和属性值，同时系统会为这个Student对象分配一个地址值0x4f3f5b24</li>
<li>类的代码存放在<strong>方法区</strong>。</li>
</ul>
<span id="more"></span>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>一个代码文件中，可以写多个class类，但是只能有一个是public修饰，且public修饰的类必须和文件名相同。</p>
<h2 id="实体类JavaBean"><a href="#实体类JavaBean" class="headerlink" title="实体类JavaBean"></a>实体类JavaBean</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>实体类就是一种特殊的类，它需要满足下面的要求：</p>
<ul>
<li>类中的成员变量都要<strong>私有</strong>，且对外提供相应的<strong>get</strong>和<strong>set</strong>方法。</li>
<li>类中必须有一个<strong>无参构造器</strong></li>
</ul>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>实体类仅仅只用来<strong>封装数据</strong>，而对数据的处理交给其他类来完成，以实现<strong>数据和数据业务处理相分离</strong>。</p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><h3 id="修饰成员变量"><a href="#修饰成员变量" class="headerlink" title="修饰成员变量"></a>修饰成员变量</h3><p>Java中的成员变量按照有无static修饰分为两种：<strong>类变量、实例变量</strong>。</p>
<p>静态变量是属于类的，只需要通过类名就可以调用：**<code>类名.静态变量</code>**</p>
<p>实例变量是属于对象的，需要通过对象才能调用：**<code>对象.实例变量</code>**</p>
<p>如果某个数据只需要一份，且希望能够被共享（访问、修改），则该数据可以定义成类变量来记住。</p>
<ul>
<li>比如用户类可以记住自己创建了多少个用户对象。</li>
</ul>
<h3 id="修饰成员方法"><a href="#修饰成员方法" class="headerlink" title="修饰成员方法"></a>修饰成员方法</h3><p>成员方法根据有无static也分为两类：<strong>类方法、实例方法</strong></p>
<p>有static修饰的方法，是属于类的，称为<strong>类方法</strong>；调用时直接用类名调用即可。</p>
<p>无static修饰的方法，是属于对象的，称为实例方法；调用时，需要使用对象调用</p>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><p>如果一个类中的方法全都是静态的，那么这样的类就叫做工具类。</p>
<p>比如一个生成验证码的类就可以写成工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyUtils</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCode</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义一个字符串，用来记录产生的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.验证码是由所有的大写字母、小写字母或者数字字符组成</span></span><br><span class="line">        <span class="comment">//这里先把所有的字符写成一个字符串，一会从字符串中随机找字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.循环n次，产生n个索引,再通过索引获取字符</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(data.length());</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> data.charAt(index);</span><br><span class="line">            <span class="comment">//4.把获取到的字符，拼接到code验证码字符串上。</span></span><br><span class="line">            code+=ch;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后返回code,code的值就是验证码</span></span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块根据有无static修饰分为两种：静态代码块、实例代码块</p>
<h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>类加载时自动执行，只执行一次，在构造器之前执行。</p>
<p>可以用于完成类的初始化等，例如对类变量的初始化赋值。</p>
<h4 id="实例代码块"><a href="#实例代码块" class="headerlink" title="实例代码块"></a>实例代码块</h4><p>在创建对象之前执行，<strong>每次创建对象之前都会执行一次</strong></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Java中提供了一个关键字extends，用这个关键字，可以让一个类和另一个类建立起父子关系。</p>
<p>子类能继承父类的<strong>非私有</strong>成员。</p>
<p>带继承关系的类，java会用类和其父类，这<strong>多张设计图</strong>来一起创建类的对象。</p>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>用来限制类中的成员（成员变量、成员方法、构造器、代码块…）能够被访问的范围。</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>本类里</th>
<th>同一个包中的类</th>
<th>子孙类</th>
<th>任意类</th>
</tr>
</thead>
<tbody><tr>
<td><strong>private</strong></td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>缺省</strong></td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>protected</strong></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td><strong>public</strong></td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<h3 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h3><p>Java是单继承的，即一个类只能继承一个父类，但是支持<strong>多层继承</strong>。</p>
<p>Object类是java中所有类的祖先类，我们写的任何一个类，只要没有继承别的类，都会默认继承Object。</p>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>当子类觉得父类中的某个方法不好用，或者无法满足自己的需求时，子类可以重写一个方法名称、参数列表一样的方法，去覆盖父类的这个方法，这就是方法重写。</p>
<ul>
<li>使用Override注解，他可以指定java编译器，检查我们方法重写的格式是否正确，代码可读性也会更好。</li>
<li>子类重写父类方法时，访问权限必须大于或者等于父类该方法的权限（ public &gt; protected &gt; 缺省 ）。</li>
<li>重写的方法返回值类型，必须与被重写方法的返回值类型一样，或者范围更小。</li>
<li>私有方法、静态方法不能被重写，如果重写会报错的。</li>
<li>一般而言，方法重写遵循返回值类型和权限都不变，只改变方法的原则</li>
</ul>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>最常见的应用是子类重写Object类的<code>toString()</code>方法，以便返回对象的内容。</p>
<p>java支持直接打印类，系统会调用Object类中的<code>toString</code>方法进行输出。</p>
<p>Object类默认的toString方法返回的是地址，一般不用。此外，由于特别常用，因此不用自己写，像setter和getter一样可以生成。</p>
<h3 id="子类访问成员的特点"><a href="#子类访问成员的特点" class="headerlink" title="子类访问成员的特点"></a>子类访问成员的特点</h3><p>继承至少涉及到两个类，而每一个类中都可能有各自的成员（成员变量、成员方法），就有可能出现子类和父类有相同成员的情况。</p>
<p><strong>在子类中访问其他成员（成员变量、成员方法），是依据就近原则的</strong></p>
<ul>
<li>先子类局部范围找</li>
<li>再子类成员范围找</li>
<li>最后父类成员范围找，找不到就报错</li>
</ul>
<p>如果子类和父类出现同名变量或者方法，优先使用子类的；此时如果一定要在子类中使用父类的成员，可以加<strong>this</strong>或者<strong>super</strong>进行区分。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;父类名字&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==父类的print1方法执行==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;子类名称&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部名称&quot;</span>;</span><br><span class="line">        System.out.println(name); <span class="comment">// 局部名称</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name); <span class="comment">// 子类成员变量</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name); <span class="comment">// 父类的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==子类的print1方法执行了=&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        print1(); <span class="comment">// 子类的</span></span><br><span class="line">        <span class="built_in">super</span>.print1(); <span class="comment">// 父类的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子类构造器的特点"><a href="#子类构造器的特点" class="headerlink" title="子类构造器的特点"></a>子类构造器的特点</h3><h4 id="super"><a href="#super" class="headerlink" title="super()"></a><code>super()</code></h4><p>子类的构造器会<strong>先调用父类构造器</strong>，再执行自己。</p>
<p>因为子类构造器中会默认带一行<code>super()</code>代码，作用就是调用父类的构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Z</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// super(); //默认存在的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类z的无参构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Z</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">// super(); //默认存在的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类z的有参构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="super-String"><a href="#super-String" class="headerlink" title="super(String)"></a><code>super(String)</code></h4><p>如果父类没有构造器，会默认带一个无参构造器；但如果父类只有一个有参构造器，系统就不会生成默认的无参构造器，此时由于子类中默认存在的<code>super()</code>还回去找父类的无参构造器，就会报错。</p>
<p>如果不想使用默认的<code>super()</code>方式调用父类构造器，还可以手动使用<code>super(参数)</code>调用父类有参数构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Z</span> <span class="keyword">extends</span> <span class="title class_">F</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Z</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name); <span class="comment">//调用父类的带String参数的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类z的有参构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String skill;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name,<span class="type">int</span> age,String skill)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age); <span class="comment">//调用父类的有参构造器来完成初始化</span></span><br><span class="line">        <span class="built_in">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="this"><a href="#this" class="headerlink" title="this()"></a><code>this()</code></h4><p>通过使用<code>this()</code>可以调用本类中的无参构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="comment">//需求：当学生没有填写年龄，默认18岁</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">       	<span class="comment">//this.name=name;</span></span><br><span class="line">        <span class="comment">//this.age=18; </span></span><br><span class="line">        <span class="comment">//这样写也能实现，但代码和下面的有参构造器的相似度太高</span></span><br><span class="line">        <span class="built_in">this</span>(name,<span class="number">18</span>); <span class="comment">//可以直接调用下面的有参构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：在一个构造器中，this和super不能同时使用。</strong>有this时，super不会默认存在</p>
<ul>
<li>this和super都要写在构造器的第一行</li>
<li>this在调用其他构造器时，必定会调用super，不需要再有一个super</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>多态是在继承&#x2F;实现情况下的一种现象，表现为：<strong>对象多态</strong>、<strong>行为多态</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="type">People</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"><span class="comment">//p1和p2都是people类型，但是指向的对象不一样，这种现象称之为对象多态</span></span><br><span class="line">p1.run();<span class="comment">//编译看左边，运行看右边，即编译器找的是people类中的run，运行时找student类中的run</span></span><br><span class="line">p2.run();</span><br><span class="line"><span class="comment">//都可以调用run方法，但两个方法表现的行为不一样，这种现象称之为行为多态</span></span><br></pre></td></tr></table></figure>

<p>多态前提</p>
<ul>
<li>有继承&#x2F;实现关系</li>
<li>存在父类引用子类对象</li>
<li>存在方法重写</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>在多态形式下，右边的代码是<strong>解耦合</strong>的，更便于扩展和维护。</li>
</ol>
<p>耦合是指两个或两个以上的体系或两种运动形式间通过相互作用而彼此影响以至联合起来的现象。让数据模型，业务逻辑和视图显示三层之间彼此降低耦合，把关联依赖降到最低，而不至于牵一发而动全身。原则就是A功能的代码不要写在B的功能代码中，如果两者之间需要交互，可以通过接口，通过消息，甚至可以引入框架，但总之就是不要直接交叉写。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">//多态如何解耦合。</span></span><br><span class="line"><span class="comment">//假设Student类需要换成别的类，使用多态可以直接替换，下面的代码不需要修改</span></span><br><span class="line"><span class="comment">//People p1 = new Teacher();</span></span><br><span class="line">p1.run();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义方法时，<strong>使用父类类型作为形参，可以接收一切子类对象</strong>，扩展行更强，更便利。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标：掌握使用多态的好处</span></span><br><span class="line">		<span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">		go(t);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        go(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数People p既可以接收Student对象，也能接收Teacher对象。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(People p)</span>&#123;</span><br><span class="line">        p.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>在使用多态时，由于编译器在找方法时以左边的类型为准，因此子类的独有方法无法编译通过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">People</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">p1.study(); <span class="comment">//由于People类中没有study方法，因此编译不通过</span></span><br></pre></td></tr></table></figure>

<p>要解决上述缺点，就需要多态下的类型转换。</p>
<ul>
<li><p>自动类型转换：<code>People p = new Student();</code></p>
</li>
<li><p>强制类型转换：<code>Student t = (Student)p;</code></p>
</li>
<li><p>错误转换：<code>Teacher t = (Teacher)p;</code></p>
</li>
</ul>
<p>因为p<strong>原本就是student，才能转成student</strong>。</p>
<p>如果类型转换错了，编译阶段能通过，但是在运行时会出现类型转换异常ClassCastException，比如把Teacher类型转换成了Student类型。原因是编译和运行的认知不同，编译器认为p是people类型，且teacher继承了people，故允许这种转换。</p>
<p><strong>原本是什么类型，才能强转成什么类型。</strong></p>
<p>Java建议在强转前使用<code>instanceof</code>判断当前对象的真实类型，再强转。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(p <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">t</span> <span class="operator">=</span> (Student) p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个用在行为多态更合适，</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">		go(t);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        go(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数People p既可以接收Student对象，也能接收Teacher对象。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(People p)</span>&#123;</span><br><span class="line">        p.run();</span><br><span class="line">        <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> (Student) p;</span><br><span class="line">            s.study();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p <span class="keyword">instanceof</span> Teacher)&#123;</span><br><span class="line">            <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> (Teacher) p;</span><br><span class="line">            p.teach();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p><code>abstract</code>关键字可以修饰类和方法，变成抽象类和抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abstract修饰类，这个类就是抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//abstract修饰方法，这个方法就是抽象方法</span></span><br><span class="line">    <span class="comment">//抽象方法不能有方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象类中不一定有抽象方法，<strong>有抽象方法的类一定是抽象类</strong>。</li>
<li>类该有的成员（成员变量、方法、构造器）抽象类都可以有。</li>
<li>抽象类最主要的特点：<strong>抽象类不能创建对象</strong>，仅作为一种特殊的父类，让子类继承并实现。</li>
<li>一个类继承抽象类，必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</li>
</ul>
<h2 id="抽象类-1"><a href="#抽象类-1" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li>父类知道每个子类都要做的行为，但每个子类的情况不同，父类就定义成抽象方法，强制子类去重载。</li>
<li>不知道系统未来具体的业务实现时，我们可以先定义抽象类，将来让子类去实现，以方便系统的扩展。</li>
<li>总之，<strong>抽象类是为了更好地支持多态</strong>。</li>
</ol>
<p>例如，有猫类和狗类，都有叫的方法，但他们叫的行为不同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动物叫的行为：不具体，是抽象的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;汪汪汪的叫~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;喵喵喵的叫~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标：掌握抽象类的使用场景和好处.</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.cry();	<span class="comment">//这时执行的是Dog类的cry方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>Java提供了一个关键字interface，用这个关键字来定义接口这种特殊结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> interface 接口名&#123;</span><br><span class="line">    <span class="comment">//成员变量（常量）</span></span><br><span class="line">    <span class="comment">//成员方法（抽象方法）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="comment">//这里public static final默认存在，可以不加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里的public abstract默认存在，可以不加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//打印A接口中的常量</span></span><br><span class="line">        System.out.println(A.SCHOOL_NAME);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//接口是不能创建对象的</span></span><br><span class="line">        <span class="comment">//A a = new A();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>接口是用来被类实现的，我们称之为实现类。</strong></li>
<li><strong>一个类是可以实现多个接口的（接口可以理解成干爹），类实现接口必须重写所有接口的全部抽象方法，否则这个类也必须是抽象类</strong></li>
</ul>
<h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ul>
<li>弥补了单继承的不足，一个类同时可以实现多个接口。</li>
<li>让程序可以<strong>面向接口编程</strong>，这样程序员可以灵活方便的切换各种业务实现。</li>
</ul>
<p>比如一个学生，但他也可以是歌手，也可以是司机。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Singer</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A类是Student的子类，同时也实现了Dirver接口和Singer接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Driver</span>, Singer&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//想唱歌的时候，A类对象就表现为Singer类型</span></span><br><span class="line">        <span class="type">Singer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        <span class="comment">//面向接口编程，后面的对象可以灵活地替换</span></span><br><span class="line">        s.sing();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//想开车的时候，A类对象就表现为Driver类型</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        d.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>设计一个班级学生的信息管理模块：学生的数据有：姓名、性别、成绩</p>
<p>功能1：要求打印出全班学生的信息； 功能2：要求打印出全班学生的平均成绩。</p>
<p>注意！以上功能的业务实现是有多套方案的，比如：</p>
<p>第1套方案：能打印出班级全部学生的信息；能打印班级全部学生的平均分。</p>
<p>第2套方案：能打印出班级全部学生的信息（包含男女人数）；能打印班级全部学生的平均分（要求是去掉最高分、最低分）。</p>
<p><strong>要求：系统可以支持灵活的切换这些实现方案。</strong></p>
<ol>
<li>先写一个学生类，用来描述学生的相关信息</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>写一个StudentOperator接口，表示学生信息管理系统的两个功能。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentOperator</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAllInfo</span><span class="params">(ArrayList&lt;Student&gt; students)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAverageScore</span><span class="params">(ArrayList&lt;Student&gt; students)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>写一个StudentOperator接口的实现类StudentOperatorImpl1，采用第1套方案对业务进行实现。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentOperatorImpl1</span> <span class="keyword">implements</span> <span class="title class_">StudentOperator</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllInfo</span><span class="params">(ArrayList&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------全班全部学生信息如下--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAverageScore</span><span class="params">(ArrayList&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">allScore</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>写一个StudentOperator接口的实现类StudentOperatorImpl2，采用第2套方案对业务进行实现。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentOperatorImpl2</span> <span class="keyword">implements</span> <span class="title class_">StudentOperator</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAllInfo</span><span class="params">(ArrayList&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------全班全部学生信息如下--------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAverageScore</span><span class="params">(ArrayList&lt;Student&gt; students)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">allScore</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>写一个班级管理类ClassManager，在班级管理类中使用StudentOperator的实现类StudentOperatorImpl1对学生进行操作</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">StudentOperator</span> <span class="variable">studentOperator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentOperatorImpl1</span>();</span><br><span class="line">    <span class="comment">//需要更换方案时，只需要把对象名换一下。</span></span><br><span class="line">    <span class="comment">//private StudentOperator studentOperator = new StudentOperatorImpl2();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassManager</span><span class="params">()</span>&#123;</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;迪丽热巴&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">99</span>));</span><br><span class="line">        students.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;古力娜扎&quot;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印全班全部学生的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentOperator.printAllInfo(students);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印全班全部学生的平均分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printScore</span><span class="params">()</span>&#123;</span><br><span class="line">        studentOperator.printAverageScore(students);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JDK8新特性"><a href="#JDK8新特性" class="headerlink" title="JDK8新特性"></a>JDK8新特性</h3><p>从jdk8开始，接口新增了三种方法形式。</p>
<ul>
<li>默认方法：是个实例方法，需要使用实现类的对象访问</li>
<li>私有方法：是个实例方法，只能在内部访问(同接口的默认方法或其他私有方法中访问)</li>
<li>静态方法：用static修饰，用接口名访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、默认方法：必须使用default修饰，默认会被public修饰</span></span><br><span class="line"><span class="comment">     * 实例方法：对象的方法，必须使用实现类的对象来访问。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===默认方法==&quot;</span>);</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2、私有方法：必须使用private修饰。(JDK 9开始才支持的)</span></span><br><span class="line"><span class="comment">     *   实例方法：对象的方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===私有方法==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3、静态方法：必须使用static修饰，默认会被public修饰</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==静态方法==&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>假如现在有一个接口被10个类继承，现在要在接口中新增一个方法，如果没有新特性，需要在10个类中都实现这个方法。利用新特性，只需要在接口中增加一个默认方法即可</p>
<p><strong>增强接口能力，便于项目维护和扩展</strong></p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li>一个接口继承多个接口，如果多个接口中存在相同的方法声明，则此时不支持多继承</li>
<li>一个类实现多个接口，如果多个接口中存在相同的方法声明，则此时不支持多实现</li>
<li>一个类继承了父类，又同时实现了接口，父类中和接口中有同名的默认方法，实现类会有限使用父类的方法</li>
<li>一个类实现了多个接口，多个接口中有同名的默认方法，则这个类必须重写该方法。</li>
</ol>
<h2 id="接口和抽象类的比较"><a href="#接口和抽象类的比较" class="headerlink" title="接口和抽象类的比较"></a>接口和抽象类的比较</h2><ul>
<li><strong>接口是行为的抽象</strong>，是一种行为的规范，接口是like a 的关系；<strong>抽象是对类的抽象，是一种模板设计</strong>，抽象类是is a 的关系。接口是特殊的抽象类。</li>
<li>接口没有构造方法；而抽象类有构造方法，其方法一般给子类使用</li>
<li>接口只有定义，不能有方法的实现，java 1.8中可以定义default方法体；而抽象类可以有定义与实现，方法可在抽象类中实现。</li>
<li>抽象体现出了继承关系，继承只能单继承。接口提现出来了实现的关系，实现可以多实现。<strong>接口强调特定功能的实现，而抽象类强调所属关系。</strong></li>
<li><strong>接口成员变量默认为public static final</strong>，必须赋初值，不能被修改；其所有的<strong>成员方法都是public abstract</strong>的。抽象类中成员变量默认default，可在子类中被重新定义，也可被重新赋值；抽象方法被abstract修饰，不能被private、static、synchronized和native等修饰，必须以分号结尾，不带花括号。</li>
</ul>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="概念-5"><a href="#概念-5" class="headerlink" title="概念"></a>概念</h3><p>内部类是类中的五大成分之一（成员变量、方法、构造器、内部类、代码块），如果一个类定义在另一个类的内部，这个类就是内部类。</p>
<p>当一个类的内部，包含一个完整的事物，且这个事物没有必要单独设计时，就可以把这个事物设计成内部类。</p>
<p>比如：汽车、的内部有发动机，发动机是包含在汽车内部的一个完整事物，可以把发动机设计成内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">	<span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类有四种形式，分别是成员内部类、静态内部类、局部内部类、<strong>匿名内部类</strong>。前面三种了解即可</p>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>成员内部类就是类中的一个普通成员，类似于成员变量、成员方法。</p>
<p>在内部类中既可以访问自己类的成员，也可以访问外部类的成员。</p>
<p>如果内部类成员和外部类成员同名，可以使用**<code>类名.this.成员</code>**区分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String a=<span class="string">&quot;黑马&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内部类中既可以访问自己类的成员，也可以访问外部类的成员</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(age); <span class="comment">//88</span></span><br><span class="line">            System.out.println(a);   <span class="comment">//黑马</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">77</span>;</span><br><span class="line">            System.out.println(age); <span class="comment">//77</span></span><br><span class="line">            System.out.println(<span class="built_in">this</span>.age); <span class="comment">//88</span></span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.age); <span class="comment">//99</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//外部类.内部类 变量名 = new 外部类().new 内部类();</span></span><br><span class="line">Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line"><span class="comment">//内部类是外部类的成员，要先创建外部类对象才能创建内部类对象</span></span><br><span class="line"><span class="comment">//调用内部类的方法</span></span><br><span class="line">in.test();</span><br></pre></td></tr></table></figure>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类属于外部类自己持有。静态内部类可以访问外部类的静态变量，但<strong>不能访问外部类的实例变量</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String schoolName=<span class="string">&quot;黑马&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">//静态内部类访问外部类的静态变量，是可以的；</span></span><br><span class="line">        <span class="comment">//静态内部类访问外部类的实例变量，是不行的</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(schoolName); <span class="comment">//99</span></span><br><span class="line">            <span class="comment">//System.out.println(age);   //报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//格式：外部类.内部类 变量名 = new 外部类.内部类();</span></span><br><span class="line">Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">in.test();</span><br></pre></td></tr></table></figure>

<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类是定义在方法中的类，和局部变量一样，只能在方法中有效。所以局部内部类的局限性很强，一般在开发中是不会使用的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Inner...show&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//局部内部类只能在方法中创建对象，并使用</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><h4 id="概念-6"><a href="#概念-6" class="headerlink" title="概念"></a>概念</h4><p>匿名内部类是一种<strong>特殊的局部内部类</strong>；且不需要为这个类声明名字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口(参数值)&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    重写父类/接口的方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>匿名内部类本质上是一个没有名字的子类<strong>对象</strong>、或者接口的实现类<strong>对象</strong>。</p>
<p>编译器会把这个匿名内部类编译成一个子类，然后立即创建一个子类对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//这里后面new 的部分，其实就是一个Animal的子类对象</span></span><br><span class="line">        <span class="comment">//这里隐含的有多态的特性： Animal a = Animal子类对象;</span></span><br><span class="line">        <span class="comment">//如果某个类很少实例化，甚至只需要实例化一次，就不必声明名字，直接匿名创建对象</span></span><br><span class="line">        <span class="comment">//Animal a = new Cat();</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猫喵喵喵的叫~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a.cry(); <span class="comment">//直线上面重写的cry()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在调用方法时，当方法的形参是一个接口或者抽象类，为了<strong>简化代码书写</strong>，而直接传递匿名内部类对象给方法。这样就可以少写一个类。</p>
<p><strong>通常自己不会用，一般只有在系统API需要传递接口或类对象时才用</strong>。比如在写GUI时绑定事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Swimming</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swimming</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;狗刨飞快&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        go(s1);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swimming</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猴子游泳也还行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        go(s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形参是Swimming接口，实参可以接收任意Swimming接口的实现类对s象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(Swimming s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始~~~~~~~~&quot;</span>);</span><br><span class="line">        s.swim();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束~~~~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java注意事项</title>
    <url>/2023/10/30/19-00-37/</url>
    <content><![CDATA[<ul>
<li>case语句如果不加break，在第一次匹配成功时，后面所有语句都会执行，知道遇到break，不管case能不能匹配上</li>
</ul>
<span id="more"></span>

<p><img src="/pic/1.jpg"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础</title>
    <url>/2023/10/09/19-00-37/</url>
    <content><![CDATA[<h2 id="Java的背景知识"><a href="#Java的背景知识" class="headerlink" title="Java的背景知识"></a>Java的背景知识</h2><h3 id="技术体系"><a href="#技术体系" class="headerlink" title="技术体系"></a>技术体系</h3><p>所谓技术体系，就是Java为了满足不同的应用场景提供了不同的技术版本，主要有三个版本。</p>
<ul>
<li><p>Java SE（Java Standard Edition）：叫做标准版，它是后面两个版本的基础，</p>
</li>
<li><p>Java EE（Java Enterprise Edition）: 叫做企业版，它是为企业级应用开发提供的一套解决方案。</p>
</li>
<li><p>Java ME（Java Micro Edition）：叫做小型版，它为开发移动设备的应用提供了一套解决方案。<strong>目前已经不被市场认可（淘汰），取而代之的是基于Android系统的应用开发</strong>。</p>
</li>
</ul>
<span id="more"></span>

<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>文件名和类名不一致</p>
<h3 id="JDK的组成"><a href="#JDK的组成" class="headerlink" title="JDK的组成"></a>JDK的组成</h3><p>JDK由JVM、核心类库、开发工具组成。其中JVM和核心类库组成了JRE（Java Runtime Enviroment），即Java的运行环境</p>
<ul>
<li><p>JDK最核心的组成部分是JVM（Java Virtual Machine），它是Java虚拟机，真正运行Java程序的地方。</p>
</li>
<li><p>核心类库是Java本身写好的一些程序，给程序员调用的。 Java程序员并不是凭空开始写代码，是要基于核心类库提供的一些基础代码，进行编程。</p>
</li>
<li><p>源代码需要编译成字节码(.class)，<strong>编译工具</strong>叫做javac.exe，编写好源代码之后，想要把class文件加载到内存中运行，这里需要用到<strong>运行工具</strong>java.exe。 除了编译工具和运行工具，还有一些其他的反编译工具、文档工具等</p>
</li>
</ul>
<h3 id="跨平台原理"><a href="#跨平台原理" class="headerlink" title="跨平台原理"></a>跨平台原理</h3><p>如果没有跨平台性，同一个应用程序，想要在多种操作系统上运行，需要针对各个操作系统单独开发应用。比如微信有Windows版本、MacOS版本、Android版本、IOS版本</p>
<p>跨平台性的原理是因为在<strong>不同版本的操作系统</strong>中安装有<strong>不同版本的Java虚拟机</strong>，Java程序的运行只依赖于Java虚拟机，和操作系统并没有直接关系。<strong>从而做到一处编译，处处运行</strong>。</p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>首先，左边<code>int[] ages</code> 表示定义了一个数组类型的变量，变量名叫ages</p>
<p>其次，右边<code>&#123;12,24,36&#125;</code>表示创建一个数组对象，你完全可以把它理解成一个能装数据的东西。这个对象在内存中会有一个地址值<code>[I@4c873330</code>，每次创建一个数组对象都会有不用的地址值。</p>
<p>然后，把右边的地址值<code>[I@4c873330</code>赋值给左边的ages变量</p>
<p>所以，ages变量就可以通过地址值，找到数组这个东西。</p>
<p>Java为了便于虚拟机执行Java程序，将虚拟机的内存划分为 方法区、栈、堆、本地方法栈、寄存器 这5块区域。同学们需要重点关注的是  <strong>方法区、栈、堆</strong>。</p>
<p>下面把每一个块内存区域作用介绍一下，我们大致只需要知道每一部分存储什么内容就行。</p>
<ul>
<li><strong>方法区</strong>：字节码文件先加载到这里</li>
<li><strong>栈</strong>：方法运行时所进入的内存区域，由于变量在方法中，所以变量也在这一块区域中</li>
<li><strong>堆</strong>：存储new出来的东西，并分配地址。由于数组是new 出来的，所以数组也在这块区域。</li>
</ul>
<p><strong>总结一下<code>int a = 10</code>与 <code>int[] arr = new int[]&#123;11,22,33&#125;的区别</code></strong></p>
<ul>
<li><strong>a</strong>是一个变量，在栈内存中，<strong>a</strong>变量中存储的数据就是<strong>10</strong>这个值。</li>
<li><strong>arr</strong>也是一个变量，在栈中，存储的是数组对象在堆内存中的地址值</li>
</ul>
<h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><p>静态初始化指的是：在定义数组时直接给数组中的数据赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组，用来存储多个年龄</span></span><br><span class="line"><span class="type">int</span>[] ages = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;</span><br><span class="line"><span class="comment">//简化写法</span></span><br><span class="line"><span class="type">int</span>[] ages = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;</span><br><span class="line"><span class="comment">//等价写法</span></span><br><span class="line"><span class="type">int</span> ages[] = &#123;<span class="number">12</span>, <span class="number">24</span>, <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据类型[]  数组名 = new 数据类型[长度];</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包类似于文件夹，一个包中可以放多个类文件。</p>
<ul>
<li><p>如果当前程序中，要调用自己所在包下的其他程序，可以直接调用。（同一个包下的类，互相可以直接调用）</p>
</li>
<li><p>如果当前程序中，要调用其他包下的程序，则必须在当前程序中导包, 才可以访问！</p>
<p>导包格式：<code> import 包名.类名</code></p>
</li>
<li><p>如果当前程序中，要调用Java.lang包下的程序，不需要我们导包的，可以直接使用。</p>
</li>
<li><p>如果当前程序中，要调用多个不同包下的程序，而这些程序名正好一样，此时默认只能导入一个程序，另一个程序必须带包名访问。</p>
</li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><h2 id="final和常量"><a href="#final和常量" class="headerlink" title="final和常量"></a>final和常量</h2><ol>
<li><p>final修饰类：该类称为最终类，特点是不能被继承。</p>
<p>比如一些工具类可以用final修饰。</p>
</li>
<li><p>final修饰方法：该方法称之为最终方法，特点是不能被重写。</p>
</li>
<li><p>final修饰变量：该变量只能被赋值一次。</p>
<p>被 <strong>static final</strong> 修饰的成员变量称为常量，通常用于记录系统的配置信息。常量命名规范：建议都采用大写字母命名，多个单词之前有_隔开。比如<code>public static final String SCHOOL_NAME = &quot;南理工&quot;;</code></p>
<p>在程序编译后，常量会“宏替换”，出现常量的地方，全都会被替换为其记住的字面量。把代码反编译后，其实代码是下面的样子</p>
<p><strong>注意</strong></p>
<ul>
<li>修饰基本类型变量时，变量存储的<strong>数据</strong>不能改变</li>
<li>修饰引用类型变量时，变量存储的<strong>地址</strong>不能改变，但地址指向的对象内容可以改变。</li>
</ul>
</li>
</ol>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>枚举是一种特殊的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举类名&#123;</span><br><span class="line">    对象名称<span class="number">1</span>,对象名称<span class="number">2</span>;</span><br><span class="line">    其他成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>枚举类的第一行只能罗列一些名称，这些名称都是<strong>常量</strong>，并且<strong>每个常量记住的都是枚举类的一个对象</strong>。</li>
<li>枚举类的<strong>构造器都是私有</strong>的（写不写都只能是私有的），因此，枚举类对外不能创建对象。</li>
<li>枚举都是最终类，<strong>不可以被继承</strong>。</li>
<li>枚举类中，从第二行开始，可以定义类的其他各种成员。</li>
<li>编译器为枚举类新增了几个方法，并且枚举类都是继承自<code>java.lang.Enum</code>类的，从enum类也会继承到一些方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    X,Y,Z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//获取枚举A类的，枚举项</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> A.X;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a2</span> <span class="operator">=</span> A.Y;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a3</span> <span class="operator">=</span> A.Z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用枚举可以实现单例设计模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">A</span>&#123;</span><br><span class="line">	x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p><strong>枚举一般表示一组固定的值，然后作为参数进行传输。</strong></p>
<p>比如用户性别，可以用常量做，也可以用枚举做。</p>
<ul>
<li>常量的参数值不受约束</li>
<li>枚举代码可读性好，参数值有约束。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Constant</span>&#123;</span><br><span class="line">    BOY,GRIL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//调用方法，传递男生</span></span><br><span class="line">        provideInfo(Constant.BOY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">provideInfo</span><span class="params">(Constant c)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">            <span class="keyword">case</span> BOY:</span><br><span class="line">                System.out.println(<span class="string">&quot;展示一些信息给男生看&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GRIL:</span><br><span class="line">                System.out.println(<span class="string">&quot;展示一些信息给女生看&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>所谓泛型指的是，在定义类、接口、方法时，同时声明了一个或者多个类型变量（如：<E>），称为泛型类、泛型接口、泛型方法、它们统称为泛型。</p>
<p>比如<code>ArrayList</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里的&lt;T,W&gt;其实指的就是类型变量，可以是一个，也可以是多个。</span></span><br><span class="line"><span class="keyword">public</span> class 类名&lt;T,W&gt;&#123; &#125;</span><br><span class="line"><span class="comment">//泛型类可以限制类型</span></span><br><span class="line"><span class="keyword">public</span> class 类名&lt;E <span class="keyword">extends</span> <span class="title class_">People</span>&gt;&#123; &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个泛型类，用来表示一个容器</span></span><br><span class="line"><span class="comment">//容器中存储的数据，它的类型用&lt;E&gt;先代替用着，等调用者来确认&lt;E&gt;的具体类型。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] array = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//定一个索引，方便对数组进行操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        array[index]=e;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E)array[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Data</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T t)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;T&gt; <span class="title function_">getByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此时确定Data&lt;E&gt;中的E为Teacher类型，</span></span><br><span class="line"><span class="comment">//接口中add和getByName方法上的T也都会变成Teacher类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherData</span> <span class="keyword">implements</span> <span class="title class_">Data</span>&lt;Teacher&gt;&#123;</span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Teacher t)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Teacher&gt; <span class="title function_">getByName</span><span class="params">(String name)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要先声明泛型变量</span></span><br><span class="line"><span class="keyword">public</span> &lt;泛型变量,泛型变量&gt; 返回值类型 方法名(形参列表)&#123;&#125;</span><br><span class="line"><span class="comment">//&lt;T&gt;为声明泛型变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getData</span><span class="params">(T t)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型限定"><a href="#泛型限定" class="headerlink" title="泛型限定"></a>泛型限定</h3><p>泛型限定的意思是对泛型的数据类型进行范围的限制。</p>
<ul>
<li><?> 表示任意类型</li>
<li><? extends 数据类型> 表示指定类型或者指定类型的子类，也叫**泛型上限**</li>
<li><? super 数据类型> 表示指定类型或者指定类型的父类，也叫**泛型下限**</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BENZ</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BWN</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//1.集合中的元素不管是什么类型，test1方法都能接收</span></span><br><span class="line">        ArrayList&lt;BWM&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Benz&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        test1(list1);</span><br><span class="line">        test1(list2);</span><br><span class="line">        test1(list3);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.集合中的元素只能是Car或者Car的子类类型，才能被test2方法接收</span></span><br><span class="line">        ArrayList&lt;Car&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;BWM&gt; list5 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        test2(list4);</span><br><span class="line">        test2(list5);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.集合中的元素只能是Car或者Car的父类类型，才能被test3方法接收</span></span><br><span class="line">        ArrayList&lt;Car&gt; list6 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Object&gt; list7 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        test3(list6);</span><br><span class="line">        test3(list7);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(ArrayList&lt;?&gt; list)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(ArrayList&lt;? extends Car&gt; list)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(ArrayList&lt;? <span class="built_in">super</span> Car&gt; list)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型擦除和注意事项"><a href="#泛型擦除和注意事项" class="headerlink" title="泛型擦除和注意事项"></a>泛型擦除和注意事项</h3><p>泛型只在编译阶段有效，一旦编译成字节码，<strong>字节码中是不包含泛型的</strong>，而是具体的类型，这就是泛型擦除。</p>
<p>泛型只支持引用数据类型，即对象类型，<strong>不支持基本数据类型</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ArrayList&lt;int&gt; list1 = new ArrayList&lt;&gt;(); //不允许，int是基本数据类型</span></span><br><span class="line">ArrayList&lt;Integer&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//可以用int的对象类型</span></span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>正则表达式其实是由一些特殊的符号组成的，它代表的是某种规则。</strong></p>
<p>主要有两个作用</p>
<ul>
<li>校验数据格式是否合法</li>
<li>在一段文本中查找满足要求的内容</li>
</ul>
<h3 id="书写规则"><a href="#书写规则" class="headerlink" title="书写规则"></a>书写规则</h3><h3 id="校验数据"><a href="#校验数据" class="headerlink" title="校验数据"></a>校验数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：校验用户输入的电话、邮箱、时间是否合法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        checkPhone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入您的电话号码(手机|座机): &quot;</span>);</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="comment">// 18676769999  010-3424242424 0104644535</span></span><br><span class="line">            <span class="keyword">if</span>(phone.matches(<span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1-9]\\d&#123;4,19&#125;)&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的号码格式正确~~~&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的号码格式不正确~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找内容"><a href="#查找内容" class="headerlink" title="查找内容"></a>查找内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求1：从以下内容中爬取出，手机，邮箱，座机、400电话等信息。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot; 来黑马程序员学习Java，\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        电话：1866668888，18699997777\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        或者联系邮箱：boniu@itcast.cn，\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        座机电话：01036517895，010-98951256\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        邮箱：bozai@itcast.cn，\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        邮箱：dlei0009@163.com，\n&quot;</span> +</span><br><span class="line">    <span class="string">&quot;        热线电话：400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;</span><br><span class="line">    <span class="comment">// 1、定义爬取规则</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,7&#125;-?[1-9]\\d&#123;4,19&#125;)|(\\w&#123;2,&#125;@\\w&#123;2,20&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;)&quot;</span></span><br><span class="line">    + <span class="string">&quot;|(400-?\\d&#123;3,7&#125;-?\\d&#123;3,7&#125;)&quot;</span>;</span><br><span class="line">    <span class="comment">// 2、把正则表达式封装成一个Pattern对象</span></span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">    <span class="comment">// 3、通过pattern对象去获取查找内容的匹配器对象。</span></span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(data);</span><br><span class="line">    <span class="comment">// 4、定义一个循环开始爬取信息</span></span><br><span class="line">    <span class="keyword">while</span> (matcher.find())&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> matcher.group(); <span class="comment">// 获取到了找到的内容了。</span></span><br><span class="line">        System.out.println(rs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexTest5</span> &#123;    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        </span><br><span class="line">            <span class="comment">// 1、public String replaceAll(String regex , String newStr)：按照正则表达式匹配的内容进行替换        </span></span><br><span class="line">        <span class="comment">// 需求1：请把下面字符串中的不是汉字的部分替换为 “-”        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;        </span><br><span class="line">        System.out.println(s1.replaceAll(regex:<span class="string">&quot;\\w+&quot;</span>, replacement:<span class="string">&quot;-&quot;</span>));                </span><br><span class="line">        <span class="comment">// 需求2(拓展)：某语音系统，收到一个口吃的人说的“我我我喜欢编编编编编编编编编编编编程程程！”，需要优化成“我喜欢编程！”。        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;我我我喜欢编编编编编编编编编编编编程程程&quot;</span>;        </span><br><span class="line">        System.out.println(s2.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>, <span class="string">&quot;$1&quot;</span>));</span><br><span class="line">        <span class="comment">// 2、public String[] split(String regex)：按照正则表达式匹配的内容进行分割字符串，反回一个字符串数组。        </span></span><br><span class="line">        <span class="comment">// 需求1：请把下面字符串中的人名取出来，使用切割来做        </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;古力娜扎ai8888迪丽热巴999aa5566马尔扎哈fbbfsfs42425卡尔扎巴&quot;</span>;        </span><br><span class="line">        String[] names = s3.split(<span class="string">&quot;\\w+&quot;</span>);        </span><br><span class="line">        System.out.println(Arrays.toString(names));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>java会把异常封装为对象抛出去。</p>
<p>java中所有的异常和错误对象都继承自<code>Java.lang.Throwable</code>，它有两个子类，分别是</p>
<ul>
<li><code>Error</code>。代表系统级别错误，是java内部的错误，不用管</li>
<li><code>Exception</code>。代表程序中可能出现的问题，它有两个分支<ul>
<li><code>RuntimeException</code>。编译时正常，运行时出错，比如数组越界</li>
<li>其他异常，属于编译时异常。</li>
</ul>
</li>
</ul>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>java中提供的异常类不总满足需求。比如年龄非法。</p>
<p>可以<strong>自定义运行时异常或编译时异常。</strong>由于编译时异常在写代码时就会报错，需要在调用异常的方法体上加上<code>throws</code>把异常抛给它的调用者，这时调用者可以用try catch捕获</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、编译时异常类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeIllegalException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeIllegalException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeIllegalException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、运行时异常类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeIllegalRuntimeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeIllegalRuntimeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeIllegalRuntimeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 捕获底层可能产生的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            saveAge(<span class="number">225</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;saveAge底层执行是成功的！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeIllegalException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;saveAge底层执行是出现bug的！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄被成功保存： &quot;</span> + age);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用一个异常对象封装这个问题</span></span><br><span class="line">            <span class="comment">// throw 抛出去这个异常对象,给上层，由上层捕获</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeIllegalException</span>(<span class="string">&quot;/age is illegal, your age is &quot;</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 捕获底层可能产生的异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            saveAge2(<span class="number">225</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;saveAge2底层执行是成功的！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeIllegalException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;saveAge2底层执行是出现bug的！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">150</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄被成功保存： &quot;</span> + age);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用一个异常对象封装这个问题</span></span><br><span class="line">            <span class="comment">// throw 抛出去这个异常对象,给上层，由上层捕获</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeIllegalRuntimeException</span>(<span class="string">&quot;/age is illegal, your age is &quot;</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>比如有如下的场景：A调用用B，B调用C；C中有异常产生抛给B，B中有异常产生又抛给A；异常到了A这里就不建议再抛出了，因为最终抛出被JVM处理程序就会异常终止，并且给用户看异常信息，用户也看不懂，体验很不好。</p>
<p>此时比较好的做法就是：</p>
<ol>
<li>将异常捕获，将比较友好的信息显示给用户看</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test1();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您要找的文件不存在！！&quot;</span>);</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 打印出这个异常对象的信息。记录下来。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您要解析的时间有问题了！&quot;</span>);</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 打印出这个异常对象的信息。记录下来。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2028-11-11 10:24:11&quot;</span>);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 读取文件的。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/meinv.png&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>尝试修复</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest4</span> &#123;</span><br><span class="line">    <span class="comment">// 需求：调用一个方法，让用户输入一个合适的价格返回为止。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试修复</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(getMoney());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请您输入合法的数字！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请您输入合适的价格：&quot;</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble(); </span><br><span class="line">            <span class="comment">//接收到非double类型会自动抛出异常</span></span><br><span class="line">            <span class="comment">//运行时异常，自动抛给上层</span></span><br><span class="line">            <span class="keyword">if</span>(money &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> money;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的价格是不合适的！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>java提供了File类来对文件或文件夹进行操作，File对象只能对文件进行操作，<strong>不能操作文件中的内容</strong>。</p>
<h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、创建一个File对象，指代某个具体的文件。</span></span><br><span class="line">        <span class="comment">// 路径分隔符</span></span><br><span class="line">        <span class="comment">// File f1 = new File(&quot;D:/resource/ab.txt&quot;);</span></span><br><span class="line">        <span class="comment">// File f1 = new File(&quot;D:\\resource\\ab.txt&quot;);</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:&quot;</span> + File.separator +<span class="string">&quot;resource&quot;</span> + File.separator + <span class="string">&quot;ab.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.length()); <span class="comment">// 文件大小</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//可以指向文件夹</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/resource&quot;</span>);</span><br><span class="line">        System.out.println(f2.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：File对象可以指代一个不存在的文件路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/resource/aaaa.txt&quot;</span>);</span><br><span class="line">        System.out.println(f3.length());</span><br><span class="line">        System.out.println(f3.exists()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相对路径（重点）：不带盘符，默认是直接去工程下寻找文件的。</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file-io-app\\src\\itheima.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断当前文件对象，对应的文件路径是否存在，存在返回true.</span></span><br><span class="line">System.out.println(f4.exists());</span><br><span class="line"><span class="comment">// 判断当前文件对象指代的是否是文件，是文件返回true，反之。</span></span><br><span class="line">System.out.println(f4.isFile());</span><br><span class="line"><span class="comment">// 判断当前文件对象指代的是否是文件夹，是文件夹返回true，反之。</span></span><br><span class="line">System.out.println(f4.isDirectory());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件的名称（包含后缀）</span></span><br><span class="line">System.out.println(f1.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件的大小，返回字节个数</span></span><br><span class="line">System.out.println(f1.length());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件的最后修改时间。</span></span><br><span class="line"><span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> f1.lastModified();</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">System.out.println(sdf.format(time));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取创建文件对象时，使用的路径</span></span><br><span class="line">System.out.println(f3.getPath());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取绝对路径</span></span><br><span class="line">System.out.println(f2.getAbsolutePath());</span><br></pre></td></tr></table></figure>

<h3 id="创建和删除文件"><a href="#创建和删除文件" class="headerlink" title="创建和删除文件"></a>创建和删除文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建新文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/resource/itheima2.txt&quot;</span>);</span><br><span class="line">System.out.println(f1.createNewFile());</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建文件夹</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/resource/aaa&quot;</span>);</span><br><span class="line">System.out.println(f2.mkdir());</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.mkdir(): 只能创建单级文件夹</span></span><br><span class="line"><span class="comment">//2.mkdirs(): 能创建多级文件夹</span></span><br><span class="line"><span class="comment">//3.delete(): 文件可以直接删除，但是文件夹只能删除空的文件夹。</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、获取当前目录下所有的&quot;一级文件名称&quot;到一个字符串数组中去返回。</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\course\\待研发内容&quot;</span>);</span><br><span class="line">String[] names = f1.list();</span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">	System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//（重点）获取当前目录下所有的&quot;一级文件对象&quot;到一个文件对象数组中去返回（重点）</span></span><br><span class="line">File[] files = f1.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">    System.out.println(file.getAbsolutePath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecursionTest3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          searchFile(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/&quot;</span>) , <span class="string">&quot;QQ.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去目录下搜索某个文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dir  目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 要搜索的文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">searchFile</span><span class="params">(File dir, String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、把非法的情况都拦截住</span></span><br><span class="line">        <span class="keyword">if</span>(dir == <span class="literal">null</span> || !dir.exists() || dir.isFile())&#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 代表无法搜索</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、dir不是null,存在，一定是目录对象。</span></span><br><span class="line">        <span class="comment">// 获取当前目录下的全部一级文件对象。</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、判断当前目录下是否存在一级文件对象，以及是否可以拿到一级文件对象。</span></span><br><span class="line">        <span class="keyword">if</span>(files != <span class="literal">null</span> &amp;&amp; files.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 4、遍历全部一级文件对象。</span></span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="comment">// 5、判断文件是否是文件,还是文件夹</span></span><br><span class="line">                <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">                    <span class="comment">// 是文件，判断这个文件名是否是我们要找的</span></span><br><span class="line">                    <span class="keyword">if</span>(f.getName().contains(fileName))&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;找到了：&quot;</span> + f.getAbsolutePath());</span><br><span class="line">                        <span class="comment">//启动程序</span></span><br><span class="line">                        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                        runtime.exec(f.getAbsolutePath());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 是文件夹，继续重复这个过程（递归）</span></span><br><span class="line">                    searchFile(f, fileName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="标准ASCII字符集"><a href="#标准ASCII字符集" class="headerlink" title="标准ASCII字符集"></a>标准ASCII字符集</h3><p>包含英文字母、标点符号、数字以及一些特殊字符，一共不到128个，7位编码就够了。所以用<strong>1个字节</strong>来存储每个字符，<strong>最高位补0</strong>。</p>
<h3 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h3><p>汉字编码字符集，包含了2万多个汉字等字符，一个中文字符编码成<strong>两个字节</strong>。</p>
<p>汉字的第一个字节的第一位必须是1。</p>
<p>兼容ASCII。</p>
<ul>
<li>如果读取到第1位是0，就认为是一个字母，此时往后读1个字节。</li>
<li>如果读取到第1位是1，就认为是一个汉字，此时往后读2个字节。</li>
</ul>
<h3 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h3><p>国际组织制定的，可以容纳世界上所有文字和符号的字符集。</p>
<p>有三种</p>
<ul>
<li>UTF-32<ul>
<li>4个字节表示一个字符，占用空间大，浪费严重</li>
</ul>
</li>
<li>UTF-16</li>
<li><strong>UTF-8</strong><ul>
<li>可变长编码方案。共四种长度：1、2、3、4字节</li>
<li>规定1字节的以0开头；2字节的第一字节以110开头，第二字节以10开头；3字节的第一字节以1110开头，其余字节以10开头；4字节的第一字节以11110开头，其余字节以10开头。</li>
<li>英文字母、数字占1个字节。兼容ASCII编码</li>
<li>汉字字符占3个字节</li>
<li>极少数字符占4个字节</li>
</ul>
</li>
</ul>
<h3 id="编解码"><a href="#编解码" class="headerlink" title="编解码"></a>编解码</h3><ul>
<li>编码：把<strong>字符转换为字节</strong></li>
<li>解码：把<strong>字节转换为字符</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;a我b&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = data.getBytes(); <span class="comment">// 默认是按照平台字符集（UTF-8）进行编码的。</span></span><br><span class="line">        System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照指定字符集进行编码。</span></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = data.getBytes(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(Arrays.toString(bytes1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、解码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes); <span class="comment">// 按照平台默认编码（UTF-8）解码</span></span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes1, <span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按流的方向分</p>
<ul>
<li>输入流</li>
<li>输出流</li>
</ul>
<p>按流中数据的最小单位分：</p>
<ul>
<li>字节流，可以操作所有类型的文件</li>
<li>字符流，只适合操作文本文件。</li>
</ul>
<p>两两结合后共有四大流。 </p>
<h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><ul>
<li>创建FileInputStream文件字节输入流管道，与源文件接通。</li>
<li>调用read()方法开始读取文件的字节数据。</li>
<li>调用close()方法释放资源</li>
</ul>
<p>字节流中的字节输入流，用InputStream来表示。但是InputStream是抽象类，我们用的是它的子类，叫FileInputStream。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//每次读取一个字节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建文件字节输入流管道，与源文件接通。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>((<span class="string">&quot;file-io-app\\src\\itheima01.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、开始读取文件的字节数据。</span></span><br><span class="line">        <span class="comment">// public int read():每次读取一个字节返回，如果没有数据了，返回-1.</span></span><br><span class="line">        <span class="type">int</span> b; <span class="comment">// 用于记住读取的字节。</span></span><br><span class="line">        <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、流使用完毕之后，必须关闭！释放系统资源！</span></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次性读取完文件的全部字节到一个字节数组中去。</span></span><br><span class="line"><span class="comment">// 创建一个字节输入流管道与源文件接通</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file-io-app\\src\\itheima03.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、调用方法读取所有字节，返回一个存储所有字节的字节数组。</span></span><br><span class="line"><span class="type">byte</span>[] buffer = is.readAllBytes();</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer));</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、关闭流</span></span><br><span class="line">is.close(); </span><br></pre></td></tr></table></figure>

<h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ul>
<li>创建FileOutputStream文件字节输出流管道，与目标文件接通。</li>
<li>调用wirte()方法往文件中写数据</li>
<li>调用close()方法释放资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileOutputStreamTest4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建一个字节输出流管道与目标文件接通。</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file-io-app/src/itheima04out.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、开始写字节数据出去了</span></span><br><span class="line">        os.write(<span class="number">97</span>); <span class="comment">// 97就是一个字节，代表a</span></span><br><span class="line">        os.write(<span class="string">&#x27;b&#x27;</span>); <span class="comment">// &#x27;b&#x27;也是一个字节</span></span><br><span class="line">        <span class="comment">// os.write(&#x27;磊&#x27;); // [ooo] 默认只能写出去一个字节</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;我爱你中国abc&quot;</span>.getBytes();</span><br><span class="line">        os.write(bytes);</span><br><span class="line"></span><br><span class="line">        os.write(bytes, <span class="number">0</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">// 换行符</span></span><br><span class="line">        os.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        os.close(); <span class="comment">// 关闭流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面释放资源的方法存在问题，当程序存在异常退出时，无法正常释放资源。</p>
<p>JDK7后提供了一种简化的释放资源的操作，它会自动释放资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(资源对象<span class="number">1</span>; 资源对象<span class="number">2</span>;)&#123;</span><br><span class="line">    <span class="comment">//使用资源的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类 e)&#123;</span><br><span class="line">    <span class="comment">//处理异常的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">    	<span class="keyword">try</span> (</span><br><span class="line">          <span class="comment">// 1、创建一个字节输入流管道与源文件接通</span></span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/resource/meinv.png&quot;</span>);</span><br><span class="line">          <span class="comment">// 2、创建一个字节输出流管道与目标文件接通。</span></span><br><span class="line">          <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:/data/meinv.png&quot;</span>);</span><br><span class="line">        ) <span class="comment">//声明资源对象</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 3、创建一个字节数组，负责转移字节数据。</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1KB.</span></span><br><span class="line">            <span class="comment">// 4、从字节输入流中读取字节数据，写出去到字节输出流中。读多少写出去多少。</span></span><br><span class="line">            <span class="type">int</span> len; <span class="comment">// 记住每次读取了多少个字节。</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;复制完成！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>使用字节流可以读取文件中的字节数据。但是如果文件中有中文，使用字节流来读取，就有可能读到半个汉字的情况，这样会导致乱码。虽然使用读取全部字节的方法不会出现乱码，但是如果文件过大又不太合适。</p>
<p>所以Java专门为我们提供了另外一种流，叫字符流，可以字符流是专门为读取文本数据而生的。</p>
<h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h3 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h3><h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><h3 id="IO框架"><a href="#IO框架" class="headerlink" title="IO框架"></a>IO框架</h3><p><strong>由apache开源基金组织提供了一组有关IO流小框架，可以提高IO流的开发效率。</strong></p>
<p>这个框架的名字叫<code>commons-io</code>：其本质是别人写好的一些字节码文件（class文件），打包成了一个jar包。只需要把jar包引入到项目中，就可以直接用了。 </p>
<h2 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h2><h3 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>属性文件，每一行都是一个键值对，键和值中间用&#x3D;隔开。比如: <code>admin=123456</code> </p>
<p>每一行末尾不要加分号以及空格等字符；不然会把分号，空格会当做值的一部分。</p>
<p>键不能重复，值可以重复</p>
<h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建一个Properties的对象出来（键值对集合，空容器）</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        System.out.println(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、开始加载属性文件中的键值对数据到properties对象中去</span></span><br><span class="line">        properties.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;properties-xml-log-app\\src\\users.properties&quot;</span>));</span><br><span class="line">        System.out.println(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、根据键取值</span></span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;赵敏&quot;</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">&quot;张无忌&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历全部的键和值。</span></span><br><span class="line">        <span class="comment">//获取键的集合</span></span><br><span class="line">        Set&lt;String&gt; keys = properties.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">//再根据键获取值</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;----&gt;&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">        properties.forEach((k, v) -&gt; &#123;</span><br><span class="line">            System.out.println(k + <span class="string">&quot;----&gt;&quot;</span> + v);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建Properties对象出来，先用它存储一些键值对数据</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;minmin&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;殷素素&quot;</span>, <span class="string">&quot;cuishan&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;susu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、把properties对象中的键值对数据存入到属性文件中去</span></span><br><span class="line">        properties.store(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;properties-xml-log-app/src/users2.properties&quot;</span>)</span><br><span class="line">                         , <span class="string">&quot;i saved many users!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>可扩展的标记语言，由一些标签组成，标签名可以自己定义（可扩展），但是必须要正确的嵌套</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注释：以上抬头声明必须放在第一行，必须有 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  根标签只能有一个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">desc</span>=<span class="string">&quot;第一个用户&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张无忌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">地址</span>&gt;</span>光明顶<span class="tag">&lt;/<span class="name">地址</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>minmin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">people</span>&gt;</span>很多人<span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>敏敏<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">地址</span>&gt;</span>光明顶<span class="tag">&lt;/<span class="name">地址</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>wuji<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>有很多开源、好用的XML解析框架，最知名的是DOM4J。其解析XML文件的思想是：文档对象模型（把整个XML文档、每一个标签、每一个属性都等都当做对象来看待）。Dowument对象表示XML文档、Element对象表示标签（元素）、Attribute对象表示属性、标签中的内容就是文本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dom4JTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1、创建一个Dom4J框架提供的解析器对象</span></span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、使用saxReader对象把需要解析的XML文件读成一个Document对象。</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span></span><br><span class="line">                saxReader.read(<span class="string">&quot;properties-xml-log-app\\src\\helloworld.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、从文档对象中解析XML文件的全部数据了</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        System.out.println(root.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4、获取根元素下的全部一级子元素。</span></span><br><span class="line">        <span class="comment">// List&lt;Element&gt; elements = root.elements();</span></span><br><span class="line">        List&lt;Element&gt; elements = root.elements(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            System.out.println(element.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、获取当前元素下的某个子元素。</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">people</span> <span class="operator">=</span> root.element(<span class="string">&quot;people&quot;</span>);</span><br><span class="line">        System.out.println(people.getText());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果下面有很多子元素user，默认获取第一个。</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">user</span> <span class="operator">=</span> root.element(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(user.elementText(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、获取元素的属性信息呢？</span></span><br><span class="line">        System.out.println(user.attributeValue(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="type">Attribute</span> <span class="variable">id</span> <span class="operator">=</span> user.attribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        System.out.println(id.getName());</span><br><span class="line">        System.out.println(id.getValue());</span><br><span class="line"></span><br><span class="line">        List&lt;Attribute&gt; attributes = user.attributes();</span><br><span class="line">        <span class="keyword">for</span> (Attribute attribute : attributes) &#123;</span><br><span class="line">            System.out.println(attribute.getName() + <span class="string">&quot;=&quot;</span> + attribute.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、如何获取全部的文本内容:获取当前元素下的子元素文本值</span></span><br><span class="line">        System.out.println(user.elementText(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(user.elementTextTrim(<span class="string">&quot;地址&quot;</span>)); <span class="comment">// 取出文本去除前后空格</span></span><br><span class="line">        System.out.println(user.elementText(<span class="string">&quot;password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Element</span> <span class="variable">data</span> <span class="operator">=</span> user.element(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        System.out.println(data.getText());</span><br><span class="line">        System.out.println(data.getTextTrim()); <span class="comment">// 取出文本去除前后空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Logback第三方日志框架"><a href="#Logback第三方日志框架" class="headerlink" title="Logback第三方日志框架"></a>Logback第三方日志框架</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>官网<code>https://logback.qos.ch/index.html</code>。分为三个模块，logback-core、logback-classic和logback-access。其中core是其他两个模块的基础，classic是log4j的改进，access与Servlet容器集成，提供http访问。</p>
<p>想使用Logback日志框架，至少要再项目中整合三个模块：</p>
<ul>
<li>slf4j-api：日志接口</li>
<li>logback-core</li>
<li>logback-classic</li>
</ul>
<h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><p>将Jar包引入到项目中，具体步骤如下</p>
<ol>
<li><p>在资料中找到<code>slftj-api.jar、logback-core.jar、logback-classes.jar</code> 这三个jar包，复制一下</p>
</li>
<li><p>在当前模块下面新建一个lib文件夹，把刚刚复制的三个jar包都粘贴到此处</p>
</li>
<li><p>从资料中找到<code>logback.xml</code>配置文件，将此文件复制粘贴到src目录下（必须是src目录）</p>
</li>
</ol>
<h3 id="日志对象"><a href="#日志对象" class="headerlink" title="日志对象"></a>日志对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogBackTest</span> &#123;</span><br><span class="line">    <span class="comment">//public static final Logger LOGGER = LoggerFactory.getLogger(&quot;当前类名&quot;);</span></span><br><span class="line">    <span class="comment">// 创建一个Logger日志对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;LogBackTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//while (true) &#123;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                LOGGER.info(<span class="string">&quot;chu法方法开始执行~~~&quot;</span>);</span><br><span class="line">                chu(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">                LOGGER.info(<span class="string">&quot;chu法方法执行成功~~~&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">&quot;chu法方法执行失败了，出现了bug~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;参数a:&quot;</span> + a);</span><br><span class="line">        LOGGER.debug(<span class="string">&quot;参数b:&quot;</span> + b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;结果是：&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台和文件都会记录日志信息。</p>
<h3 id="日志配置文件"><a href="#日志配置文件" class="headerlink" title="日志配置文件"></a>日志配置文件</h3><p>Logback提供了一个核心配置文件logback.xml，日志框架在记录日志时会读取配置文件中的配置信息，从而记录日志的形式。</p>
<ul>
<li>配置日志输出的位置是文件、还是控制台</li>
</ul>
<ol start="2">
<li>配置日志输出的格式</li>
<li>配置日志关闭和开启、以及哪些日志输出哪些日志不输出。</li>
</ol>
<h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>Logback只输出大于或者等于核心配置文件配置的日志级别信息。小于配置级别的日志信息，不被记录。</p>
<table>
<thead>
<tr>
<th>日志级别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>trace</td>
<td>程序运行轨迹</td>
</tr>
<tr>
<td>debug</td>
<td>实际应用中一般将其作为最低级，trace很少用</td>
</tr>
<tr>
<td>info</td>
<td>运行信息，包括网络连接、IO操作等</td>
</tr>
<tr>
<td>warn</td>
<td>可能会发生的问题</td>
</tr>
<tr>
<td>error</td>
<td>错误信息</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>js tips</title>
    <url>/2023/07/01/10-30-15/</url>
    <content><![CDATA[<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">2</span>); <span class="comment">// 这一句要加;</span></span><br><span class="line">[arr[<span class="number">1</span>], arr[<span class="number">0</span>]] = [arr[<span class="number">0</span>], arr[<span class="number">1</span>]]; <span class="comment">// 前面的语句要加分号</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>js在参数传递时，对于基本数据类型是值传递方式；对于引用数据类型是引用传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>)&#123; <span class="comment">// 值传递</span></span><br><span class="line">  num+=<span class="number">10</span></span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)			<span class="comment">//10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(a))		<span class="comment">//20</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">modifyArray</span>(<span class="params">arr</span>) &#123; <span class="comment">// 引用传递</span></span><br><span class="line">  arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="title function_">modifyArray</span>(nums);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums); <span class="comment">// 输出 [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>

<p>虽然传递对象时是通过引用传递，但是<strong>如果在函数内部将参数重新赋值为一个新的对象，这个赋值操作对原始对象并没有影响</strong>。这是因为在函数内部，参数变量被重新赋值，指向了一个新的对象，而不是修改原始对象的引用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">replaceObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj = &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="title function_">replaceObj</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// 输出 &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2022/02/07/00-00-00/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="传统网站中存在的问题"><a href="#传统网站中存在的问题" class="headerlink" title="传统网站中存在的问题"></a>传统网站中存在的问题</h3><p>网速慢的情况下，页面加载时间长，用户只能等待</p>
<p>表单提交后，如果一项内容不合格，服务器端返回错误信息后将页面跳转回去，需要重新填写所有表单内容</p>
<p>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>它是浏览器提供的一套方法，可以实现<strong>页面无刷新更新数据</strong>（局部更新），提高用户浏览网站应用的体验。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li><p>页面上拉加载更多数据</p>
</li>
<li><p>列表数据无刷新分页</p>
</li>
<li><p>表单项离开焦点数据验证，询问服务端当前用户是否被注册</p>
</li>
<li><p>搜索框提示文字下拉列表</p>
</li>
</ol>
<h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><p>Ajax 技术需要<strong>运行在网站环境中</strong>才能生效，即要以localhost域名方式打开，双击HTML文件打开则不会生效，当前课程会使用Node创建的服务器作为网站服务器。</p>
<h2 id="运行原理及实现"><a href="#运行原理及实现" class="headerlink" title="运行原理及实现"></a>运行原理及实现</h2><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p>Ajax 相当于浏览器发送请求与接收响应的代理人，在请求与响应时可以让浏览器空闲下来以继续响应用户的操作，来实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\14 ajax课程\笔记\images\图片1.png)</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li><p>创建Ajax对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// XML是服务端与客户端传输内容的数据格式</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>告诉Ajax请求地址及请求方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.example.com&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取服务器端给客户端的响应数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 通过onload事件获取</span></span><br><span class="line"> xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过onreadystatechange事件获取(过时)</span></span><br><span class="line"><span class="comment">// Ajax状态码</span></span><br><span class="line"><span class="comment">// 0：请求未初始化(还没有调用open())</span></span><br><span class="line"><span class="comment">// 1：请求已经建立，但是还没有发送(还没有调用send())</span></span><br><span class="line"><span class="comment">// 2：请求已经发送</span></span><br><span class="line"><span class="comment">// 3：请求正在处理中，通常响应中已经有部分数据可以用了</span></span><br><span class="line"><span class="comment">// 4：响应已经完成，可以获取并使用服务器的响应了</span></span><br><span class="line"><span class="comment">// xhr.readyState // 获取Ajax状态码</span></span><br><span class="line"> <span class="comment">// 当Ajax状态码发生变化时</span></span><br><span class="line"> xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 判断当Ajax状态码为4时</span></span><br><span class="line">     <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">         <span class="comment">// 获取服务器端的响应数据</span></span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="服务器端响应的数据格式"><a href="#服务器端响应的数据格式" class="headerlink" title="服务器端响应的数据格式"></a>服务器端响应的数据格式</h3><p>在真实的项目中，服务器端大多数情况下会以 JSON 对象作为响应数据的格式。当客户端拿到响应数据时，要将 JSON 数据和 HTML 字符串进行拼接，然后将拼接的结果用BOM的方式展示在页面中。（之前是服务器端以模板引擎拼接，Ajax后需要客户端拼接）</p>
<p>在 http 请求与响应的过程中，无论是请求参数还是响应内容，最终都会被转换为对象字符串进行传输。要使用这些数据，必须先将其转换回对象类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>() <span class="comment">// 将 json 字符串转换为json对象</span></span><br></pre></td></tr></table></figure>

<h3 id="请求参数传递"><a href="#请求参数传递" class="headerlink" title="请求参数传递"></a>请求参数传递</h3><h4 id="使用属性名1-x3D-属性值1-amp-属性名2-x3D-属性值2的方式"><a href="#使用属性名1-x3D-属性值1-amp-属性名2-x3D-属性值2的方式" class="headerlink" title="使用属性名1&#x3D;属性值1&amp;属性名2&#x3D;属性值2的方式"></a>使用属性名1&#x3D;属性值1&amp;属性名2&#x3D;属性值2的方式</h4><h5 id="传统网站表单提交"><a href="#传统网站表单提交" class="headerlink" title="传统网站表单提交"></a>传统网站表单提交</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://www.example.com&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- http://www.example.com?username=zhangsan&amp;password=123456 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--请求参数会被自动拼接到对应位置--&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="Ajax要自己拼接请求参数"><a href="#Ajax要自己拼接请求参数" class="headerlink" title="Ajax要自己拼接请求参数"></a>Ajax要自己拼接请求参数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET请求方式</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;http://www.example.com?name=zs&amp;age=20&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST请求方式</span></span><br><span class="line"><span class="comment">// 要设置请求参数的格式类型</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>) </span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;name=zhangsan&amp;age=20&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="使用json格式"><a href="#使用json格式" class="headerlink" title="使用json格式"></a>使用json格式</h4><p>get 请求不能提交 json 对象数据格式，传统网站的表单提交也不支持 json 对象数据格式。</p>
<p>只有post请求才能提交json对象数据格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在请求头中指定 Content-Type 属性的值是 application/json，告诉服务器端当前请求参数的格式是 json。</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>) </span><br><span class="line"><span class="comment">// 将json对象转换为json字符串</span></span><br><span class="line"><span class="keyword">var</span> params = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>:<span class="number">14</span>&#125;);</span><br><span class="line">xhr.<span class="title function_">send</span>(params);</span><br></pre></td></tr></table></figure>

<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol>
<li><p>网络畅通，服务器端能接收到请求，服务器端返回的结果不是预期结果。</p>
<p>可以判断服务器端返回的状态码，分别进行处理。xhr.status 获取http状态码</p>
</li>
<li><p>网络畅通，服务器端没有接收到请求，返回404状态码。</p>
</li>
</ol>
<p>​		检查请求地址是否错误。</p>
<ol start="3">
<li>网络畅通，服务器端能接收到请求，服务器端返回500状态码。</li>
</ol>
<p>​		服务器端错误，找后端程序员进行沟通。</p>
<ol start="4">
<li>网络中断，请求无法发送到服务器端。</li>
</ol>
<p>​		无法触发onload事件，会触发xhr对象下面的onerror事件，在onerror		事件处理函数中对错误进行处理。</p>
<h3 id="低版本IE浏览器的缓存问题"><a href="#低版本IE浏览器的缓存问题" class="headerlink" title="低版本IE浏览器的缓存问题"></a>低版本IE浏览器的缓存问题</h3><p>问题：在低版本的 IE 浏览器中，Ajax 请求有严重的缓存问题，即在请求地址不发生变化的情况下，只有第一次请求会真正发送到服务器端，后续的请求都会从浏览器的缓存中获取结果。即使服务器端的数据更新了，客户端依然拿到的是缓存中的旧数据。</p>
<p>解决方案：在请求地址的后面加请求参数，保证每一次请求中的请求参数的值不相同。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://www.examp.com?t=&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure>

<h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>问题：发送一次请求代码过多，发送多次请求代码冗余且重复。</p>
<p>解决方案：将请求代码封装到函数中，发请求时调用函数即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span> (options) &#123;</span><br><span class="line">    <span class="comment">// 存储的是默认值</span></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">header</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用options对象中的属性覆盖defaults对象中的属性</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(defaults, options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 拼接请求参数的变量</span></span><br><span class="line">    <span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// 循环用户传递进来的对象格式参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> defaults.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 将参数转换为字符串格式</span></span><br><span class="line">        params += attr + <span class="string">&#x27;=&#x27;</span> + defaults.<span class="property">data</span>[attr] + <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将参数最后面的&amp;截取掉 </span></span><br><span class="line">    <span class="comment">// 将截取的结果重新赋值给params变量</span></span><br><span class="line">    params = params.<span class="title function_">substr</span>(<span class="number">0</span>, params.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断请求方式</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.<span class="property">type</span> == <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        defaults.<span class="property">url</span> = defaults.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置ajax对象</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(defaults.<span class="property">type</span>, defaults.<span class="property">url</span>);</span><br><span class="line">    <span class="comment">// 如果请求方式为post</span></span><br><span class="line">    <span class="keyword">if</span> (defaults.<span class="property">type</span> == <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户希望的向服务器端传递的请求参数的类型</span></span><br><span class="line">        <span class="keyword">var</span> contentType = defaults.<span class="property">header</span>[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">        <span class="comment">// 设置请求参数格式的类型</span></span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, contentType);</span><br><span class="line">        <span class="comment">// 判断用户希望的请求参数格式的类型</span></span><br><span class="line">        <span class="comment">// 如果类型为json</span></span><br><span class="line">        <span class="keyword">if</span> (contentType == <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 向服务器端传递json数据格式的参数</span></span><br><span class="line">            xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(defaults.<span class="property">data</span>))</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 向服务器端传递普通类型的请求参数</span></span><br><span class="line">            xhr.<span class="title function_">send</span>(params);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听xhr对象下面的onload事件</span></span><br><span class="line">    <span class="comment">// 当xhr对象接收完响应数据后触发</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// xhr.getResponseHeader()</span></span><br><span class="line">        <span class="comment">// 获取响应头中的数据</span></span><br><span class="line">        <span class="keyword">var</span> contentType = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">        <span class="comment">// 服务器端返回的数据</span></span><br><span class="line">        <span class="keyword">var</span> responseText = xhr.<span class="property">responseText</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果响应类型中包含applicaition/json</span></span><br><span class="line">        <span class="keyword">if</span> (contentType.<span class="title function_">includes</span>(<span class="string">&#x27;application/json&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 将json字符串转换为json对象</span></span><br><span class="line">            responseText = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseText)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当http状态码等于200的时候</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 请求成功 调用处理成功情况的函数</span></span><br><span class="line">            defaults.<span class="title function_">success</span>(responseText, xhr);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 请求失败 调用处理失败情况的函数</span></span><br><span class="line">            defaults.<span class="title function_">error</span>(responseText, xhr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数调用 </span></span><br><span class="line"><span class="comment">// 传递的参数是一个对象，好处是可以清楚的看到参数值和参数名的对应</span></span><br><span class="line"><span class="title function_">ajax</span>(&#123; </span><br><span class="line">    <span class="comment">// 请求方式</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="客户端模板引擎"><a href="#客户端模板引擎" class="headerlink" title="客户端模板引擎"></a>客户端模板引擎</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>下载 art-template 模板引擎库文件并在 HTML 页面中引入库文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/template-web.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>准备 art-template 模板</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 客户端模板引擎不能读取文件，因此只能是一个代码片段</span><br><span class="line">// 用script标签，用id作为标识</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">username</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>告诉模板引擎将哪一个模板和哪个数据进行拼接</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数是模板id，第二个参数是要在模板中展示的数据</span></span><br><span class="line"><span class="comment">// 返回值是拼接好的html字符串</span></span><br><span class="line"><span class="keyword">var</span> html = <span class="title function_">template</span>(<span class="string">&#x27;tpl&#x27;</span>, &#123;<span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将拼接好的html字符串添加到页面中</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>).<span class="property">innerHTML</span> = html;</span><br></pre></td></tr></table></figure>

<h2 id="Ajax案例：验证邮箱唯一性"><a href="#Ajax案例：验证邮箱唯一性" class="headerlink" title="Ajax案例：验证邮箱唯一性"></a>Ajax案例：验证邮箱唯一性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/ajax.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取页面中的元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> emailInp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当文本框离开焦点以后</span></span></span><br><span class="line"><span class="language-javascript">    emailInp.<span class="property">onblur</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取用户输入的邮箱地址</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> email = <span class="variable language_">this</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 验证邮箱地址的正则表达式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]&#123;2,4&#125;$/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果用户输入的邮箱地址不符合规则</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(email)) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 给出用户提示</span></span></span><br><span class="line"><span class="language-javascript">            info.<span class="property">innerHTML</span> = <span class="string">&#x27;请输入符合规则的邮箱地址&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 让提示信息显示为错误提示信息的样式</span></span></span><br><span class="line"><span class="language-javascript">            info.<span class="property">className</span> = <span class="string">&#x27;bg-danger&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止程序向下执行</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 向服务器端发送请求</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/verifyEmailAdress&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">email</span>: email</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 在success中改变HTML结构，实现局部刷新</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span></span><br><span class="line"><span class="language-javascript">                info.<span class="property">innerHTML</span> = result.<span class="property">message</span>;</span></span><br><span class="line"><span class="language-javascript">                info.<span class="property">className</span> = <span class="string">&#x27;bg-success&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span></span><br><span class="line"><span class="language-javascript">                info.<span class="property">innerHTML</span> = result.<span class="property">message</span>;</span></span><br><span class="line"><span class="language-javascript">                info.<span class="property">className</span> = <span class="string">&#x27;bg-danger&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h2><p>H5提供，当参数较多时，参数值的获取和参数的拼接都很繁琐，且普通Ajax不能传递二进制文件，如图片</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li><p>模拟HTML表单，相当于将HTML表单映射成表单对象，自动将表单对象中的数据拼接成请求参数的格式。</p>
</li>
<li><p>异步上传二进制文件</p>
</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>准备 HTML 表单</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--name属性将作为请求参数的属性名称传递给服务器端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将 HTML 表单转化为 formData 对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>提交表单对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(formData);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li><p>Formdata 对象不能用于 get 请求，因为对象需要被传递到 send 方法中，而 get 请求方式的请求参数只能放在请求地址的后面。</p>
</li>
<li><p>服务器端 bodyParser 模块不能解析 formData 对象表单数据，我们需<strong>要使用 formidable 模块进行解析</strong>(见博客案例)。</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取表单</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 为按钮添加点击事件</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将普通的html表单转换为表单对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(form);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 创建ajax对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 对ajax对象进行配置</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3000/formData&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发送ajax请求</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>(formData);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 监听xhr对象下面的onload事件</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 对象http状态码进行判断</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ol>
<li>获取表单对象中属性的值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">get</span>(<span class="string">&#x27;key&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置表单对象中属性的值，有则替换，没有则创建</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">set</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除表单对象中属性的值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">delete</span>(<span class="string">&#x27;key&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>向表单对象中<strong>追加</strong>属性值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：set 方法与 append 方法的区别是，在属性名已存在的情况下，set 会覆盖已有键名的值，append会保留两个值。</p>
<h3 id="二进制文件上传"><a href="#二进制文件上传" class="headerlink" title="二进制文件上传"></a>二进制文件上传</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line"><span class="comment">// 当用户选择文件的时候</span></span><br><span class="line">file.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建空表单对象</span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">    <span class="comment">// 将用户选择的二进制文件追加到表单对象中</span></span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;attrName&#x27;</span>, <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">// 配置ajax对象，请求方式必须为post</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;www.example.com&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>(formData);</span><br><span class="line">     <span class="comment">// 监听服务器端响应给客户端的数据</span></span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 如果服务器端返回的http状态码为200</span></span><br><span class="line">        <span class="comment">// 说明请求是成功的</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端接收文件</span></span><br><span class="line"><span class="comment">// 实现文件上传的路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 创建formidable表单解析对象</span></span><br><span class="line">	<span class="keyword">const</span> form = <span class="keyword">new</span> formidable.<span class="title class_">IncomingForm</span>();</span><br><span class="line">	<span class="comment">// 设置客户端上传文件的存储路径</span></span><br><span class="line">	form.<span class="property">uploadDir</span> = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line">	<span class="comment">// 保留上传文件的后缀名字</span></span><br><span class="line">	form.<span class="property">keepExtensions</span> = <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">// 解析客户端传递过来的FormData对象</span></span><br><span class="line">	form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 将客户端传递过来的文件地址响应到客户端</span></span><br><span class="line">		res.<span class="title function_">send</span>(&#123;</span><br><span class="line">			<span class="attr">path</span>: files.<span class="property">attrName</span>.<span class="property">path</span>.<span class="title function_">split</span>(<span class="string">&#x27;public&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="上传进度条展示"><a href="#上传进度条展示" class="headerlink" title="上传进度条展示"></a>上传进度条展示</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 0%;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bar&quot;</span>&gt;</span>0%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当用户选择文件的时候</span></span></span><br><span class="line"><span class="language-javascript">file.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 文件上传过程中持续触发onprogress事件</span></span></span><br><span class="line"><span class="language-javascript">    xhr.<span class="property">upload</span>.<span class="property">onprogress</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当前上传文件大小/文件总大小 再将结果转换为百分数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将结果赋值给进度条的宽度属性 </span></span></span><br><span class="line"><span class="language-javascript">        bar.<span class="property">style</span>.<span class="property">width</span> = (ev.<span class="property">loaded</span>/ev.<span class="property">total</span>) * <span class="number">100</span> + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将百分比显示在进度条中</span></span></span><br><span class="line"><span class="language-javascript">        bar.<span class="property">innerHTML</span> = result;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="上传图片即时预览"><a href="#上传图片即时预览" class="headerlink" title="上传图片即时预览"></a>上传图片即时预览</h4><p>在我们将图片上传到服务器端以后，服务器端通常都会将图片地址做为响应数据传递到客户端，客户端可以从响应数据中获取图片地址，然后将图片再显示在页面中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        <span class="comment">// 动态创建img标签，若在HTML中直接写一个img标签会让用户看			到上传过程</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">        img.<span class="property">src</span> = result.<span class="property">src</span>;</span><br><span class="line">        <span class="comment">// 图片加载完成后触发onload事件</span></span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            element.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h2><h3 id="Ajax请求限制"><a href="#Ajax请求限制" class="headerlink" title="Ajax请求限制"></a>Ajax请求限制</h3><p>Ajax 只能向自己的服务器发送请求。A网站中的 HTML 文件只能向A网站服务器中发送 Ajax 请求，不能向 B 网站发送 Ajax请求。但在实际开发中确实有这样的需求，比如要获取天气信息，就要使用国家气象局提供的API</p>
<h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面拥有<strong>相同的协议、域名和端口</strong>，那么这两个页面就属于同一个源，其中只要有一个不相同，就是不同源。</p>
<p><a href="http://www.example.com/dir/page.html">http://www.example.com/dir/page.html</a></p>
<p><a href="http://www.example.com/dir2/other.html%EF%BC%9A%E5%90%8C%E6%BA%90">http://www.example.com/dir2/other.html：同源</a></p>
<p><a href="http://example.com/dir/other.html%EF%BC%9A%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%88%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%EF%BC%89">http://example.com/dir/other.html：不同源（域名不同）</a></p>
<p><a href="http://v2.www.example.com/dir/other.html%EF%BC%9A%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%88%E5%9F%9F%E5%90%8D%E4%B8%8D%E5%90%8C%EF%BC%89">http://v2.www.example.com/dir/other.html：不同源（域名不同）</a></p>
<p><a href="http://www.example.com:81/dir/other.html%EF%BC%9A%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%88%E7%AB%AF%E5%8F%A3%E4%B8%8D%E5%90%8C%EF%BC%89">http://www.example.com:81/dir/other.html：不同源（端口不同）</a></p>
<p><a href="https://www.example.com/dir/page.html%EF%BC%9A%E4%B8%8D%E5%90%8C%E6%BA%90%EF%BC%88%E5%8D%8F%E8%AE%AE%E4%B8%8D%E5%90%8C%EF%BC%89">https://www.example.com/dir/page.html：不同源（协议不同）</a></p>
<h3 id="同源政策-1"><a href="#同源政策-1" class="headerlink" title="同源政策"></a>同源政策</h3><p>同源政策是为了保证用户信息的安全，防止恶意的网站窃取数据。最初的同源政策是指 A 网站在客户端设置的 Cookie(包含隐私信息)，B网站是不能访问的。</p>
<p>随着互联网的发展，同源政策也越来越严格，在不同源的情况下，其中有一项规定就是无法向非同源地址发送Ajax 请求，如果请求，浏览器就会报错。</p>
<h3 id="使用JSONP解决同源限制问题"><a href="#使用JSONP解决同源限制问题" class="headerlink" title="使用JSONP解决同源限制问题"></a>使用JSONP解决同源限制问题</h3><p>jsonp(json with padding)，不属于 Ajax 请求，但它可以模拟 Ajax 请求。</p>
<ol>
<li><p>将不同源的服务器端请求地址写在 script 标签的 src 属性中</p>
<ul>
<li><p>因为该属性不受同源政策的影响</p>
</li>
<li><p>script标签不止可以引入js文件，请求地址可以是任意形式，但是其<strong>返回的结果必须是规范的js代码</strong>，因为会将返回的结果以js代码方式执行</p>
</li>
<li><pre><code class="html">&lt;script src=&quot;www.example.com&quot;&gt;&lt;/script&gt;
 
&lt;script src=“https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 服务器端响应数据必须是一个函数的调用，真正要发送给客户端的数据需要作为函数调用的参数。</span><br><span class="line"></span><br><span class="line">   - ```js</span><br><span class="line">      // 字符串包裹函数调用的代码</span><br><span class="line">      const data = &#x27;fn(&#123;name: &quot;张三&quot;, age: &quot;20&quot;&#125;)&#x27;;</span><br><span class="line">      res.send(data);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>在客户端全局作用域下定义函数 fn，写在script标签上面</p>
<ul>
<li><pre><code class="js">  function fn (data) &#123; &#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 在 fn 函数内部对服务器端返回的数据进行处理</span><br><span class="line"></span><br><span class="line">   - ```js</span><br><span class="line">      function fn (data) &#123; console.log(data); &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<h4 id="JSONP代码优化"><a href="#JSONP代码优化" class="headerlink" title="JSONP代码优化"></a>JSONP代码优化</h4><ol>
<li><p>客户端需要将函数名称传递到服务器端。</p>
</li>
<li><p>将 script 请求的发送变成动态请求。</p>
</li>
<li><p>封装 jsonp 函数，方便请求发送。</p>
</li>
<li><p>服务器端代码优化之 res.jsonp 方法。</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span> (options) &#123;</span><br><span class="line">    <span class="comment">// 动态创建script标签</span></span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    <span class="comment">// 拼接字符串的变量</span></span><br><span class="line">    <span class="keyword">var</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> options.<span class="property">data</span>) &#123;</span><br><span class="line">        params += <span class="string">&#x27;&amp;&#x27;</span> + attr + <span class="string">&#x27;=&#x27;</span> + options.<span class="property">data</span>[attr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// myJsonp0124741</span></span><br><span class="line">    <span class="keyword">var</span> fnName = <span class="string">&#x27;myJsonp&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 它已经不是一个全局函数了</span></span><br><span class="line">    <span class="comment">// 我们要想办法将它变成全局函数</span></span><br><span class="line">    <span class="variable language_">window</span>[fnName] = options.<span class="property">success</span>;</span><br><span class="line">    <span class="comment">// 为script标签添加src属性</span></span><br><span class="line">    script.<span class="property">src</span> = options.<span class="property">url</span> + <span class="string">&#x27;?callback=&#x27;</span> + fnName + params;</span><br><span class="line">    <span class="comment">// 将script标签追加到页面中</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">    <span class="comment">// 为script标签添加onload事件</span></span><br><span class="line">    script.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/better&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 接收客户端传递过来的函数的名称</span></span><br><span class="line">	<span class="comment">//const fnName = req.query.callback;</span></span><br><span class="line">	<span class="comment">// 将函数名称对应的函数调用代码返回给客户端</span></span><br><span class="line">	<span class="comment">//const data = JSON.stringify(&#123;name: &quot;张三&quot;&#125;);</span></span><br><span class="line">	<span class="comment">//const result = fnName + &#x27;(&#x27;+ data +&#x27;)&#x27;;</span></span><br><span class="line">	<span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">	<span class="comment">// 	res.send(result);</span></span><br><span class="line">	<span class="comment">// &#125;, 1000)</span></span><br><span class="line">	res.<span class="title function_">jsonp</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="用CORS解决同源限制问题"><a href="#用CORS解决同源限制问题" class="headerlink" title="用CORS解决同源限制问题"></a>用CORS解决同源限制问题</h3><p>CORS(Cross-origin resource sharing)，即跨域资源共享、非同源数据共享，它允许浏览器向跨域服务器发送 Ajax 请求，克服了 Ajax 只能同源使用的限制。</p>
<p>与jsonp绕过同源限制，发送的也不是Ajax请求不同，CORS允许浏览器向跨域服务器发送Ajax请求，只要服务器端允许跨域访问就能访问。客户端保持原有的Ajax代码不变，服务器端配置即可</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\14 ajax课程\笔记\images\图片3.png)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端的简单设置 </span></span><br><span class="line"><span class="comment">// 真实项目中路由有很多，用use拦截所有请求</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 1.允许哪些客户端访问我</span></span><br><span class="line">	<span class="comment">// * 代表允许所有的客户端访问我</span></span><br><span class="line">	<span class="comment">// 注意：如果跨域请求中涉及到cookie信息传递，值不可以为*号 比如是具体的域名信息</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">	<span class="comment">// 2.允许客户端使用哪些请求方法访问我</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;get,post&#x27;</span>)</span><br><span class="line">	<span class="comment">// 允许客户端发送跨域请求时携带cookie信息</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="访问非同源数据服务器端解决方案"><a href="#访问非同源数据服务器端解决方案" class="headerlink" title="访问非同源数据服务器端解决方案"></a>访问非同源数据服务器端解决方案</h3><p>同源政策是浏览器给予Ajax技术的限制，服务器端是不存在同源政策限制。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\14 ajax课程\笔记\images\图片4.png)</p>
<p>因此当A客户端想要获取B服务器端的数据，可以请求A服务端去获取，由A服务器端再返回给A客户端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A客户端</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 向A服务器端发送请求</span></span><br><span class="line">    <span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/server&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A服务器端</span></span><br><span class="line"><span class="comment">// 向其他服务器端请求数据的模块，需要下载 npm install request</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="comment">// A服务器端向B服务器端请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="title function_">request</span>(<span class="string">&#x27;http://localhost:3001/cross&#x27;</span>, <span class="function">(<span class="params">err, response, body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// response是响应信息</span></span><br><span class="line">        <span class="comment">// body是B服务器端的响应数据</span></span><br><span class="line">		res.<span class="title function_">send</span>(body);</span><br><span class="line">        <span class="comment">// 将body返回给A客户端</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="跨域请求中携带cookie的问题"><a href="#跨域请求中携带cookie的问题" class="headerlink" title="跨域请求中携带cookie的问题"></a>跨域请求中携带cookie的问题</h3><p>客户端和服务器端的沟通是无状态的，即服务器端不管客户端是谁，只关注响应，两者之间的沟通没有记忆性，多次响应之后仍是陌生人。</p>
<p>cookie是用于客户端与服务器端身份识别的一种技术。当客户端第一次访问服务器端，服务器端会响应给客户端一个cookie，起到身份证的作用。当客户端再次访问服务器端，cookie也会被自动发送。服务器端根据cookie就可以辨别客户端身份</p>
<p>在使用Ajax技术发送跨域请求时，默认情况下不会在请求中携带cookie信息。</p>
<h5 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a>withCredentials属性</h5><p>withCredentials：指定在涉及到跨域请求时，是否携带cookie信息，默认值为false</p>
<p>Access-Control-Allow-Credentials：true 允许客户端发送请求时携带cookie</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="comment">// 创建ajax对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 对ajax对象进行配置</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;http://localhost:3001/login&#x27;</span>);</span><br><span class="line"><span class="comment">// 当发送跨域请求时，携带cookie信息</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 发送请求并传递请求参数</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 监听服务器端给予的响应内容</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line"><span class="comment">// 拦截所有请求</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 1.允许哪些客户端访问我</span></span><br><span class="line">	<span class="comment">// * 代表允许所有的客户端访问我</span></span><br><span class="line">	<span class="comment">// 注意：如果跨域请求中涉及到cookie信息传递，值不可以为*号 比如是具体的域名信息</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;http://localhost:3000&#x27;</span>)</span><br><span class="line">	<span class="comment">// 2.允许客户端使用哪些请求方法访问我</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;get,post&#x27;</span>)</span><br><span class="line">	<span class="comment">// 允许客户端发送跨域请求时携带cookie信息</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">	<span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础</title>
    <url>/2023/06/27/20-56-15/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JS &#x3D; ECMAScript(语法) + DOM(页面文档对象模型) + BOM(浏览器对象模型)  </p>
<ul>
<li>DOM和BOM都是Web API</li>
</ul>
<p>文档：</p>
<p><code>https://developer.mozilla.org/zh-CN</code></p>
<p><code>https://developer.mozilla.org/zh-CN/docs/web/javascript</code></p>
<span id="more"></span>

<h3 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h3><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p>
<h4 id="内部方式"><a href="#内部方式" class="headerlink" title="内部方式"></a>内部方式</h4><p>通过 <code>script</code> 标签包裹 JavaScript 代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--通常写到文件底部，因为浏览器是按照代码顺序加载的，如果先加载的js涉及到修改其下方的html，可能会失败--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;嗨，欢迎来传智播学习前端技术！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// js一句代码结束后可以不写;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="外部形式"><a href="#外部形式" class="headerlink" title="外部形式"></a>外部形式</h4><p>一般将 JavaScript 代码写在独立的以 .js 结尾的文件中，然后通过 <code>script</code> 标签的 <code>src</code> 属性引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JavaScript 基础 - 引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;demo.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  	<span class="comment">// 这里的代码会被忽略</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="输入输出语句"><a href="#输入输出语句" class="headerlink" title="输入输出语句"></a>输入输出语句</h3><table>
<thead>
<tr>
<th>方法</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td align="left">浏览器弹出警示框</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td align="left">浏览器控制台打印输出信息</td>
</tr>
<tr>
<td>prompt(info)</td>
<td align="left">浏览器弹出输入框，用户可以输入</td>
</tr>
<tr>
<td>document.write()</td>
<td align="left">向html文档中输出内容，可以识别标签</td>
</tr>
</tbody></table>
<p>注：<code>alert</code>和<code>prompt</code>会跳过页面渲染先被执行。</p>
<h3 id="let和var"><a href="#let和var" class="headerlink" title="let和var"></a>let和var</h3><p>JavaScript 使用专门的关键字 <code>let</code> 和 <code>var</code> 来声明（定义）变量，在使用时需要注意一些细节：</p>
<p>以下是使用 <code>let</code> 时的注意事项：</p>
<ol>
<li>允许声明时赋值</li>
<li><strong>不允许重复声明</strong></li>
<li>允许同时声明多个变量并赋值</li>
<li>JavaScript 中内置的一些关键字不能被当做变量名</li>
</ol>
<p><code>var</code>和<code>let</code>的区别在于</p>
<ul>
<li><strong>var允许重复声明</strong>。</li>
<li>可以先使用再声明</li>
<li>变量提升，是全局变量，没有块级作用域</li>
</ul>
<p>因此 <code>let</code> 相较 <code>var</code> 更严谨，推荐使用 <code>let</code>。</p>
<h3 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h3><p>关于变量的名称（标识符）有一系列的规则需要遵守：</p>
<ol>
<li>只能是字母、数字、下划线、$，且不能能数字开头</li>
<li>字母区分大小写，如 Age 和 age 是不同的变量</li>
<li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li>
<li>尽量保证变量具有一定的语义，见字知义</li>
</ol>
<p>注：所谓关键字是指 JavaScript 内部使用的词语，如 <code>let</code> 和<code>var</code>，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>概念：使用 <code>const</code> 声明的变量称为“常量”。</p>
<p>使用场景：当某个变量永远不会改变的时候，就可以使用<code>const</code>来声明，而不是let。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）</p>
</blockquote>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul>
<li><code>==</code> 左右两边值是否相等</li>
<li><code>===</code> 左右两边是否类型和值都相等</li>
<li><code>!=</code> 两边操作数不相等时返回true</li>
<li><code>!==</code> 操作数或类型不等时返回true</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>js中有两大数据类型，分别是<strong>值类型(基本类型)<strong>和</strong>引用类型(对象类型)</strong></p>
<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>基本类型在存储时<strong>变量中存储的是值本身</strong>，存储在栈区</p>
<p>js是<strong>弱数据类型</strong>的语言，主要有五大基本数据类型，可以通过 <code>typeof</code> 关键字检测数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof有两种使用方法</span></span><br><span class="line"><span class="comment">// 作为运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 函数形式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(<span class="literal">null</span>))</span><br></pre></td></tr></table></figure>

<h4 id="number类型"><a href="#number类型" class="headerlink" title="number类型"></a>number类型</h4><p>包括整数、小数、正数、负数。在number中有一个特殊的值，叫做<code>NaN</code>，代表计算错误，任何对NaN的操作都会返回NaN。</p>
<h4 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h4><p>通过单引号 、双引号或反引号包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p>
<p>字符串可以拼接，但比较麻烦。</p>
<p>注意事项：</p>
<ol>
<li>无论单引号或是双引号必须成对使用</li>
<li>单引号&#x2F;双引号<strong>可以互相嵌套</strong>，但是不能自已嵌套自已</li>
<li>必要时可以使用转义符 <code>\</code>，输出单引号或双引号</li>
</ol>
<h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age=<span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我&#x27;</span>+age+<span class="string">&#x27;岁&#x27;</span>) <span class="comment">// 字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我<span class="subst">$&#123;age&#125;</span>岁了`</span>) <span class="comment">// 模板字符串，必须用反引号</span></span><br></pre></td></tr></table></figure>



<h4 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h4><h4 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h4><p>未定义是比较特殊的类型，只有一个值 undefined。变量未初始化时，其默认值为 undefined。因为js是弱数据类型的语言，未经初始化，解释器也不知道变量是何类型</p>
<p>一般很少【直接】为某个变量赋值为 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只声明了变量，并末赋值</span></span><br><span class="line"><span class="keyword">let</span> tmp;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="keyword">typeof</span> tmp) <span class="comment">// 结果为 undefined</span></span><br></pre></td></tr></table></figure>

<p>通常用于检查一个数据是否被传递过来</p>
<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><p>null表示赋值了，但是内容为空。可以把null作为<strong>尚未创建的对象</strong></p>
<p>如果一个变量里确定存放的是对象，但该对象还没准备好，就可以先放个null</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data=<span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> data); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>+<span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span>+<span class="number">1</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>复杂数据类型，在存储变量时**存储的是地址(引用)**，在栈区存地址，实际存储在堆区</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h5><ul>
<li>push  尾部追加</li>
<li>unshift  头部增加</li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul>
<li>pop  删除最后一个</li>
<li>shift   删除第一个</li>
<li>splice(删除的下标，删除的个数)</li>
</ul>
<h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arr)&#123; <span class="comment">// 通常不同for in遍历数组</span></span><br><span class="line">    <span class="comment">// i是数组的索引号，但是是字符串</span></span><br><span class="line">    arr[i] <span class="comment">// 这样也可以拿到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> arr) i <span class="comment">// i就是元素</span></span><br></pre></td></tr></table></figure>



<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="命名函数"><a href="#命名函数" class="headerlink" title="命名函数"></a>命名函数</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getSum</span>();</span><br></pre></td></tr></table></figure>



<h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><h6 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>



<h6 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h6><p>避免全局变量之间的污染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; xxx  &#125;)();</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;xxxx&#125;());</span><br><span class="line"><span class="comment">//多个立即执行函数要用;隔开</span></span><br></pre></td></tr></table></figure>

<h5 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h5><p>采取就近原则的方式来查找变量最终的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="string">&#x27;22&#x27;</span>;</span><br><span class="line">    <span class="title function_">fn2</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">        <span class="title function_">fn3</span>();</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//a的值 4</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//b的值 22</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>();</span><br></pre></td></tr></table></figure>

<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h5><p>对象(object)是一种数据类型，可以理解为一种无序的数据集合。它由<strong>属性和方法</strong>两部分构成。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123; <span class="comment">// 定义对象</span></span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;fj&#x27;</span>,</span><br><span class="line">	<span class="attr">sing</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">age</span>=<span class="number">20</span> <span class="comment">// 动态追加属性</span></span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>]=<span class="number">20</span> <span class="comment">// 这样也能得到属性</span></span><br><span class="line">person.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 动态追加方法</span></span><br><span class="line"><span class="comment">//也可以删除属性  delete person.name ，在严格模式下不允许，仅了解</span></span><br></pre></td></tr></table></figure>

<h5 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 得到属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[i]) <span class="comment">// 得到属性值</span></span><br><span class="line">    <span class="comment">// console.log(obj.i) //这个写法是错误的，i是个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通常使用**<code>for in</code>遍历对象，其遍历的是键名，遍历的结果是个字符串**；<code>for of</code>遍历带有iterator接口的，例如set、map、array</p>
<h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>如<code>Math</code>、<code>Date</code>、<code>Number</code>等</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><p>某些运算符被执行时，<strong>系统内部自动将数据类型进行转换</strong>，这种转换称为隐式转换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">13</span> <span class="comment">// 数值</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="string">&#x27;2&#x27;</span> <span class="comment">// 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num + num2) <span class="comment">//字符串拼接 132</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num - num2) <span class="comment">//数字加减 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num * num2) <span class="comment">// 26</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27;12&#x27;</span>) <span class="comment">// 转为数字型</span></span><br></pre></td></tr></table></figure>

<p>转换类型不明显</p>
<h4 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h4><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显式将字符串 12 转换成数值 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(<span class="string">&#x27;12&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;12.2pp&#x27;</span>)) <span class="comment">//12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;a12a&#x27;</span>)) <span class="comment">//NaN 只能取开头的数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&#x27;12.2pp&#x27;</span>)) <span class="comment">//12.2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB数据库</title>
    <url>/2022/02/03/00-00-00/</url>
    <content><![CDATA[<h1 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h1><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><table>
<thead>
<tr>
<th>术语</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>数据库，一个数据库软件可以建立多个数据库</td>
</tr>
<tr>
<td>collection</td>
<td>集合，一组数据的集合，相当于sql中的表</td>
</tr>
<tr>
<td>document</td>
<td>文档，一条具体的数据，相当于sql表中的一行</td>
</tr>
<tr>
<td>field</td>
<td>字段，文档中属性的名称</td>
</tr>
</tbody></table>
<h3 id="Mongoose第三方包"><a href="#Mongoose第三方包" class="headerlink" title="Mongoose第三方包"></a>Mongoose第三方包</h3><p>使用Node.js操作MongoDB数据库需要依赖第三方包mongoose</p>
<p>使用<code>npm install mongoose</code>命令下载</p>
<h3 id="连接使用"><a href="#连接使用" class="headerlink" title="连接使用"></a>连接使用</h3><ol>
<li><p>在命令行工具中运行<code>net start mongoDB</code>即可启动MongoDB，否则MongoDB将无法连接。</p>
</li>
<li><pre><code class="js">const mongoose = require(&#39;mongoose&#39;);
// 使用mongoose提供的connect方法即可连接数据库。
mongoose.connect(&#39;mongodb://localhost/数据库名称&#39;)
// 在MongoDB中不需要显式创建数据库，如果不存在，会自动创建。
    .then(() =&gt; console.log(&#39;数据库连接成功&#39;))
    .catch(err =&gt; console.log(&#39;数据库连接失败&#39;, err));
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 在MongoDB中**不需要显式创建数据库**，如果正在使用的数据库不存在会自动创建。</span><br><span class="line"></span><br><span class="line">## 增删改查</span><br><span class="line"></span><br><span class="line">### 创建集合</span><br><span class="line"></span><br><span class="line">创建集合分为两步，一是对**对集合设定规则**，二是**创建集合**，创建mongoose.Schema构造函数的实例即可创建集合。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">  // 设定集合规则</span><br><span class="line"> const courseSchema = new mongoose.Schema(&#123;</span><br><span class="line">     name: String,</span><br><span class="line">     author: String,</span><br><span class="line">     isPublished: Boolean</span><br><span class="line"> &#125;);</span><br><span class="line">  // 创建集合并应用规则</span><br><span class="line">  // 创建了一个名为Course的集合，MongoDB会生成一个courses的集合</span><br><span class="line"> const Course = mongoose.model(&#x27;Course&#x27;, courseSchema); </span><br><span class="line"> // 返回值是一个构造函数</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<p>虽然已经创建了数据库和集合，但没有插入数据，系统就不会创建</p>
<h3 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h3><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败就则输入插入失败。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">required</span>: <span class="literal">true</span> <span class="comment">//必传字段</span></span><br><span class="line">minlength：<span class="number">3</span> <span class="comment">//字符串最小长度</span></span><br><span class="line"><span class="attr">maxlength</span>: <span class="number">20</span> <span class="comment">//字符串最大长度</span></span><br><span class="line"><span class="attr">min</span>: <span class="number">2</span> <span class="comment">//数值最小为2</span></span><br><span class="line"><span class="attr">max</span>: <span class="number">100</span> <span class="comment">//数值最大为100</span></span><br><span class="line"><span class="attr">enum</span>: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;node.js&#x27;</span>]</span><br><span class="line"><span class="attr">trim</span>: <span class="literal">true</span> <span class="comment">//去除字符串两边的空格</span></span><br><span class="line"><span class="attr">validate</span>: <span class="comment">//自定义验证器</span></span><br><span class="line"><span class="attr">default</span>: <span class="comment">//默认值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// required: [true, &#x27;请传入文章名字&#x27;]</span></span><br><span class="line">        <span class="comment">// 后一个参数为自定义错误信息</span></span><br><span class="line">        <span class="attr">minlength</span>: [<span class="number">2</span>, <span class="string">&#x27;长度不能小于2&#x27;</span>],</span><br><span class="line">        <span class="attr">maxlength</span>: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">author</span>: &#123;</span><br><span class="line">    	<span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">validate</span>: &#123; <span class="comment">//自定义验证器</span></span><br><span class="line">            <span class="attr">validator</span>: <span class="function"><span class="params">v</span> =&gt;</span> &#123; <span class="comment">//v是当前插入时用户传入的值，对v验证</span></span><br><span class="line">                <span class="comment">// 返回bool值，true验证成功；false验证失败</span></span><br><span class="line">                <span class="keyword">return</span> v &amp;&amp; v.<span class="property">length</span> &gt; <span class="number">4</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;不符合规则&#x27;</span> <span class="comment">// 自定义错误信息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">category</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">enum</span>: &#123;</span><br><span class="line">            <span class="attr">values</span>: [<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;js&#x27;</span>],</span><br><span class="line">            <span class="attr">messages</span>: <span class="string">&#x27;分类名称要在指定范围内&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>获取错误信息：<code>error.errors[&#39;字段名称&#39;].message</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>,<span class="attr">isPublish</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="comment">// 获取错误信息对象</span></span><br><span class="line">    	<span class="keyword">const</span> err = error.<span class="property">errors</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> err)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err[attr][<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>创建文档实际上就是向集合中插入数据。</p>
<h5 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h5><ol>
<li>创建集合实例。</li>
<li>调用实例对象下的save方法将数据保存到数据库中。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 创建集合实例</span></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Node.js course&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;讲师&#x27;</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;backend&#x27;</span>],</span><br><span class="line">    <span class="attr">isPublished</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"> <span class="comment">// 将数据保存到数据库中</span></span><br><span class="line">course.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure>

<h5 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="comment">//  错误对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">     <span class="comment">//  当前插入的文档</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doc)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;JavaScript基础&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;黑马讲师&#x27;</span>, <span class="attr">isPublish</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">doc</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(doc))</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br></pre></td></tr></table></figure>

<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>找到mongodb数据库的安装目录，将安装目录下的bin目录放置在环境变量中。</p>
<p>mongoimport -d 数据库名称 -c 集合名称 –file 要导入的数据文件</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  根据条件查找文档（条件为空则查找所有文档）</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// find方法返回文档集合</span></span><br><span class="line"><span class="comment">// 输出结果为</span></span><br><span class="line">[&#123;</span><br><span class="line">    <span class="attr">_id</span>: 5c0917ed37ec9b03c07cf95f,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;node.js基础&#x27;</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="string">&#x27;黑马讲师‘</span></span><br><span class="line"><span class="string">&#125;,&#123;</span></span><br><span class="line"><span class="string">     _id: 5c09dea28acfb814980ff827,</span></span><br><span class="line"><span class="string">     name: &#x27;</span><span class="title class_">Javascript</span><span class="string">&#x27;,</span></span><br><span class="line"><span class="string">     author: &#x27;</span>黑马讲师‘</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">//  根据条件查找文档</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;node.js基础&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)) <span class="comment">// 返回所有满足条件的，返回值是数组</span></span><br><span class="line"><span class="comment">// 返回第一条满足条件的</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;node.js基础&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">//  匹配大于 小于</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>, <span class="attr">$lt</span>: <span class="number">50</span>&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">//  匹配包含</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>(&#123;<span class="attr">hobbies</span>: &#123;<span class="attr">$in</span>: [<span class="string">&#x27;敲代码&#x27;</span>]&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">//  选择要查询的字段  </span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>().<span class="title function_">select</span>(<span class="string">&#x27;name email&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 将数据按照年龄进行排序</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(<span class="string">&#x27;age&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">//  skip 跳过多少条数据  limit 限制查询数量 在分页查询时用到</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">find</span>().<span class="title function_">skip</span>(<span class="number">2</span>).<span class="title function_">limit</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 删除单个</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOneAndDelete</span>(&#123;name : <span class="string">&#x27;王五&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"> <span class="comment">// 删除多个，不传查询条件则删除全部</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">deleteMany</span>(&#123;查询条件&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure>

<h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新单个</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">updateOne</span>(&#123;查询条件&#125;, &#123;要修改的值&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 更新多个</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">updateMany</span>(&#123;查询条件&#125;, &#123;要更改的值&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure>

<h3 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h3><p>通常<strong>不同集合的数据之间是有关系的</strong>，例如文章信息和用户信息存储在不同集合中，但文章是某个用户发表的，要查询文章的所有信息包括发表用户，就需要用到集合关联。</p>
<ul>
<li><p>使用id对集合进行关联</p>
</li>
<li><p>使用populate方法进行关联集合查询</p>
</li>
</ul>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片9.png)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123; <span class="attr">name</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125; &#125;)); </span><br><span class="line"><span class="comment">// 文章集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>, <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span> &#125;,</span><br><span class="line">    <span class="comment">// 使用ID将文章集合和作者集合进行关联</span></span><br><span class="line">    <span class="attr">author</span>: &#123; <span class="attr">type</span>: mongoose.<span class="property">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>, <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span> &#125;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">//联合查询</span></span><br><span class="line"><span class="title class_">Post</span>.<span class="title function_">find</span>()</span><br><span class="line">      .<span class="title function_">populate</span>(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">err, result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>egg框架</title>
    <url>/2022/02/10/00-00-00/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Eggjs是一个基于Koajs的框架，所以它应当属于框架之上的框架，它继承了Koa的高性能优点，同时又加入了一些约束与开发规范，来规避Koajs框架本身的开发自由度太高的问题。</p>
<p>Koajs是一个nodejs中比较基层的框架，它本身没有太多约束与规范，自由度非常高，每一个开发者实现自己的服务的时候，都有自己的“骚操作”。而egg为了适应企业开发，加了一些开发时的规范与约束，从而解决Koajs这种自由度过高而导致不适合企业内使用的缺点，Egg便在这种背景下诞生。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>约定大于配置</li>
<li>提供基于 Egg <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/advanced/framework.html">定制上层框架</a>的能力</li>
<li>高度可扩展的<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/plugin.html">插件机制</a></li>
<li>内置<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/advanced/cluster-client.html">多进程管理</a></li>
<li>基于 <a href="https://link.juejin.cn/?target=http://koajs.com/">Koa</a> 开发，性能优异</li>
<li>框架稳定，测试覆盖率高</li>
<li><a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/tutorials/progressive.html">渐进式开发</a></li>
</ul>
<h2 id="环境搭建、创建、运行"><a href="#环境搭建、创建、运行" class="headerlink" title="环境搭建、创建、运行"></a>环境搭建、创建、运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">脚手架搭建项目</span><br><span class="line">$ npm init egg --type=simple</span><br><span class="line">$ npm i</span><br><span class="line">启动项目</span><br><span class="line">$ npm run dev</span><br><span class="line">$ gooopen http://localhost:7001</span><br></pre></td></tr></table></figure>



<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app(项目开发目录)</span><br><span class="line">|   ├── router.js (用于配置 URL 路由规则)</span><br><span class="line">│   ├── controller (用于解析用户的输入，处理后返回相应的结果)</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (用于编写业务逻辑层)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (用于编写中间件)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (用于放置静态资源)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (可选)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (用于框架的扩展)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config (用于编写配置文件)</span><br><span class="line">|   ├── plugin.js(用于配置需要加载的插件)</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── test (用于单元测试)</span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure>



<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p><strong>Model（模型）</strong> - 模型代表一个存取数据的对象。它也可以带有逻辑，在数据变化时更新控制器。</p>
<p><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</p>
<p><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它<strong>控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开</strong>。</p>
<h2 id="主要文件"><a href="#主要文件" class="headerlink" title="主要文件"></a>主要文件</h2><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p><code>app/controller</code>目录下实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;ctx,service&#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> service.<span class="property">home</span>.<span class="title function_">index</span>();</span><br><span class="line">    ctx.<span class="property">body</span> = res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p><code>app/service</code>目录下实现，在这里实现业务逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Service</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Service</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Service</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">ok</span>:<span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeService</span>;</span><br></pre></td></tr></table></figure>

<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Egg.Application</span>&#125; <span class="variable">app</span> - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, controller.<span class="property">home</span>.<span class="property">index</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// model/user.js 创建用户模型</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mongoose = app.<span class="property">mongoose</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">avatar</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&#x27;https://1.gravatar.com/avatar/a3e54af3cb6e157e496ae430aed4f4a3?s=96&amp;d=mm&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">createdAt</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, <span class="title class_">UserSchema</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.js 创建用户路由</span></span><br><span class="line"> <span class="comment">// 用户创建</span></span><br><span class="line">  router.<span class="title function_">post</span>(<span class="string">&#x27;/api/user&#x27;</span>,controller.<span class="property">user</span>.<span class="property">create</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller/user.js</span></span><br><span class="line"><span class="comment">//创建用户</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> payLoad = ctx.<span class="property">request</span>.<span class="property">body</span> || &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> service.<span class="property">user</span>.<span class="title function_">create</span>(payLoad);</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;res&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// service/user.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">payload</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        ctx</span><br><span class="line">    &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> ctx.<span class="property">model</span>.<span class="property">User</span>.<span class="title function_">create</span>(payload);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在框架中，一个完整的中间件是包含了配置处理的。我们约定一个中间件是一个放置在 <code>app/middleware</code> 目录下的单独文件，它需要 exports 一个普通的 function，接受两个参数：</p>
<ul>
<li>options: 中间件的配置项，框架会将 <code>app.config[$&#123;middlewareName&#125;]</code> 传递进来。</li>
<li>app: 当前应用 Application 的实例。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义一个错误处理中间件</span></span><br><span class="line"><span class="comment">// app/middleware/errorHandler.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">option, app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx, next</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 所有的异常都在app上触发一个error事件，框架会记录一条错误日志</span></span><br><span class="line">      app.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, err, <span class="variable language_">this</span>);</span><br><span class="line">      <span class="keyword">const</span> status = err.<span class="property">status</span> || <span class="number">500</span>;</span><br><span class="line">      <span class="comment">// 生成环境下 500 错误的详细错误内容不返回给客户端，因为可能包含敏感信息</span></span><br><span class="line">      <span class="keyword">const</span> error = status === <span class="number">500</span> &amp;&amp; app.<span class="property">config</span>.<span class="property">env</span> === <span class="string">&#x27;prod&#x27;</span> ? <span class="string">&#x27;Internal Server Error&#x27;</span> : err.<span class="property">message</span></span><br><span class="line">      <span class="comment">// 从error对象上读出各个属性，设置到响应中</span></span><br><span class="line">      ctx.<span class="property">body</span> = &#123;</span><br><span class="line">        <span class="attr">code</span>: status, <span class="comment">// 服务端自身的处理逻辑错误(包含框架错误500 及 自定义业务逻辑错误533开始 ) 客户端请求参数导致的错误(4xx开始)，设置不同的状态码</span></span><br><span class="line">        <span class="attr">error</span>:error</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(status === <span class="number">422</span>)&#123;</span><br><span class="line">        ctx.<span class="property">body</span>.<span class="property">detail</span> = err.<span class="property">errors</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      ctx.<span class="property">status</span> = <span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>中间件编写完成后，我们还需要手动挂载，支持以下方式：</p>
<p>在应用中，我们可以完全通过配置来加载自定义的中间件，并决定它们的顺序。</p>
<p>如果我们需要加载上面的<code>error_handler</code> 中间件，在 <code>config.default.js</code> 中加入下面的配置就完成了中间件的开启和配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add your middleware config here</span></span><br><span class="line">config.<span class="property">middleware</span> = [<span class="string">&#x27;errorHandler&#x27;</span>];</span><br></pre></td></tr></table></figure>



<p>egg-jwt  插件：<code>https://jianshu.com/p/a3d569639769</code></p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="有了中间件，为什么还需要插件"><a href="#有了中间件，为什么还需要插件" class="headerlink" title="有了中间件，为什么还需要插件"></a>有了中间件，为什么还需要插件</h3><p>中间件加载其实是有先后顺序的，但是中间件自身却无法管理这种顺序，只能交给使用者。这样其实非常不友好，一旦顺序不对，结果可能有天壤之别。</p>
<p>中间件的定位是拦截用户请求，并在它前后做一些事情，例如：鉴权、安全检查、访问日志等等。但实际情况是，有些功能是和请求无关的，例如：定时任务、消息订阅、后台逻辑等等。</p>
<p>有些功能包含非常复杂的初始化逻辑，需要在应用启动的时候完成。这显然也不适合放到中间件中去实现</p>
<p>综上所述，我们需要一套更加强大的机制，来管理、编排那些相对独立的业务逻辑</p>
<h3 id="中间件、插件、应用的关系"><a href="#中间件、插件、应用的关系" class="headerlink" title="中间件、插件、应用的关系"></a>中间件、插件、应用的关系</h3><p>一个插件其实就是一个『迷你的应用』，和应用（app）几乎一样：</p>
<ul>
<li>它包含了 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/service.html">Service</a>、<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/middleware.html">中间件</a>、<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/config.html">配置</a>、<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/extend.html">框架扩展</a>等等。</li>
<li>它没有独立的 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/router.html">Router</a> 和 <a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/basics/controller.html">Controller</a>。</li>
<li>它没有 <code>plugin.js</code>，只能声明跟其他插件的依赖，而<strong>不能决定</strong>其他插件的开启与否。</li>
</ul>
<p>他们的关系是：</p>
<ul>
<li>应用可以直接引入 Koa 的中间件。</li>
<li>插件本身可以包含中间件。</li>
<li>多个插件可以包装为一个<a href="https://link.juejin.cn/?target=https://eggjs.org/zh-cn/advanced/framework.html">上层框架</a>。</li>
</ul>
<h3 id="框架扩展"><a href="#框架扩展" class="headerlink" title="框架扩展"></a>框架扩展</h3><p>Helper 函数用来提供一些实用的 utility 函数。</p>
<p>它的作用在于我们可以<strong>将一些常用的动作抽离在 helper.js 里面成为一个独立的函数</strong>，这样可以用 JavaScript 来写复杂的逻辑，避免逻辑分散各处。另外还有一个好处是 Helper 这样一个简单的函数，可以让我们更容易编写测试用例。</p>
<p>框架内置了一些常用的 Helper 函数。我们也可以编写自定义的 Helper 函数。</p>
<p>框架会把 <code>app/extend/helper.js</code> 中定义的对象与内置 <code>helper</code> 的 prototype 对象进行合并，在处理请求时会基于扩展后的 prototype 生成 <code>helper</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如增加一个helper.success()</span></span><br><span class="line"><span class="comment">// app/extend/helper.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">&#123;res=<span class="literal">null</span>,msg=<span class="string">&#x27;请求成功&#x27;</span>&#125;</span>) &#123;</span><br><span class="line">        <span class="comment">// this是helper对象，在其中可以调用其他的helper方法</span></span><br><span class="line">        <span class="comment">// this.ctx =&gt;context对象</span></span><br><span class="line">        <span class="comment">// this.app =&gt;application对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="attr">data</span>:res,</span><br><span class="line">            msg</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller/user.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">service</span>.<span class="property">user</span>.<span class="title function_">index</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">helper</span>.<span class="title function_">success</span>(&#123;</span><br><span class="line">        res</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="一些约定"><a href="#一些约定" class="headerlink" title="一些约定"></a>一些约定</h2><h3 id="egg"><a href="#egg" class="headerlink" title="egg"></a>egg</h3><p>controller和service<br>文件名：首字母大小写随意<br>调用：此时一定是首字母小写的<br>模块名：随意<br>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// controller/user.js/User.js // 文件名首字母大小写随意，不影响程序正确性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">resu</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;&#125;; <span class="comment">// 这个类名随便写，不影响程序正确性</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = resu;</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.js中调用时</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, controller.<span class="property">log</span>.<span class="property">index</span>); <span class="comment">// 这里一定是小写，即便文件名是User.js</span></span><br></pre></td></tr></table></figure>

<p>model<br>文件名：首字母大小写随意<br>调用：此时一定是首字母大写的<br>模块名：随意<br>示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// model/user.js/User.js // 文件名首字母大小写随意，不影响程序正确性</span></span><br><span class="line"><span class="keyword">const</span> resu = app.<span class="property">model</span>.<span class="title function_">define</span>(<span class="string">&#x27;user&#x27;</span>, ...); <span class="comment">// 这个变量名随便写，不影响程序正确性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// service中调用时</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">model</span>.<span class="property">User</span>.<span class="title function_">findAll</span>(); <span class="comment">// 这里一定是大写</span></span><br></pre></td></tr></table></figure>



<p>约定<br>文件名统一用小写<br>service 和 controller 调用时都是首字母小写<br>model 调用时注意首字母大写<br>变量名和类名采用首字母大写，后缀类型<br>service -&gt; UserService<br>controller -&gt; UserController<br>model -&gt; UserModel</p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>诸如userID之类的字段应该存储为user_id</p>
<p>get的参数从ctx.query中获取，获取到的参数的类型均为string</p>
<h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><h3 id="本地构建"><a href="#本地构建" class="headerlink" title="本地构建"></a>本地构建</h3><blockquote>
<p>$ cd baseDir<br>$ npm install –production<br>$ tar -zcvf ..&#x2F;release.tgz .</p>
</blockquote>
<p>构建完成后打包成 tgz 文件，部署的时候解压启动就可以了。</p>
<p>增加构建环节才能做到真正的<strong>一次构建多次部署</strong>，理论上代码没有改动的时候是不需要再次构建的，可以用原来的包进行部署</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>把 <code>egg-scripts</code> 模块作为 <code>dependencies</code> 引入：</p>
<p>首先，我们需要把 <code>egg-scripts</code> 模块作为 <code>dependencies</code> 引入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i egg-scripts --save</span><br></pre></td></tr></table></figure>

<p>添加 <code>npm scripts</code> 到 <code>package.json</code>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;egg-scripts start --daemon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stop&quot;</span><span class="punctuation">:</span> <span class="string">&quot;egg-scripts stop&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="启动配置项"><a href="#启动配置项" class="headerlink" title="启动配置项"></a>启动配置项</h4><p>你也可以在 <code>config.&#123;env&#125;.js</code> 中配置指定启动配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">cluster</span> = &#123;  </span><br><span class="line">    <span class="attr">listen</span>: &#123;    </span><br><span class="line">        <span class="attr">port</span>: <span class="number">7001</span>,    </span><br><span class="line">        <span class="attr">hostname</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>, </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样我们就可以通过 <code>npm start</code> 和 <code>npm stop</code> 命令启动或停止应用。</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>express框架</title>
    <url>/2022/02/05/00-00-00/</url>
    <content><![CDATA[<h2 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h2><p>Express是一个基于Node平台的web应用开发框架，提供了一系列的强大特性，帮助创建各种Web应用。可以使用<code>npm install express</code>命令下载。</p>
<h4 id="框架特性"><a href="#框架特性" class="headerlink" title="框架特性"></a>框架特性</h4><ul>
<li><p>提供了方便简洁的路由定义方式</p>
</li>
<li><p>对获取HTTP请求参数进行了简化处理</p>
</li>
<li><p>对模板引擎支持程度高，方便渲染动态HTML页面</p>
</li>
<li><p>提供了中间件机制有效控制HTTP请求</p>
</li>
<li><p>拥有大量第三方中间件对功能进行扩展</p>
</li>
</ul>
<h4 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h4><p>使用Express框架创建web服务器很简单，调用express模块返回的函数即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入Express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 使用框架创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 当客户端以get方式访问/路由时</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 对客户端做出响应 </span></span><br><span class="line">   <span class="comment">// send方法会根据内容的类型自动设置请求头</span></span><br><span class="line">   <span class="comment">// send方法会检测响应内容的类型</span></span><br><span class="line">    <span class="comment">// send方法会自动设置http状态码</span></span><br><span class="line">   res.<span class="title function_">send</span>(<span class="string">&#x27;Hello Express&#x27;</span>); <span class="comment">// &lt;h2&gt;Hello Express&lt;/h2&gt; &#123;say: &#x27;hello&#x27;&#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 程序监听3000端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>



<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件就是一堆方法，可以接收客户端发来的请求、可以对请求做出响应，也可以将请求继续交给下一个中间件继续处理。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片11.png)</p>
<p>中间件主要由两部分构成，中间件方法以及请求处理函数。</p>
<p>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)   <span class="comment">// 接收并处理get请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求路径&#x27;</span>, <span class="string">&#x27;处理函数&#x27;</span>)  <span class="comment">// 接收并处理post请求</span></span><br></pre></td></tr></table></figure>

<p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理。</p>
<p>默认情况下，请求<strong>从上到下依次匹配</strong>中间件，一旦匹配成功，终止匹配。</p>
<p>可以调用next方法将请求的控制权交给下一个中间件，直到遇到结束请求的中间件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    req.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">name</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="app-use中间件"><a href="#app-use中间件" class="headerlink" title="app.use中间件"></a>app.use中间件</h3><p>app.use 匹配所有的请求方式，可以直接传入请求处理函数，代表接收所有的请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>app.use 第一个参数也可以传入请求地址，代表不论什么请求方式，只要是这个请求地址就接收这个请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="中间件应用"><a href="#中间件应用" class="headerlink" title="中间件应用"></a>中间件应用</h3><ol>
<li><p>路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态，用户如果未登录，则拦截请求，直接响应，禁止用户进入需要登录的页面。</p>
</li>
<li><p>网站维护公告，在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中。</p>
</li>
<li><p>自定义404页面</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网站公告</span></span><br><span class="line"><span class="comment">// app.use((req, res, next) =&gt; &#123;</span></span><br><span class="line"><span class="comment">// 	res.send(&#x27;当前网站正在维护...&#x27;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 用户没有登录</span></span><br><span class="line">	<span class="keyword">let</span> isLogin = <span class="literal">true</span>;</span><br><span class="line">	<span class="comment">// 如果用户登录</span></span><br><span class="line">	<span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">		<span class="comment">// 让请求继续向下执行</span></span><br><span class="line">		<span class="title function_">next</span>()</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 如果用户没有登录 直接对客户端做出响应</span></span><br><span class="line">		res.<span class="title function_">send</span>(<span class="string">&#x27;您还没有登录 不能访问/admin这个页面&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&#x27;您已经登录 可以访问当前页面&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 为客户端响应404状态码以及提示信息</span></span><br><span class="line">	res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;当前访问的页面是不存在的&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><p>在程序执行的过程中，不可避免的会出现一些无法预料的错误，比如文件读取失败，数据库连接失败。程序一旦出错就无法继续运行，如果想要继续运行，必须捕获错误，加入错误处理</p>
<p>错误处理中间件是一个集中处理错误的地方。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">     res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;服务器发生未知错误&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="comment">// 同步程序出错后，会自动捕获</span></span><br></pre></td></tr></table></figure>

<p>当异步程序出现错误时，需调用next()方法，并且将错误信息通过参数的形式传递给next()方法，即可触发错误处理中间件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">     fs.<span class="title function_">readFile</span>(<span class="string">&quot;/file-does-not-exist&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>(err);</span><br><span class="line">            <span class="comment">// next不加参数代表传递给下一个中间件</span></span><br><span class="line">            <span class="comment">// 加了参数就代表传递给错误处理中间件</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h3><p>在node.js中，异步API的错误信息都是通过回调函数获取的，支持Promise对象的异步API发生错误可以通过catch方法捕获。异步函数执行如果发生错误要如何捕获错误呢？</p>
<p>try catch 可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但是不能捕获其他类型的API发生的错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">        <span class="title function_">next</span>(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="框架请求处理"><a href="#框架请求处理" class="headerlink" title="框架请求处理"></a>框架请求处理</h2><h3 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础代码</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) </span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> home = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="comment">// 将路由和请求路径进行匹配</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/home&#x27;</span>, home); <span class="comment">// 一级路由</span></span><br><span class="line"> <span class="comment">// 在home路由下继续创建路由</span></span><br><span class="line">home.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">// 二级路由</span></span><br><span class="line">         <span class="comment">//  /home/index</span></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到博客展示页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建模块化路由</span></span><br><span class="line"><span class="comment">// home.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> home = express.<span class="title class_">Router</span>(); </span><br><span class="line">home.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到博客展示页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = home; <span class="comment">// 路由成员作为模块成员导出</span></span><br><span class="line"><span class="comment">// admin.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>) </span><br><span class="line"><span class="keyword">const</span> admin = express.<span class="title class_">Router</span>();</span><br><span class="line">admin.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎来到博客管理页面&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = admin;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./route/home.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&#x27;./route/admin.js&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/home&#x27;</span>, home);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/admin&#x27;</span>, admin);</span><br></pre></td></tr></table></figure>

<h3 id="GET参数获取"><a href="#GET参数获取" class="headerlink" title="GET参数获取"></a>GET参数获取</h3><p>Express框架中使用<code>req.query</code>即可获取GET参数，框架内部会将GET参数转换为对象并返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接收地址栏中问号后面的参数</span></span><br><span class="line"><span class="comment">// 例如: http://localhost:3000/?name=zhangsan&amp;age=30</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// &#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: &quot;30&quot;&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="POST参数获取"><a href="#POST参数获取" class="headerlink" title="POST参数获取"></a>POST参数获取</h3><p>Express中接收post请求参数需要借助第三方包 body-parser。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入body-parser模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 配置body-parser模块</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// 接收请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 接收请求参数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure>



<h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定请求路由需要的参数，写在冒号后面</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/find/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>); <span class="comment">// &#123;id: 123&#125; </span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端请求链接</span></span><br><span class="line"><span class="attr">localhost</span>:<span class="number">3000</span>/find/<span class="number">123</span></span><br></pre></td></tr></table></figure>



<h3 id="静态资源的处理"><a href="#静态资源的处理" class="headerlink" title="静态资源的处理"></a>静态资源的处理</h3><p>通过Express内置的<strong>express.static</strong>可以方便地托管静态文件，例如img、CSS、JavaScript 文件等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure>

<p>现在，public 目录下面的静态资源文件就可以访问了。</p>
<ul>
<li><p><a href="http://localhost:3000/images/kitten.jpg">http://localhost:3000/images/kitten.jpg</a></p>
</li>
<li><p><a href="http://localhost:3000/css/style.css">http://localhost:3000/css/style.css</a></p>
</li>
<li><p><a href="http://localhost:3000/js/app.js">http://localhost:3000/js/app.js</a></p>
</li>
<li><p><a href="http://localhost:3000/images/bg.png">http://localhost:3000/images/bg.png</a></p>
</li>
<li><p><a href="http://localhost:3000/hello.html">http://localhost:3000/hello.html</a></p>
</li>
</ul>
<h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>为了使art-template模板引擎能够更好的和Express框架配合，模板引擎官方在原art-template模板引擎的基础上封装了express-art-template。</p>
<p>使用<code>npm install art-template express-art-template</code>命令进行安装。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 当渲染后缀为art的模板时 使用express-art-template模板引擎</span></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;art&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>));</span><br><span class="line"> <span class="comment">// 设置模板存放目录</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"> <span class="comment">// 渲染模板时不写后缀 默认拼接art后缀</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;art&#x27;</span>);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>

<h3 id="app-locals-对象"><a href="#app-locals-对象" class="headerlink" title="app.locals 对象"></a>app.locals 对象</h3><p>将变量设置到app.locals对象下面，这个数据在所有的模板中都可以获取到。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> app.<span class="property">locals</span>.<span class="property">users</span> = [&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"> &#125;,&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>博客案例</title>
    <url>/2022/02/06/00-00-00/</url>
    <content><![CDATA[<h2 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li><p>建立项目所需文件夹</p>
<ul>
<li><p>public 静态资源</p>
</li>
<li><p>model 数据库操作</p>
</li>
<li><p>route 路由</p>
</li>
<li><p>views 模板</p>
</li>
</ul>
</li>
<li><p>初始化项目描述文件</p>
<ul>
<li>npm init -y</li>
</ul>
</li>
<li><p>下载项目所需第三方模块</p>
<ul>
<li>npm install express mongoose art-template express-art-template</li>
</ul>
</li>
<li><p>创建网站服务器</p>
</li>
<li><p>构建模块化路由</p>
</li>
<li><p>构建博客管理页面模板</p>
<p>在构建模板时，需要将html文件的后缀改为.art。展示在浏览器时，文件内原本使用link标签引用的资源的相对路径是相对于地址栏中的请求路径的</p>
<p>注意<code>localhost/admin/login</code>这个路径，login被浏览器认为是文件，默认不写后缀，因此<code>localhost/admin</code>才是路径</p>
<p>要想外链资源能够生效，就要确保该路径下确实有该资源文件。否则渲染出来的页面只有html模板，css和js会失效</p>
<p>可以使用绝对路径来避免这个问题，将html（art）中所有外链资源的href最前面加<code>/</code>，代表使用设置的模板根目录</p>
</li>
<li><p>使用模板引擎中的子模板抽离公共模块</p>
</li>
</ol>
<h2 id="项目功能实现"><a href="#项目功能实现" class="headerlink" title="项目功能实现"></a>项目功能实现</h2><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><p>1.创建用户集合，初始化用户</p>
<ol>
<li><p>连接数据库</p>
</li>
<li><p>创建用户集合</p>
</li>
<li><p>初始化用户</p>
</li>
</ol>
<p>2.在<code>login.art</code>为登录表单设置请求地址、请求方式以及表单项name属性</p>
<p>3.当用户点击登录按钮时，客户端验证用户是否填写了登录表单</p>
<p>4.如果其中一项没有输入，阻止表单提交</p>
<p>5.服务器端接收请求参数，验证用户是否填写了登录表单（防止客户端禁用了js导致客户端验证失效，因此服务器端再验证一次）</p>
<p>6.如果其中一项没有输入，为客户端做出响应，阻止程序向下执行</p>
<p>7.根据邮箱地址查询用户信息</p>
<p>8.如果用户不存在，为客户端做出响应，阻止程序向下执行</p>
<p>9.如果用户存在，将用户名和密码进行比对</p>
<p>10.比对成功，用户登录成功</p>
<p>11.比对失败，用户登录失败</p>
<p>12.保存登录状态</p>
<p>13.密码加密处理</p>
<h2 id="包含的知识点"><a href="#包含的知识点" class="headerlink" title="包含的知识点"></a>包含的知识点</h2><h3 id="开发环境和生产环境"><a href="#开发环境和生产环境" class="headerlink" title="开发环境和生产环境"></a>开发环境和生产环境</h3><p>环境，就是指项目运行的地方，当项目处于开发阶段，项目运行在开发人员的电脑上，项目所处的环境就是开发环境。当项目开发完成以后，要将项目放到真实的网站服务器电脑中运行，项目所处的环境就是生产环境。</p>
<p>因为在不同的环境中，项目的配置是不一样的，需要在项目代码中判断当前项目运行的环境，根据不同的环境应用不同的项目配置。</p>
<h4 id="如何区分"><a href="#如何区分" class="headerlink" title="如何区分"></a>如何区分</h4><p>通过电脑操作系统中的系统环境变量区分当前是开发环境还是生产环境。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片12.png)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 开发环境</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 生产环境</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第三方模块config"><a href="#第三方模块config" class="headerlink" title="第三方模块config"></a>第三方模块config</h3><p>作用：允许开发人员将不同运行环境下的应用配置信息抽离到单独的文件中，模块内部自动判断当前应用的运行环境，并读取对应的配置信息，极大提供应用配置信息的维护成本，避免了当运行环境重复的多次切换时，手动到项目代码中修改配置信息</p>
<p><strong>使用步骤</strong></p>
<ol>
<li><p>使用npm install config命令下载模块</p>
</li>
<li><p>在项目的根目录下新建config文件夹</p>
</li>
<li><p>在config文件夹下面新建default.json、development.json、production.json文件</p>
</li>
<li><p>在项目中通过require方法，将模块进行导入</p>
</li>
<li><p>使用模块内部提供的get方法获取配置信息</p>
</li>
</ol>
<p><strong>将敏感配置信息存储在环境变量中</strong></p>
<ol>
<li><p>在config文件夹中建立custom-environment-variables.json文件</p>
</li>
<li><p>配置项属性的值填写系统环境变量的名字</p>
</li>
<li><p>项目运行时config模块查找系统环境变量，并读取其值作为当前配置项属于的值</p>
</li>
</ol>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片13.png)</p>
<h3 id="密码加密-bcrypt"><a href="#密码加密-bcrypt" class="headerlink" title="密码加密 bcrypt"></a>密码加密 bcrypt</h3><p>哈希加密是单程加密方式：1234 &#x3D;&gt; abcd</p>
<p>在加密的密码中加入随机字符串可以增加密码被破解的难度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入bcrypt模块</span></span><br><span class="line"><span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">&#x27;bcrypt&#x27;</span>);</span><br><span class="line"><span class="comment">// 生成随机字符串 gen =&gt; generate 生成 salt 盐</span></span><br><span class="line"><span class="keyword">let</span> salt = <span class="keyword">await</span> bcrypt.<span class="title function_">genSalt</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 使用随机字符串对密码进行加密</span></span><br><span class="line"><span class="keyword">let</span> pass = <span class="keyword">await</span> bcrypt.<span class="title function_">hash</span>(<span class="string">&#x27;明文密码&#x27;</span>, salt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码比对</span></span><br><span class="line"><span class="keyword">let</span> isEqual = <span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(<span class="string">&#x27;明文密码&#x27;</span>, <span class="string">&#x27;加密密码&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>bcrypt依赖的其他环境</p>
<ol>
<li><p>python 2.x</p>
</li>
<li><p>node-gyp</p>
<pre><code>   npm install -g node-gyp
</code></pre>
</li>
<li><p>windows-build-tools</p>
<pre><code>    npm install --global --production windows-build-tools
</code></pre>
</li>
</ol>
<h3 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h3><h4 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h4><p>浏览器在电脑硬盘中开辟的一块空间，主要供服务器端存储数据。</p>
<p>cookie中的数据是以域名的形式进行区分的。</p>
<p>cookie中的数据是有过期时间的，超过时间数据会被浏览器自动删除。</p>
<p>cookie中的数据会随着请求被自动发送到服务器端。</p>
<h4 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h4><p>实际上就是一个对象，存储在服务器端的内存中，在session对象中也可以存储多条数据，每一条数据都有一个sessionid做为唯一标识。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片14.png)</p>
<p>在node.js中需要借助express-session实现session功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: <span class="string">&#x27;secret key&#x27;</span> &#125;));</span><br></pre></td></tr></table></figure>

<h3 id="Joi"><a href="#Joi" class="headerlink" title="Joi"></a>Joi</h3><p>JavaScript对象的规则描述语言和验证器。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Joi</span> = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">alphanum</span>().<span class="title function_">min</span>(<span class="number">3</span>).<span class="title function_">max</span>(<span class="number">30</span>).required().<span class="title function_">error</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(‘错误信息’)),</span><br><span class="line">    <span class="attr">password</span>: <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">regex</span>(<span class="regexp">/^[a-zA-Z0-9]&#123;3,30&#125;$/</span>),</span><br><span class="line">    <span class="attr">access_token</span>: [<span class="title class_">Joi</span>.<span class="title function_">string</span>(), <span class="title class_">Joi</span>.<span class="title function_">number</span>()],</span><br><span class="line">    <span class="attr">birthyear</span>: <span class="title class_">Joi</span>.<span class="title function_">number</span>().<span class="title function_">integer</span>().<span class="title function_">min</span>(<span class="number">1900</span>).<span class="title function_">max</span>(<span class="number">2013</span>),</span><br><span class="line">    <span class="attr">email</span>: <span class="title class_">Joi</span>.<span class="title function_">string</span>().<span class="title function_">email</span>()</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Joi</span>.<span class="title function_">validate</span>(&#123; <span class="attr">username</span>: <span class="string">&#x27;abc&#x27;</span>, <span class="attr">birthyear</span>: <span class="number">1994</span> &#125;, schema);</span><br></pre></td></tr></table></figure>



<h3 id="formidable"><a href="#formidable" class="headerlink" title="formidable"></a>formidable</h3><p>作用：解析表单，支持get请求参数，post请求参数、文件上传。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入formidable模块</span></span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">&#x27;formidable&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建表单解析对象</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">new</span> formidable.<span class="title class_">IncomingForm</span>();</span><br><span class="line"><span class="comment">// 设置文件上传路径</span></span><br><span class="line">form.<span class="property">uploadDir</span> = <span class="string">&quot;/my/dir&quot;</span>;</span><br><span class="line"><span class="comment">// 是否保留表单上传文件的扩展名</span></span><br><span class="line">form.<span class="property">keepExtensions</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 对表单进行解析</span></span><br><span class="line">form.<span class="title function_">parse</span>(req, <span class="function">(<span class="params">err, fields, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fields 存储普通请求参数</span></span><br><span class="line">        <span class="comment">// files 存储上传的文件信息</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="FileReader即时预览"><a href="#FileReader即时预览" class="headerlink" title="FileReader即时预览"></a>FileReader即时预览</h3><p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片15.png)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html5方法</span></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">reader.<span class="title function_">readAsDataURL</span>(<span class="string">&#x27;文件&#x27;</span>);</span><br><span class="line">reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reader.<span class="property">result</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数据分页-mongoose-sex-page"><a href="#数据分页-mongoose-sex-page" class="headerlink" title="数据分页 mongoose-sex-page"></a>数据分页 mongoose-sex-page</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pagination = <span class="built_in">require</span>(<span class="string">&#x27;mongoose-sex-page&#x27;</span>);</span><br><span class="line"><span class="title function_">pagination</span>(集合构造函数).<span class="title function_">page</span>(<span class="number">1</span>) .<span class="title function_">size</span>(<span class="number">20</span>) .<span class="title function_">display</span>(<span class="number">8</span>) .<span class="title function_">exec</span>();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>请求响应原理</title>
    <url>/2022/02/02/00-00-00/</url>
    <content><![CDATA[<h2 id="服务器端基础"><a href="#服务器端基础" class="headerlink" title="服务器端基础"></a>服务器端基础</h2><h4 id="网站构成"><a href="#网站构成" class="headerlink" title="网站构成"></a>网站构成</h4><p>网站应用程序主要分为两大部分：客户端和服务器端。</p>
<ul>
<li><p>客户端：在浏览器中运行的部分，就是用户看到并与之交互的界面程序。使用HTML、CSS、JavaScript构建。</p>
</li>
<li><p>服务器端：在服务器中运行的部分，负责存储数据和处理应用逻辑。</p>
</li>
</ul>
<h4 id="Node网站服务器"><a href="#Node网站服务器" class="headerlink" title="Node网站服务器"></a>Node网站服务器</h4><p>能够提供网站访问服务的机器就是网站服务器，它能够接收客户端的请求，能够对请求做出响应。</p>
<h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>互联网中设备的唯一标识。IP是Internet Protocol Address的简写，代表互联网协议地址.</p>
<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>由于IP地址难于记忆，所以产生了域名的概念，所谓域名就是平时<strong>上网所使用的网址</strong>。</p>
<p><a href="http://www.itheima.com/">http://www.itheima.com</a> &#x3D;&gt; <a href="http://124.165.219.100/">http://124.165.219.100/</a></p>
<p>虽然在地址栏中输入的是网址, 但是最终还是会将域名转换为ip才能访问到指定的网站服务器。</p>
<h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>端口是计算机与外界通讯交流的出口，用来区分服务器电脑中提供的不同的服务。端口号可以不提供，默认是80</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片5.png)</p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符，又叫URL(Uniform Resource Locator)，是专为标识Internet网上资源位置而设的一种编址方式，我们平时所说的网页地址指的即是URL。</p>
<p>组成</p>
<ul>
<li>传输协议:&#x2F;&#x2F;服务器IP或域名:端口&#x2F;资源所在位置标识</li>
<li><code>http://www.itcast.cn/news/20181018/09152238514.html</code></li>
</ul>
<h4 id="开发过程中客户端和服务器端说明"><a href="#开发过程中客户端和服务器端说明" class="headerlink" title="开发过程中客户端和服务器端说明"></a>开发过程中客户端和服务器端说明</h4><p>在开发阶段，客户端和服务器端使用<strong>同一台电脑</strong>，即开发人员电脑。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片6.png)</p>
<ul>
<li><p>本机域名：localhost</p>
</li>
<li><p>本地IP  ：127.0.0.1</p>
</li>
</ul>
<h2 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 引用系统模块</span></span><br><span class="line"> <span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">  <span class="comment">// 创建web服务器</span></span><br><span class="line"> <span class="keyword">const</span> app = http.<span class="title function_">createServer</span>();</span><br><span class="line">  <span class="comment">// 客户端的请求以事件的形式到达服务器端</span></span><br><span class="line">  <span class="comment">// 当客户端发送请求的时候</span></span><br><span class="line"> app.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//  响应</span></span><br><span class="line">       res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;hi, user&lt;/h1&gt;&#x27;</span>);</span><br><span class="line"> &#125;);</span><br><span class="line">  <span class="comment">// 监听3000端口</span></span><br><span class="line"> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已启动，监听3000端口，请访问 localhost:3000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行此文件并打开浏览器</span></span><br></pre></td></tr></table></figure>



<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>超文本传输协议</strong>（HyperText Transfer Protocol）规定了如何从网站服务器传输超文本到本地浏览器，它基于客户端服务器架构工作，是客户端（用户）和服务器端（网站）<strong>请求和应答的标准</strong>。</p>
<h3 id="报文"><a href="#报文" class="headerlink" title="报文"></a>报文</h3><p>在HTTP请求和响应的过程中传递的数据块就叫报文，包括要传送的数据和一些附加信息，并且要遵守规定好的格式。</p>
<p>在浏览器右键检查中的Network可以查看报文</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片8.png)</p>
<ul>
<li><p>请求报文</p>
<ol>
<li><p>请求方式 (Request Method)，告知服务器端当前事务的类型</p>
<ul>
<li>GET   请求数据</li>
<li>POST  发送数据，相对更安全</li>
</ul>
</li>
<li><p>请求地址 (Request URL)</p>
<ul>
<li><pre><code class="js">app.on(&#39;request&#39;, (req, res) =&gt; &#123;
    req.headers // 获取请求报文
    req.url   // 获取请求地址，根据地址的不同响应不同的内容
    req.method  // 获取请求方法
&#125;);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 响应报文</span><br><span class="line"></span><br><span class="line">  1. HTTP状态码</span><br><span class="line">     - 200 请求成功</span><br><span class="line">     - 404 请求的资源没有被找到</span><br><span class="line">     - 500 服务器端错误</span><br><span class="line">     - 400 客户端请求有语法错误</span><br><span class="line"></span><br><span class="line">  2. 内容类型(默认为text/plain)</span><br><span class="line">     - text/html</span><br><span class="line">     - text/css</span><br><span class="line">     - application/javascript</span><br><span class="line">     - image/jpeg</span><br><span class="line">     - application/json</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line"> app.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">     // 设置响应报文</span><br><span class="line">     res.writeHead(200, &#123;</span><br><span class="line">         &#x27;Content-Type&#x27;: &#x27;text/html;charset=utf8&#x27;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="HTTP请求与响应处理"><a href="#HTTP请求与响应处理" class="headerlink" title="HTTP请求与响应处理"></a>HTTP请求与响应处理</h2><h3 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h3><ul>
<li><p>GET参数</p>
<ul>
<li><p><strong>参数被放置在浏览器地址栏</strong>中，例如<a href="http://localhost:3000/?name=zhangsan&age=20%60">http://localhost:3000/?name=zhangsan&amp;age=20`</a></p>
</li>
<li><p>参数获取需要借助系统模块url，url模块用来处理url地址</p>
</li>
<li><pre><code class="js"> const http = require(&#39;http&#39;);
 // 导入url系统模块 用于处理url地址
 const url = require(&#39;url&#39;);
 const app = http.createServer();
 app.on(&#39;request&#39;, (req, res) =&gt; &#123;
     // 将url路径的各个部分解析出来并返回对象
         // true 代表将参数解析为对象格式
     let &#123;query&#125; = url.parse(req.url, true);
     console.log(query);
 &#125;);
 app.listen(3000);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- POST参数</span><br><span class="line"></span><br><span class="line">  - 参数被放置在请求体中进行传输</span><br><span class="line"></span><br><span class="line">  - 获取POST参数需要使用data事件和end事件,且不是一次就传输完的</span><br><span class="line"></span><br><span class="line">  - 使用querystring系统模块将参数转换为对象格式</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">     // 导入系统模块querystring 用于将HTTP参数转换为对象格式</span><br><span class="line">     const querystring = require(&#x27;querystring&#x27;);</span><br><span class="line">     app.on(&#x27;request&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">         let postData = &#x27;&#x27;;</span><br><span class="line">         // 监听参数传输事件</span><br><span class="line">         req.on(&#x27;data&#x27;, (chunk) =&gt; postData += chunk;);</span><br><span class="line">         // 拼接POST参数</span><br><span class="line">         // 监听参数传输完毕事件</span><br><span class="line">         req.on(&#x27;end&#x27;, () =&gt; &#123; </span><br><span class="line">             console.log(querystring.parse(postData)); </span><br><span class="line">         &#125;); </span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>路由是指客户端请求地址与服务器端程序代码的对应关系。简单的说，就是请求什么响应什么。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当客户端发来请求的时候</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取客户端的请求路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123; pathname &#125; = url.<span class="title function_">parse</span>(req.<span class="property">url</span>);</span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&#x27;/&#x27;</span> || pathname == <span class="string">&#x27;/index&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到首页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到列表页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       res.<span class="title function_">end</span>(<span class="string">&#x27;抱歉, 您访问的页面出游了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="静态资源和动态资源"><a href="#静态资源和动态资源" class="headerlink" title="静态资源和动态资源"></a>静态资源和动态资源</h3><ul>
<li><p>服务器端不需要处理，可以直接响应给客户端的资源就是静态资源，例如CSS、JavaScript、image文件。</p>
</li>
<li><p>相同的请求地址不同的响应资源，这种资源就是动态资源。</p>
</li>
</ul>
<h2 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h2><ul>
<li><p>同步API：只有当前API执行完成后，才能继续执行下一个API</p>
<ul>
<li><pre><code class="js">console.log(&#39;before&#39;); 
console.log(&#39;after&#39;);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 异步API：当前API的执行不会阻塞后续代码的执行</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    console.log(&#x27;before&#x27;);</span><br><span class="line">    setTimeout(</span><br><span class="line">       () =&gt; &#123; console.log(&#x27;last&#x27;);</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">    console.log(&#x27;after&#x27;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</p>
<ul>
<li><pre><code class="js">// 同步
function sum (n1, n2) &#123; 
    return n1 + n2;
&#125; 
const result = sum (10, 20);//可以得到返回值

// 异步
function getMsg () &#123; 
    setTimeout(function () &#123; 
        return &#123; msg: &#39;Hello Node.js&#39; &#125;
    &#125;, 2000);
&#125;
const msg = getMsg (); 
console.log(msg);  // 得不到返回值，undefined
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 要获取异步API的执行结果需要用回调函数</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function getMsg (callback) &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            // </span><br><span class="line">            callback (&#123; msg: &#x27;Hello Node.js&#x27; &#125;)</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;</span><br><span class="line">    getMsg (function (msg) &#123; </span><br><span class="line">        console.log(msg);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h3><p><strong>如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</strong></p>
<p>答：可以将依赖项写到回调函数中，但这样会造成回调函数嵌套过多</p>
<p>比如：<strong>依次</strong>读取A、B、C文件，A的回调函数中要写B，B的回调函数中要写C</p>
<p>当嵌套层数太多时，可读性和可维护性很差，通常称这样的代码为回调地狱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result1</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line">	fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result2</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result3</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise出现的目的是解决Node.js异步编程中回调地狱的问题。是异步编程语法上的改进，<strong>将异步API的执行和结果的处理分离</strong>。</p>
<p>实际就是在原本的异步API外面包裹一层，提供了两个方法，当有返回结果时，若成功则用resolve将结果传递到外面；失败则用reject将结果传递</p>
<p>基本语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve用于传递异步API的执行结果</span></span><br><span class="line">    <span class="comment">// reject用于异步API失败的结果传递到外面去</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在promise外面拿到结果</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result); </span><br><span class="line">             <span class="comment">// then对应resolve</span></span><br><span class="line">             <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error); </span><br><span class="line">			<span class="comment">// 失败了</span></span><br></pre></td></tr></table></figure>
<p>解决回调地狱：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p3</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>(result)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">p1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">r1</span>)=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">p2</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r2</span>)=&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h3><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p>
<p>定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步函数默认的返回值是promise对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="async关键字"><a href="#async关键字" class="headerlink" title="async关键字"></a>async关键字</h4><ol>
<li><p>普通函数定义前加async关键字 普通函数变成异步函数</p>
</li>
<li><p>异步函数默认返回promise对象</p>
</li>
<li><p>在异步函数内部使用return关键字进行结果返回 结果会被包裹的promise对象中 return关键字代替了resolve方法</p>
</li>
<li><p>在异步函数内部使用throw关键字抛出程序异常</p>
</li>
<li><p>调用异步函数再链式调用then方法获取异步函数执行结果</p>
</li>
<li><p>调用异步函数再链式调用catch方法获取异步函数执行的错误信息</p>
</li>
</ol>
<h4 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h4><ol>
<li><p>await关键字只能出现在异步函数中</p>
</li>
<li><p>await后面只能写promise对象 写其他类型的API是不可以的</p>
</li>
<li><p><strong>await可暂停异步函数向下执行，直到promise返回结果后再向下执行，同时可以拿到函数的返回值</strong></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p1</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;p1&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p2</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;p2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p3</span> () &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;p3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span> () &#123;</span><br><span class="line">	<span class="keyword">let</span> r1 = <span class="keyword">await</span> <span class="title function_">p1</span>()</span><br><span class="line">	<span class="keyword">let</span> r2 = <span class="keyword">await</span> <span class="title function_">p2</span>()</span><br><span class="line">	<span class="keyword">let</span> r3 = <span class="keyword">await</span> <span class="title function_">p3</span>()</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r1)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r2)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 改造现有异步函数api 让其返回promise对象 从而支持异步函数语法</span></span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>).<span class="property">promisify</span>;</span><br><span class="line"><span class="comment">// 调用promisify方法改造现有异步API 让其返回promise对象</span></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span> () &#123;</span><br><span class="line">	<span class="keyword">let</span> r1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">	<span class="keyword">let</span> r2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">	<span class="keyword">let</span> r3 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r1)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r2)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(r3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>模板引擎</title>
    <url>/2022/02/04/00-00-00/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>模板引擎是第三方模块。</p>
<p>让开发者以更加友好的方式拼接字符串，使项目代码更加清晰、易于维护。</p>
<h3 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h3><ol>
<li><p>在命令行工具中使用<code>npm install art-template</code>命令进行下载</p>
</li>
<li><p>使用<code>const template = require(&#39;art-template&#39;)</code>引入模板引擎</p>
</li>
<li><p>告诉模板引擎要拼接的数据和模板在哪 <code>const html = template(‘模板路径’, 数据);</code></p>
</li>
<li><p>使用模板语法告诉模板引擎，模板与数据应该如何进行拼接</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎模块</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="comment">// 将特定模板与特定数据进行拼接</span></span><br><span class="line"><span class="comment">// 第一个参数是模板文件路径，规定是.art，实际里面是HTML文件</span></span><br><span class="line"><span class="comment">// 第二个参数是一个对象，是传递的参数</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="title function_">template</span>(<span class="string">&#x27;./views/index.art&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">       <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板文件，需传递name和age--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;data.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;data.age&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>art-template同时支持两种模板语法：标准语法和原始语法。</p>
<p>标准语法可以让模板更容易读写，原始语法具有强大的逻辑处理能力。</p>
<ul>
<li><p>标准语法： </p>
</li>
<li><p>原始语法：&lt;%&#x3D;数据 %&gt;</p>
</li>
</ul>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a ? b : c&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;a + b&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= value %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= a ? b : c %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%= a + b %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="原文输出"><a href="#原文输出" class="headerlink" title="原文输出"></a>原文输出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果数据中携带HTML标签，默认模板引擎不会解析标签，会将其转义后输出。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果确保数据安全，可以让模板引擎直接解析，即原文输出--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;@ value &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&lt;%- value %&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span> </span><br><span class="line">&#123;&#123;if 条件&#125;&#125; ... &#123;&#123;/if&#125;&#125;</span><br><span class="line">&#123;&#123;if v1&#125;&#125; ... &#123;&#123;else if v2&#125;&#125; ... &#123;&#123;/if&#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line">&lt;% if (value) &#123; %&gt; ... &lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (v1) &#123; %&gt; ... &lt;% &#125; else if (v2) &#123; %&gt; ... &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line">&#123;&#123;each target&#125;&#125;</span><br><span class="line">    &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br><span class="line"> <span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line">&lt;% for(var i = 0; i &lt; target.length; i++)&#123; %&gt;</span><br><span class="line">    &lt;%= i %&gt; &lt;%= target[i] %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h3><p>使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</p>
<p>哪里需要引入就写到哪里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  标准语法：&#123;&#123;include &#x27;模板&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">  原始语法：&lt;%include(&#x27;模板&#x27;) %&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 标准语法 --&gt;</span></span><br><span class="line"> &#123;&#123;include &#x27;./header.art&#x27;&#125;&#125;</span><br><span class="line">  <span class="comment">&lt;!-- 原始语法 --&gt;</span></span><br><span class="line"> &lt;% include(&#x27;./header.art&#x27;) %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>使用模板继承可以将网站HTML骨架抽离到单独的文件中，其他页面模板可以继承骨架文件。</p>
<p>![](E:\Tb前端资源笔记\11-16 前后端交互\11-13node+express\笔记\images\图片10.png)</p>
<p>不同页面在继承骨架文件时，需要填充的css，js和页面主体内容都不一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML骨架模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--预留位置用于填充，head是位置名称--&gt;</span></span><br><span class="line">        &#123;&#123;block &#x27;head&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        &#123;&#123;block &#x27;content&#x27;&#125;&#125;&#123;&#123;/block&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--index.art 首页模板--&gt;</span></span><br><span class="line">&#123;&#123;extend &#x27;./layout.art&#x27;&#125;&#125; <span class="comment">&lt;!--继承骨架模板--&gt;</span></span><br><span class="line">&#123;&#123;block &#x27;head&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;custom.css&quot;</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br><span class="line">&#123;&#123;block &#x27;content&#x27;&#125;&#125; <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is just an awesome page.<span class="tag">&lt;/<span class="name">p</span>&gt;</span> &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h3><ol>
<li><p>向模板中导入外部变量 template.defaults.imports.变量名 &#x3D; 变量值;</p>
</li>
<li><p>设置模板根目录 template.defaults.root &#x3D; 模板目录</p>
</li>
<li><p>设置模板默认后缀 template.defaults.extname &#x3D; ‘.art’</p>
</li>
</ol>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>node入门</title>
    <url>/2022/02/01/09-35-24/</url>
    <content><![CDATA[<h2 id="Node是什么"><a href="#Node是什么" class="headerlink" title="Node是什么"></a>Node是什么</h2><p>Node是一个基于Chrome V8引擎的JavaScript代码运行环境。</p>
<p>Node.js是由<strong>ECMAScript</strong>及<strong>Node 环境</strong>提供的一些<strong>附加API</strong>组成的，包括文件、网络、路径等等一些更加强大的 API。因此ES语法在node中完全可以使用。</p>
<p>在Node环境下执行代码，需要先定位到文件所在的文件夹，再使用Node命令执行后缀为.js的文件即可</p>
<blockquote>
<p>node test.js</p>
</blockquote>
<p>node的全局对象是global，有以下方法</p>
<blockquote>
<p>console.log()   在控制台中输出</p>
<p>setTimeout()   设置超时定时器</p>
<p>clearTimeout() 清除超时时定时器</p>
<p>setInterval()   设置间歇定时器</p>
<p>clearInterval()  清除间歇定时</p>
</blockquote>
<h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><p>JavaScript在使用时存在两大问题，<strong>文件依赖</strong>和<strong>命名冲突。</strong></p>
<p>采用模块化开发的形式不需要人为地维护文件依赖，由文件自动实现，且文件与文件之间是半封闭状态，只将需要访问的代码开放出去</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一个功能就是一个模块，多个模块可以组成完整应用，抽离一个模块不会影响其他功能的运行。</p>
<p><img src="/images/%E5%9B%BE%E7%89%871.png"></p>
<h3 id="Node-js中模块化开发规范"><a href="#Node-js中模块化开发规范" class="headerlink" title="Node.js中模块化开发规范"></a>Node.js中模块化开发规范</h3><p>Node.js规定<strong>一个JavaScript文件就是一个模块</strong>，模块内部定义的变量和函数默认情况下在外部无法得到</p>
<p>模块内部可以使用<code>exports</code>对象进行成员导出，使用<code>require</code>方法导入其他模块。（导入时文件路径中的.js可以省略）</p>
<p><img src="/images/%E5%9B%BE%E7%89%872.png"></p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> version = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sayHi</span> = name =&gt; <span class="string">`您好, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 向模块外部导出数据 </span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">version</span> = version;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">sayHi</span> = sayHi;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// b.js</span></span><br><span class="line"> <span class="comment">// 在b.js模块中导入模块a</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>);</span><br><span class="line"> <span class="comment">// 输出b模块中的version变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">version</span>);</span><br><span class="line"> <span class="comment">// 调用b模块中的sayHi方法 并输出其返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">sayHi</span>(<span class="string">&#x27;hello&#x27;</span>)); </span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模块成员的第二种导出方法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">version</span> = version;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHi</span> = sayHi;</span><br></pre></td></tr></table></figure>

<h5 id="两种方法的区别"><a href="#两种方法的区别" class="headerlink" title="两种方法的区别"></a>两种方法的区别</h5><p>exports是module.exports的别名(地址引用关系)，<strong>导出对象最终以module.exports为准</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> = &#123;</span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123; <span class="comment">// 当两者冲突时，以module.export为准</span></span><br><span class="line">	<span class="attr">name</span>:<span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>就是Node运行环境提供的API。因为这些API都是以模块化的方式进行开发的, 所以称其为系统模块</p>
<h3 id="文件操作系统模块fs"><a href="#文件操作系统模块fs" class="headerlink" title="文件操作系统模块fs"></a>文件操作系统模块fs</h3><p><img src="/images/%E5%9B%BE%E7%89%873.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用该模块提供的API</span></span><br><span class="line">fs.<span class="title function_">reaFile</span>(<span class="string">&#x27;文件路径/文件名称&#x27;</span>[,<span class="string">&#x27;文件编码&#x27;</span>], callback); </span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;文件路径/文件名称&#x27;</span>, <span class="string">&#x27;数据&#x27;</span>, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">&#x27;&lt;h3&gt;正在使用fs.writeFile写入文件内容&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;../index.html&#x27;</span>, content, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123; </span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="路径系统模块path"><a href="#路径系统模块path" class="headerlink" title="路径系统模块path"></a>路径系统模块path</h3><p>为什么要进行路径拼接</p>
<ul>
<li>不同操作系统的路径分隔符不统一</li>
<li>Windows是<code>\ / </code>      Linux(常用作服务器，必须考虑)是&#x2F;</li>
</ul>
<h4 id="路径拼接-根据不同的OS选择不同的拼接符"><a href="#路径拼接-根据不同的OS选择不同的拼接符" class="headerlink" title="路径拼接  根据不同的OS选择不同的拼接符"></a>路径拼接  根据不同的OS选择不同的拼接符</h4><blockquote>
<p>path**.<strong>join</strong>(<strong>‘路径’</strong>,** ‘路径’<strong>,</strong> …)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 导入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"> <span class="comment">// 路径拼接</span></span><br><span class="line"><span class="keyword">let</span> finialPath = path.<span class="title function_">join</span>(<span class="string">&#x27;itcast&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c.css&#x27;</span>);</span><br><span class="line"> <span class="comment">// 输出结果 itcast\a\b\c.css</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(finialPath);</span><br></pre></td></tr></table></figure>

<h5 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h5><ul>
<li><p>大多数情况下使用绝对路径，因为相对路径有时候相对的是命令行工具的当前工作目录</p>
</li>
<li><p>在读取文件或者设置文件路径时都会选择绝对路径</p>
</li>
<li><p>使用<code>__dirname</code>获取当前文件所在的绝对路径</p>
</li>
</ul>
<h2 id="第三方模块（包）"><a href="#第三方模块（包）" class="headerlink" title="第三方模块（包）"></a>第三方模块（包）</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>别人写好的、具有特定功能的、我们能直接使用的模块即第三方模块，由于第三方模块通常都是由多个文件组成并且被放置在一个文件夹中，所以又名包。</p>
<h3 id="存在形式"><a href="#存在形式" class="headerlink" title="存在形式"></a>存在形式</h3><p>以js文件的形式存在，提供实现项目具体功能的API接口。</p>
<p>以命令行工具形式存在，辅助项目开发</p>
<h3 id="获取第三方模块"><a href="#获取第三方模块" class="headerlink" title="获取第三方模块"></a>获取第三方模块</h3><p><code>npmjs.com</code>是一个第三方模块的存储仓库，里面存储了大量的第三方模块。</p>
<p>它提供了<code>npm(node package manager):node的第三方模块管理工具</code>命令来下载第三方模块</p>
<blockquote>
<p>下载：npm install 模块名称</p>
<p>卸载：npm unintall package 模块名称</p>
</blockquote>
<ul>
<li>npm是一个命令行工具，本质上也是一个第三方模块，在安装node时已经集成安装了</li>
<li>在安装过程中需要注意安装模式（本地安装和全局安装），本地安装就是安装到当前项目；全局安装就是将模块安装到公共目录，所有项目都可以使用</li>
<li>一般而言，我们将命令行工具进行全局安装，将库文件进行本地安装</li>
</ul>
<h3 id="nodemon模块"><a href="#nodemon模块" class="headerlink" title="nodemon模块"></a>nodemon模块</h3><p>nodemon是一个命令行工具，用以辅助项目开发。</p>
<p>在Node.js中，每次修改文件都要在命令行工具中重新执行该文件，非常繁琐。该模块可以在文件保存以后 重新执行文件</p>
<h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><ol>
<li><p>使用<code>npm install nodemon –g</code> 下载它  -g就是全局安装</p>
</li>
<li><p>在命令行工具中用nodemon命令替代node命令执行文件</p>
</li>
<li><p>之后会挂起命令来监听保存文件操作，若要中断，按ctrl+c</p>
</li>
</ol>
<p><img src="/images/%E5%9B%BE%E7%89%874.png"></p>
<h3 id="nrm模块"><a href="#nrm模块" class="headerlink" title="nrm模块"></a>nrm模块</h3><p><code>nrm ( npm registry manager )</code>：npm下载地址切换工具，可以快速切换npm的下载地址</p>
<p>npm默认的下载地址在国外，国内下载速度慢</p>
<h5 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h5><ol>
<li><p>使用<code>npm install nrm –g </code>下载它</p>
</li>
<li><p>查询可用下载地址列表 <code>nrm ls</code></p>
</li>
<li><p>切换npm下载地址<code> nrm use 下载地址名称</code></p>
</li>
</ol>
<h3 id="Gulp模块"><a href="#Gulp模块" class="headerlink" title="Gulp模块"></a>Gulp模块</h3><p>基于node平台开发的前端构建工具</p>
<p>将机械化操作编写成任务, 想要执行机械化操作时执行一个命令行命令，任务就能自动执行，提高开发效率。</p>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul>
<li><p>项目上线，HTML、CSS、JS文件压缩合并</p>
</li>
<li><p>语法转换（es6、less …）</p>
</li>
<li><p>公共文件抽离</p>
</li>
<li><p>修改文件后浏览器自动刷新</p>
</li>
</ul>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol>
<li><p>使用<code>npm install gulp</code>下载gulp库文件</p>
</li>
<li><p>在项目根目录下建立<code>gulpfile.js</code>文件</p>
</li>
<li><p>重构项目的文件夹结构src目录放置源代码文件 dist目录放置构建后文件</p>
</li>
<li><p>在gulpfile.js文件中编写任务.</p>
</li>
<li><p>在命令行工具中执行gulp任务</p>
<ul>
<li>gulpfile.js文件中写有很多个task，如果使用node命令执行该文件，会执行整个文件</li>
<li>若只是执行单个task，可使用gulp提供的同名命令行工具<ul>
<li><code>npm install gulp-cli -g</code>安装gulp命令行工具</li>
<li><code>gulp 任务名</code>执行某个具体任务</li>
</ul>
</li>
</ul>
</li>
</ol>
<h5 id="Gulp提供的方法"><a href="#Gulp提供的方法" class="headerlink" title="Gulp提供的方法"></a>Gulp提供的方法</h5><ul>
<li><p>gulp.src()：获取任务要处理的文件</p>
</li>
<li><p>gulp.dest()：输出文件</p>
</li>
<li><p>gulp.task()：建立gulp任务</p>
</li>
<li><p>gulp.watch()：监控文件的变化</p>
</li>
<li><p>其他的大量方法通过插件实现</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"> <span class="comment">// 使用gulp.task()方法建立任务</span></span><br><span class="line"> <span class="comment">// first为任务名，以区分多个不同的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;first&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 获取要处理的文件</span></span><br><span class="line">   gulp.<span class="title function_">src</span>(<span class="string">&#x27;./src/css/base.css&#x27;</span>) </span><br><span class="line">   <span class="comment">// 将处理后的文件输出到dist目录</span></span><br><span class="line">   <span class="comment">// 用pipe方法处理代码</span></span><br><span class="line">       .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist/css&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="Gulp插件"><a href="#Gulp插件" class="headerlink" title="Gulp插件"></a>Gulp插件</h5><ul>
<li><p>gulp-htmlmin ：html文件压缩</p>
<ul>
<li><pre><code class="js">// 引用
const htmlmin = require(&#39;gulp-htmlmin&#39;);
const fileinclude = require(&#39;gulp-file-include&#39;);

// 1.html文件中代码的压缩操作
// 2.抽取html文件中的公共代码
gulp.task(&#39;htmlmin&#39;, () =&gt; &#123;
    gulp.src(&#39;./src/*.html&#39;)
        // 注意顺序，先抽取公共部分再压缩代码
        // 抽取公共代码
        .pipe(fileinclude())
        // 压缩html文件中的代码
        .pipe(htmlmin(&#123; collapseWhitespace: true &#125;))
        // 处理后的文件输出到dist文件夹
        .pipe(gulp.dest(&#39;dist&#39;));
&#125;);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- gulp-csso ：压缩css</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const less = require(&#x27;gulp-less&#x27;);</span><br><span class="line">    const csso = require(&#x27;gulp-csso&#x27;);</span><br><span class="line">    // 1.less语法转换</span><br><span class="line">    // 2.css代码压缩</span><br><span class="line">    gulp.task(&#x27;cssmin&#x27;, () =&gt; &#123;</span><br><span class="line">        // 选择css目录下的所有less文件以及css文件</span><br><span class="line">        gulp.src([&#x27;./src/css/*.less&#x27;, &#x27;./src/css/*.css&#x27;])</span><br><span class="line">            // 将less语法转换为css语法</span><br><span class="line">            .pipe(less())</span><br><span class="line">            // 将css代码进行压缩</span><br><span class="line">            .pipe(csso())</span><br><span class="line">            // 将处理的结果进行输出</span><br><span class="line">            .pipe(gulp.dest(&#x27;dist/css&#x27;))</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
<li><p>gulp-babel ：JavaScript语法转化</p>
</li>
<li><p>gulp-less: less语法转化css语法</p>
</li>
<li><p>gulp-uglify ：压缩混淆JavaScript</p>
</li>
<li><p>gulp-file-include 公共文件包含</p>
</li>
<li><p>browsersync 浏览器实时同步</p>
</li>
<li><pre><code class="js">//任务统一执行

// 构建任务
gulp.task(&#39;default&#39;, [&#39;htmlmin&#39;, &#39;cssmin&#39;, &#39;jsmin&#39;, &#39;copy&#39;]);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### package.json文件</span><br><span class="line"></span><br><span class="line">##### node_modules文件夹的问题</span><br><span class="line"></span><br><span class="line">1. 文件夹以及文件过多过碎，当我们将项目整体拷贝给别人的时候,，传输速度会很慢很慢. </span><br><span class="line"></span><br><span class="line">2. 复杂的模块**依赖关系**需要被记录，确保模块的版本和当前保持一致，否则会导致当前项目运行报错</span><br><span class="line"></span><br><span class="line">##### 依赖关系分为项目依赖和开发依赖</span><br><span class="line"></span><br><span class="line">- 项目依赖是在项目的开发阶段和线上运营阶段，都需要依赖的第三方包</span><br><span class="line">  - 使用`npm install 包名`命令下载的文件会默认被添加到 package.json 文件的 dependencies 字段中</span><br><span class="line">  - 使用`npm install --description`命令可以下载全部的项目依赖</span><br><span class="line">- 开发依赖是在项目的开发阶段需要，线上运营阶段不需要的第三方包，如gulp</span><br><span class="line">- 使用`npm install 包名 --save-dev`命令将包添加到package.json文件的devDependencies字段中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### package.json文件</span><br><span class="line"></span><br><span class="line">项目描述文件，记录了当前项目信息，例如项目名称、版本、作者、github地址、当前项目依赖了哪些第三方模块等。</span><br><span class="line"></span><br><span class="line">使用`npm init -y`命令生成。一般放在项目根目录下</span><br><span class="line"></span><br><span class="line">- 有了这个文件，就不需要再传node_modules文件，使用`npm install`即可**下载全部的依赖**</span><br><span class="line"></span><br><span class="line">- 其中的`scripts`属性可以为长命令起一个别名，用`npm run 别名`</span><br><span class="line"></span><br><span class="line">- ```js</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;nodemon app.js&quot; </span><br><span class="line">      //使用npm run build即可</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h5 id="package-lock-json文件"><a href="#package-lock-json文件" class="headerlink" title="package-lock.json文件"></a>package-lock.json文件</h5><p>记录了模块之间的依赖关系，锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</p>
<p>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</p>
<h2 id="Node-js中的模块加载机制"><a href="#Node-js中的模块加载机制" class="headerlink" title="Node.js中的模块加载机制"></a>Node.js中的模块加载机制</h2><h3 id="当模块拥有路径但没有后缀时"><a href="#当模块拥有路径但没有后缀时" class="headerlink" title="当模块拥有路径但没有后缀时"></a>当模块拥有路径但没有后缀时</h3><blockquote>
<p>require**(**’.&#x2F;find’);</p>
</blockquote>
<p>1.require方法根据模块路径查找模块，如果是完整路径，直接引入模块。</p>
<p>2.如果模块后缀省略，先找同名JS文件,若找不到再找同名JS文件夹</p>
<p>3.如果找到了同名文件夹，找文件夹中的index.js</p>
<p>4.如果文件夹中没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件</p>
<p>5.如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</p>
<h3 id="当模块没有路径且没有后缀时"><a href="#当模块没有路径且没有后缀时" class="headerlink" title="当模块没有路径且没有后缀时"></a>当模块没有路径且没有后缀时</h3><blockquote>
<p>require**(**’find’);</p>
</blockquote>
<p>1.Node.js会假设它是系统模块，若有则执行，若没有</p>
<p>2.Node.js会去node_modules文件夹中</p>
<p>3.首先看是否有同名的JS文件</p>
<p>4.再看是否有同名的文件夹</p>
<p>5.如果是文件夹看里面是否有index.js</p>
<p>6.如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件</p>
<p>7.找不到就报错</p>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery中的Ajax</title>
    <url>/2022/02/08/00-00-00/</url>
    <content><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h2><p>用于发送Ajax请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">    <span class="comment">// 若域名，协议和端口值与当前文件相同，则可以省略</span></span><br><span class="line">     <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span> &#125;,</span><br><span class="line">     <span class="comment">//data: &#x27;name=zhangsan&amp;age=20&#x27;也可</span></span><br><span class="line">     <span class="comment">//json格式和字符串类型的参数最终都会被转化成字符串类型发送</span></span><br><span class="line">     <span class="comment">//如果服务器端要求传递json格式，</span></span><br><span class="line">     <span class="comment">// contentType :&#x27;application/json&#x27; ,并在data中传递json对象字符串</span></span><br><span class="line">     <span class="comment">// JSON.stringify(&#123;name&#125;)</span></span><br><span class="line">     <span class="attr">contentType</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">     <span class="attr">beforeSend</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         <span class="comment">// 可以取消本次请求</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">         <span class="comment">//方法内部会自动把json字符串转换为json对象</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr);</span><br><span class="line">         <span class="comment">// xhr是一个Ajax对象</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>发送jsonp请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.example.com&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定当前发送jsonp请求</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 修改callback参数名称</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;cb&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定函数名称</span></span><br><span class="line">    <span class="attr">jsonCallback</span>: <span class="string">&#x27;fnName&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="serialize方法"><a href="#serialize方法" class="headerlink" title="serialize方法"></a>serialize方法</h3><p>作用：将表单中的数据自动拼接成字符串类型的参数，类似FormData</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> params = $(<span class="string">&#x27;#form&#x27;</span>).<span class="title function_">serialize</span>();</span><br><span class="line"><span class="comment">// name=zhangsan&amp;age=30</span></span><br><span class="line"><span class="comment">// 但是这样不方便获得用户的输入值</span></span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="comment">// 将表单中用户输入的内容转换为对象类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">serializeObject</span> (obj) &#123;</span><br><span class="line">    <span class="comment">// 处理结果对象</span></span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    <span class="comment">// [&#123;name: &#x27;username&#x27;, value: &#x27;用户输入的内容&#x27;&#125;, &#123;name: &#x27;password&#x27;, value: &#x27;123456&#x27;&#125;]</span></span><br><span class="line">    <span class="keyword">var</span> params = obj.<span class="title function_">serializeArray</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环数组 将数组转换为对象类型</span></span><br><span class="line">    $.<span class="title function_">each</span>(params, <span class="keyword">function</span> (<span class="params">index, value</span>) &#123;</span><br><span class="line">        result[value.<span class="property">name</span>] = value.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 将处理的结果返回到函数外部</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="get、-post"><a href="#get、-post" class="headerlink" title="$.get、$.post"></a>$.get、$.post</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://www.example.com&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;, <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;) $.<span class="title function_">post</span>(<span class="string">&#x27;http://www.example.com&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>&#125;, <span class="keyword">function</span> (<span class="params">response</span>) &#123;&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Todo案例"><a href="#Todo案例" class="headerlink" title="Todo案例"></a>Todo案例</h2><h2 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h2><p>只要页面中有Ajax请求被发送，对应的全局事件就会被触发</p>
<p>如 当处于请求状态时，就显示“请求中”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.<span class="title function_">ajaxStart</span>()     <span class="comment">// 当请求开始发送时触发</span></span><br><span class="line">.<span class="title function_">ajaxComplete</span>()  <span class="comment">// 当请求完成时触发</span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;ajaxStart&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="搭配NProgress插件可以很好的展示请求进度"><a href="#搭配NProgress插件可以很好的展示请求进度" class="headerlink" title="搭配NProgress插件可以很好的展示请求进度"></a>搭配NProgress插件可以很好的展示请求进度</h4><p>官宣：纳米级进度条，使用逼真的涓流动画来告诉用户正在发生的事情！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;nprogress.css&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;nprogress.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">start</span>();  <span class="comment">// 进度条开始运动 </span></span><br><span class="line"><span class="title class_">NProgress</span>.<span class="title function_">done</span>();   <span class="comment">// 进度条结束运动</span></span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;ajaxStart&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">on</span>(<span class="string">&#x27;ajaxComplete&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="RESTful风格的API"><a href="#RESTful风格的API" class="headerlink" title="RESTful风格的API"></a>RESTful风格的API</h2><p>RESTful API是一套关于如何设计请求地址的规范</p>
<h3 id="传统请求地址"><a href="#传统请求地址" class="headerlink" title="传统请求地址"></a>传统请求地址</h3><p>语义不明且混乱，且没有统一性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET http://www.example.com/getUsers         // 获取用户列表</span><br><span class="line">GET http://www.example.com/getUser?id=1     // 比如获取某一个用户的信息</span><br><span class="line">POST http://www.example.com/modifyUser      // 修改用户信息</span><br><span class="line">GET http://www.example.com/deleteUser?id=1  // 删除用户信息</span><br></pre></td></tr></table></figure>

<h3 id="RESTful-API-概述"><a href="#RESTful-API-概述" class="headerlink" title="RESTful API 概述"></a>RESTful API 概述</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET：     获取数据</span><br><span class="line">POST：    添加数据</span><br><span class="line">PUT：     更新数据</span><br><span class="line">DELETE：  删除数据</span><br><span class="line"></span><br><span class="line">get: http://www.example.com/users  //获取用户列表数据</span><br><span class="line">post: http://www.example.com/users   //创建(添加)用户数据</span><br><span class="line">get: http://www.example.com/users/1  //获取用户ID为1的用户信息</span><br><span class="line">put: http://www.example.com/users/1   //修改用户ID为1的用户信息</span><br><span class="line">delete: http://www.example.com/users/1  //删除ID为1的用户信息</span><br></pre></td></tr></table></figure>

<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>XML 的全称是 <code>extensible markup language</code>，代表可扩展标记语言，它的作用是传输和存储数据。</p>
<p>XML的关注点在数据的内容上，HTML是用来展示数据的，关注点在数据的外观</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sid</span>&gt;</span>001<span class="tag">&lt;/<span class="name">sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sid</span>&gt;</span>002<span class="tag">&lt;/<span class="name">sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>王二丫<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XML-DOM"><a href="#XML-DOM" class="headerlink" title="XML DOM"></a>XML DOM</h3><p>XML DOM 即 XML 文档对象模型，是 w3c 组织定义的一套操作 XML 文档对象的API。浏览器会将 XML 文档解析成文档对象模型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器端</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/xml&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头,告诉客户端返回的是xml数据</span></span><br><span class="line">	res.<span class="title function_">header</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/xml&#x27;</span>);</span><br><span class="line">	res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;message&gt;&lt;title&gt;消息标题&lt;/title&gt;&lt;content&gt;消息内容&lt;/content&gt;&lt;/message&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xml&#x27;</span>);</span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// xhr.responseXML 获取服务器端返回的xml数据</span></span><br><span class="line">        <span class="keyword">var</span> xmlDocument = xhr.<span class="property">responseXML</span>;</span><br><span class="line">        <span class="keyword">var</span> title = xmlDocument.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span>;</span><br><span class="line">        container.<span class="property">innerHTML</span> = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>react入门</title>
    <url>/2022/02/11/00-00-00/</url>
    <content><![CDATA[<h2 id="ReactJS简介"><a href="#ReactJS简介" class="headerlink" title="ReactJS简介"></a>ReactJS简介</h2><ul>
<li>React 起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。做出来以后，发现这套东西很好用，<strong>就在2013年5月开源了</strong>。</li>
<li>由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</li>
<li>library</li>
<li>Framework</li>
</ul>
<h2 id="前端三大主流框架"><a href="#前端三大主流框架" class="headerlink" title="前端三大主流框架"></a>前端三大主流框架</h2><ul>
<li>Angular.js：出来最早的前端框架，学习曲线比较陡，NG1学起来比较麻烦，NG2开始，进行了一系列的改革，也开始启用组件化了；在NG中，也支持使用TS（TypeScript）进行编程；</li>
<li>Vue.js：最火的一门前端框架，它是中国人开发的，对我我们来说，文档要友好一些；</li>
<li>React.js：最流行的一门框架，因为它的设计很优秀；</li>
<li>windowsPhone 7    7.5   8   10</li>
</ul>
<h2 id="React与vue-js的对比"><a href="#React与vue-js的对比" class="headerlink" title="React与vue.js的对比"></a>React与vue.js的对比</h2><h3 id="组件化方面"><a href="#组件化方面" class="headerlink" title="组件化方面"></a>组件化方面</h3><ol>
<li>什么是模块化：从 <strong>代码</strong> 的角度，去分析问题，把我们编程时候的业务逻辑，分割到不同的模块中来进行开发，这样能够<strong>方便代码的重用</strong>；</li>
<li>什么是组件化：从 <strong>UI</strong> 的角度，去分析问题，把一个页面，拆分为一些互不相干的小组件，随着我们项目的开发，我们手里的组件会越来越多，最后，我们如果要实现一个页面，可能直接把现有的组件拿过来进行拼接，就能快速得到一个完整的页面， 这样方<strong>便了UI元素的重用</strong>；<strong>组件是元素的集合体</strong>；</li>
<li>组件化的好处：</li>
<li>Vue是如何实现组件化的：.vue 组件模板文件，浏览器不识别这样的.vue文件，所以，在运行前，会把 .vue 预先编译成真正的组件；</li>
</ol>
<ul>
<li>template： UI结构</li>
<li>script： 业务逻辑和数据</li>
<li>style： UI的样式</li>
</ul>
<ol start="5">
<li>React如何实现组件化：在React中实现组件化的时候，根本没有 像 .vue 这样的模板文件，而是，直接使用JS代码的形式，去创建任何你想要的组件；</li>
</ol>
<ul>
<li>React中的组件，都是直接在 js 文件中定义的；</li>
<li>React的组件，并没有把一个组件 拆分为 三部分（结构、样式、业务逻辑），而是全部使用JS来实现一个组件的；（也就是说：结构、样式、业务逻辑是混合在JS里面一起编写出来的）</li>
</ul>
<h3 id="开发团队方面"><a href="#开发团队方面" class="headerlink" title="开发团队方面"></a>开发团队方面</h3><ul>
<li>React是由FaceBook前端官方团队进行维护和更新的；因此，React的维护开发团队，技术实力比较雄厚；</li>
<li>Vue：第一版，主要是有作者 尤雨溪 专门进行维护的，当 Vue更新到 2.x 版本后，也有了一个小团队进行相关的维护和开发；</li>
</ul>
<h3 id="社区方面"><a href="#社区方面" class="headerlink" title="社区方面"></a>社区方面</h3><ul>
<li>在社区方面，React由于诞生的较早，所以社区比较强大，一些常见的问题、坑、最优解决方案，文档、博客在社区中都是可以很方便就能找到的；</li>
<li>Vue是近两年才诞生开源出来的，所以，它的社区相对于React来说，要小巧一些，所以，可能有的一些坑，没人踩过；</li>
</ul>
<h3 id="移动APP开发体验方面"><a href="#移动APP开发体验方面" class="headerlink" title="移动APP开发体验方面"></a>移动APP开发体验方面</h3><ul>
<li>Vue，结合 Weex 这门技术，提供了 迁移到 移动端App开发的体验（Weex，目前只是一个 小的玩具， 并没有很成功的 大案例；）</li>
<li>React，结合 ReactNative，也提供了无缝迁移到 移动App的开发体验（RN用的最多，也是最火最流行的）；</li>
</ul>
<h2 id="为什么要学习React"><a href="#为什么要学习React" class="headerlink" title="为什么要学习React"></a>为什么要学习React</h2><ol>
<li>设计很优秀，是基于组件化的，方便我们UI代码的重用；</li>
<li>开发团队实力强悍，不必担心短更的情况；</li>
<li>社区强大，很多问题都能找到对应的解决方案；</li>
<li>提供了无缝转到 ReactNative 上的开发体验，让我们技术能力得到了拓展；增强了我们的核心竞争力</li>
</ol>
<h2 id="React中几个核心的概念"><a href="#React中几个核心的概念" class="headerlink" title="React中几个核心的概念"></a>React中几个核心的概念</h2><h3 id="虚拟DOM（Virtual-Document-Object-Model）"><a href="#虚拟DOM（Virtual-Document-Object-Model）" class="headerlink" title="虚拟DOM（Virtual Document Object Model）"></a>虚拟DOM（Virtual Document Object Model）</h3><ul>
<li>DOM的本质是什么：就是用JS表示的UI元素</li>
<li>DOM和虚拟DOM的区别：<ul>
<li>DOM是由浏览器中的JS提供功能，所以我们只能人为的使用 浏览器提供的固定的API来操作DOM对象；</li>
<li>虚拟DOM：并不是由浏览器提供的，而是我们程序员手动模拟实现的，类似于浏览器中的DOM，但是有着本质的区别；</li>
</ul>
</li>
</ul>
<ul>
<li>为什么要实现虚拟DOM：</li>
<li>什么是React中的虚拟DOM：</li>
<li>虚拟DOM的目的：<br><img src="/images/%E8%99%9A%E6%8B%9FDOM%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87.png" alt="虚拟DOM - 表格排序案例"></li>
</ul>
<h3 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h3><ul>
<li>tree diff:新旧DOM树，逐层对比的方式，就叫做 tree diff,每当我们从前到后，把所有层的节点对比完后，必然能够找到那些 需要被更新的元素；</li>
<li>component diff：在对比每一层的时候，组件之间的对比，叫做 component diff;当对比组件的时候，如果两个组件的类型相同，则暂时认为这个组件不需要被更新，如果组件的类型不同，则立即将旧组件移除，新建一个组件，替换到被移除的位置；</li>
<li>element diff:在组件中，每个元素之间也要进行对比，那么，元素级别的对比，叫做 element diff；</li>
<li>key：key这个属性，可以把 页面上的 DOM节点 和 虚拟DOM中的对象，做一层关联关系；<br><img src="/images/Diff.png" alt="Diff算法图"></li>
</ul>
<h2 id="React项目的创建"><a href="#React项目的创建" class="headerlink" title="React项目的创建"></a>React项目的创建</h2><ol>
<li>运行 <code>cnpm i react react-dom -S</code> 安装包</li>
<li>在项目中导入两个相关的包：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1. 在 React 学习中，需要安装 两个包 react  react-dom</span><br><span class="line">// 1.1 react 这个包，是专门用来创建React组件、组件生命周期等这些东西的；</span><br><span class="line">// 1.2 react-dom 里面主要封装了和 DOM 操作相关的包，比如，要把 组件渲染到页面上</span><br><span class="line">import React from &#x27;react&#x27;</span><br><span class="line">import ReactDOM from &#x27;react-dom&#x27;</span><br></pre></td></tr></table></figure></li>
<li>使用JS的创建虚拟DOM节点：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 2. 在 react 中，如要要创建 DOM 元素了，只能使用 React 提供的 JS API 来创建，不能【直接】像 Vue 中那样，手写 HTML 元素</span><br><span class="line">// React.createElement() 方法，用于创建 虚拟DOM 对象，它接收 3个及以上的参数</span><br><span class="line">// 参数1： 是个字符串类型的参数，表示要创建的元素类型</span><br><span class="line">// 参数2： 是一个属性对象，表示 创建的这个元素上，有哪些属性</span><br><span class="line">// 参数3： 从第三个参数的位置开始，后面可以放好多的虚拟DOM对象，这写参数，表示当前元素的子节点</span><br><span class="line">// &lt;div title=&quot;this is a div&quot; id=&quot;mydiv&quot;&gt;这是一个div&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var myH1 = React.createElement(&#x27;h1&#x27;, null, &#x27;这是一个大大的H1&#x27;)</span><br><span class="line"></span><br><span class="line">var myDiv = React.createElement(&#x27;div&#x27;, &#123; title: &#x27;this is a div&#x27;, id: &#x27;mydiv&#x27; &#125;, &#x27;这是一个div&#x27;, myH1)</span><br></pre></td></tr></table></figure></li>
<li>使用 ReactDOM 把元素渲染到页面指定的容器中：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ReactDOM.render(&#x27;要渲染的虚拟DOM元素&#x27;, &#x27;要渲染到页面上的哪个位置中&#x27;)</span><br><span class="line">// 注意： ReactDOM.render() 方法的第二个参数，和vue不一样，不接受 &quot;#app&quot; 这样的字符串，而是需要传递一个 原生的 DOM 对象</span><br><span class="line">ReactDOM.render(myDiv, document.getElementById(&#x27;app&#x27;))</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><ol>
<li>如要要使用 JSX 语法，必须先运行 <code>cnpm i babel-preset-react -D</code>，然后再 <code>.babelrc</code> 中添加 语法配置；</li>
<li>JSX语法的本质：还是以 React.createElement 的形式来实现的，并没有直接把 用户写的 HTML代码，渲染到页面上；</li>
<li>如果要在 JSX 语法内部，书写 JS 代码了，那么，所有的JS代码，必须写到 {} 内部；</li>
<li>当 编译引擎，在编译JSX代码的时候，如果遇到了<code>&lt;</code>那么就把它当作 HTML代码去编译，如果遇到了 <code>&#123;&#125;</code> 就把 花括号内部的代码当作 普通JS代码去编译；</li>
<li>在{}内部，可以写任何符合JS规范的代码；</li>
<li>在JSX中，如果要为元素添加<code>class</code>属性了，那么，必须写成<code>className</code>，因为 <code>class</code>在ES6中是一个关键字；和<code>class</code>类似，label标签的 <code>for</code> 属性需要替换为 <code>htmlFor</code>.</li>
<li>在JSX创建DOM的时候，所有的节点，必须有唯一的根元素进行包裹；</li>
<li>如果要写注释了，注释必须放到 {} 内部</li>
</ol>
<h2 id="React中：第一种创建组件的方式"><a href="#React中：第一种创建组件的方式" class="headerlink" title="React中：第一种创建组件的方式"></a>React中：第一种创建组件的方式</h2><h2 id="第一种基本组件的创建方式"><a href="#第一种基本组件的创建方式" class="headerlink" title="第一种基本组件的创建方式"></a>第一种基本组件的创建方式</h2><h3 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h3><h3 id="属性扩散"><a href="#属性扩散" class="headerlink" title="属性扩散"></a>属性扩散</h3><h3 id="将组件封装到单独的文件中"><a href="#将组件封装到单独的文件中" class="headerlink" title="将组件封装到单独的文件中"></a>将组件封装到单独的文件中</h3><h2 id="React中：第二种创建组件的方式"><a href="#React中：第二种创建组件的方式" class="headerlink" title="React中：第二种创建组件的方式"></a>React中：第二种创建组件的方式</h2><h3 id="了解ES6中class关键字的使用"><a href="#了解ES6中class关键字的使用" class="headerlink" title="了解ES6中class关键字的使用"></a>了解ES6中class关键字的使用</h3><h3 id="基于class关键字创建组件"><a href="#基于class关键字创建组件" class="headerlink" title="基于class关键字创建组件"></a>基于class关键字创建组件</h3><ul>
<li>使用 class 关键字来创建组件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person extends React.Component&#123;</span><br><span class="line">    // 通过报错提示得知：在class创建的组件中，必须定义一个render函数</span><br><span class="line">    render()&#123;</span><br><span class="line">        // 在render函数中，必须返回一个null或者符合规范的虚拟DOM元素</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;这是用 class 关键字创建的组件！&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="两种创建组件方式的对比"><a href="#两种创建组件方式的对比" class="headerlink" title="两种创建组件方式的对比"></a>两种创建组件方式的对比</h2><ol>
<li>用构造函数创建出来的组件：专业的名字叫做“无状态组件”</li>
<li>用class关键字创建出来的组件：专业的名字叫做“有状态组件”</li>
</ol>
<blockquote>
<p>用构造函数创建出来的组件，和用class创建出来的组件，这两种不同的组件之间的<strong>本质区别就是</strong>：有无state属性！！！<br>有状态组件和无状态组件之间的本质区别就是：有无state属性！</p>
</blockquote>
<h2 id="一个小案例，巩固有状态组件和无状态组件的使用"><a href="#一个小案例，巩固有状态组件和无状态组件的使用" class="headerlink" title="一个小案例，巩固有状态组件和无状态组件的使用"></a>一个小案例，巩固有状态组件和无状态组件的使用</h2><h3 id="通过for循环生成多个组件"><a href="#通过for循环生成多个组件" class="headerlink" title="通过for循环生成多个组件"></a>通过for循环生成多个组件</h3><ol>
<li>数据：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CommentList = [</span><br><span class="line">    &#123; user: &#x27;张三&#x27;, content: &#x27;哈哈，沙发&#x27; &#125;,</span><br><span class="line">    &#123; user: &#x27;张三2&#x27;, content: &#x27;哈哈，板凳&#x27; &#125;,</span><br><span class="line">    &#123; user: &#x27;张三3&#x27;, content: &#x27;哈哈，凉席&#x27; &#125;,</span><br><span class="line">    &#123; user: &#x27;张三4&#x27;, content: &#x27;哈哈，砖头&#x27; &#125;,</span><br><span class="line">    &#123; user: &#x27;张三5&#x27;, content: &#x27;哈哈，楼下山炮&#x27; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="style样式"><a href="#style样式" class="headerlink" title="style样式"></a>style样式</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解React中虚拟DOM的概念<br>理解React中三种Diff算法的概念<br>使用JS中createElement的方式创建虚拟DOM<br>使用ReactDOM.render方法<br>使用JSX语法并理解其本质<br>掌握创建组件的两种方式<br>理解有状态组件和无状态组件的本质区别<br>理解props和state的区别</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="http://www.cnblogs.com/tim100/p/6050514.html">React数据流和组件间的沟通总结</a></li>
<li><a href="https://segmentfault.com/q/1010000005876655/a-1020000005876751">单向数据流和双向绑定各有什么优缺点？</a></li>
<li><a href="https://www.zhihu.com/question/29504639?sort=created">怎么更好的理解虚拟DOM?</a></li>
<li><a href="http://www.css88.com/react/index.html">React中文文档 - 版本较低</a></li>
<li><a href="http://blog.csdn.net/yczz/article/details/49886061">React 源码剖析系列 － 不可思议的 react diff</a></li>
<li><a href="http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&isappinstalled=0">深入浅出React（四）：虚拟DOM Diff算法解析</a></li>
<li><a href="http://www.cocoachina.com/webapp/20150721/12692.html">一看就懂的ReactJs入门教程（精华版）</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/06/css_modules.html">CSS Modules 用法教程</a></li>
<li><a href="http://blog.csdn.net/itzhongzi/article/details/66045880">将MarkDown转换为HTML页面</a></li>
<li><a href="https://jingyan.baidu.com/article/0320e2c1c9cf0e1b87507b26.html">win7命令行 端口占用 查询进程号 杀进程</a></li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>java常见集合</title>
    <url>/2024/01/22/11-00-37/</url>
    <content><![CDATA[<img src="/pic/java常见集合.png" alt="java常见集合" style="zoom:80%;" />

<p>相对的，线程安全则效率低；非线程安全则效率高。</p>
<span id="more"></span>

<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList基于数组实现。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组<strong>变量在栈中</strong>，存储的是<strong>数组对象在堆内存中</strong>的地址值。数组的寻址公式为<code>arr[i] = baseAddress + i * dataTypeSize</code>。</p>
<p>⭐ 为什么数组索引要从0开始，从1开始不行吗？</p>
<p>在根据数组索引获取元素时，会用索引和寻址公式计算元素数据，如果索引从1开始，寻址公式需要增加一次减法操作，对CPU来说多了一次指令(<code>arr[i] = baseAddress + (i-1) * dataTypeSize</code>)，性能不高。</p>
<h3 id="ArrayList源码"><a href="#ArrayList源码" class="headerlink" title="ArrayList源码"></a>ArrayList源码</h3><p>以jdk1.8为样本</p>
<h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><img src="/pic/arraylist成员变量.png" style="zoom:80%;" />

<ul>
<li>元素保存在elementData中</li>
<li><code>EMPTY_ELEMENTDATA</code>和<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>都是空数组，但使用时机不同，以区分数组膨胀的大小。</li>
</ul>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><img src="/pic/arraylist构造方法.png" style="zoom: 67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment"> *如果指定的集合为null，throws NullPointerException。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以无参构造函数创建时，实际上初始化的是一个空数组。</li>
</ul>
<p>⭐ArrayList底层实现原理是什么？</p>
<p>ArrayList底层用动态数组实现。无参构造函数创建时，初始容量为0，第一次添加数据时<strong>初始化</strong>容量为10。扩容时每次扩为原本的1.5倍，每次扩容都要拷贝数组。</p>
<p>⭐ArrayList list&#x3D;new	ArrayList(11)中的list扩容几次?</p>
<p>指定容量大小后，该语句就实例化了一个指定大小的ArrayList，没有扩容的操作。</p>
<p>⭐如何实现数组和List之间的转换?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组转List</span></span><br><span class="line">String[] str = &#123;<span class="string">&quot;11&quot;</span>,<span class="string">&quot;qq&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List转数组</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()]);</span><br></pre></td></tr></table></figure>
<p>数组转List ，使用JDK中java.util.Arrays工具类的asList方法；List转数组，使用List的toArray方法。无参toArray方法返回 Object数组，传入初始化长度的数组对象，则返回该对象数组。</p>
<p>⭐用Arrays.asList转List后，如果修改了数组内容，list受影响吗？List用toArray转数组后，如果修改了List内容，数组受影响吗？</p>
<p>List受影响，因为asList只有对象引用，没有创建新对象，最终都指向同一个内存地址。数组不受影响，因为会把list数据先拷贝到新的数组中。</p>
<p>⭐⭐ArrayList和LinkedList的区别是什么？</p>
<ul>
<li><p>底层：ArrayList用动态数组实现，LinkedList用双向链表实现</p>
</li>
<li><p>效率：</p>
<ul>
<li><p>ArrayList按照下标查询的时间复杂度O(1)， LinkedList不支持下标查询</p>
</li>
<li><p>查找（未知索引）： ArrayList需要遍历，链表也需要链表，时间复杂度都是O(n)</p>
</li>
<li><p>新增和删除：ArrayList尾部插入和删除，时间复杂度是O(1)；其他部分增删需要挪动数组，时间复杂度是O(n)；LinkedList头尾节点增删时间复杂度是O(1)，其他都需要遍历链表，时间复杂度是O(n)</p>
</li>
</ul>
</li>
<li><p>内存空间占用：ArrayList底层是数组，内存连续，节省内存；LinkedList 是双向链表需要存储数据，和两个指针，更占用内存</p>
</li>
<li><p>线程安全：ArrayList和LinkedList都不是线程安全的，如果需要保证线程安全，有两种方案：</p>
<ul>
<li>在方法内使用，局部变量则是线程安全的</li>
<li>使用线程安全的ArrayList和LinkedList</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; syncArrayList = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">List&lt;Object&gt; syncLinkedList = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>又名二叉查找树，有序二叉树或者排序二叉树。</p>
<p>树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。</p>
<p>平均情况下插入，查找，删除的时间复杂度为 <strong>O(logn)</strong> ，但极端情况下会退化成链表，时间复杂度是O(n)</p>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>自平衡的二叉搜索树，红黑树有很多特性和规则，这样设计就是<strong>为了保持树的平衡</strong> ，维护O(logn)的复杂度</p>
<ul>
<li><p>节点要么是红色,要么是黑色</p>
</li>
<li><p>根节点是黑色</p>
</li>
<li><p>叶子节点都是黑色的空节点</p>
</li>
<li><p>红黑树中红色节点的子节点都是黑色</p>
</li>
<li><p>从任一节点到叶子节点的所有路径都包含相同数目的黑色节点</p>
</li>
</ul>
<h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>又叫哈希表，是根据键值直接访问内存值，由数组演化而来。</p>
<ul>
<li><p>散列函数：将键映射为数组下标的函数。</p>
<ul>
<li>散列函数计算得到的散列值必须是大于等于0的正整数，因为hashValue需要作为数组的下标。</li>
<li>如果key1&#x3D;&#x3D;key2，那么经过hash后得到的哈希值也必相同。</li>
<li>如果key1!&#x3D;key2，那么经过hash后得到的哈希值也必不相同。</li>
</ul>
</li>
<li><p>散列冲突</p>
<ul>
<li>链表法<ul>
<li>插入O(1)、查找删除平均下O(1)、链表过长时查询O(n)</li>
</ul>
</li>
<li>线性探测法</li>
</ul>
</li>
</ul>
<p><strong>HashMap会在链表过长时替换为红黑树，除了优化时间复杂度外，还能防止DDos攻击。</strong>(伪造多个key，恶意构造长链表，降低查找性能)</p>
<p>⭐⭐ HashMap实现原理？</p>
<p>底层使用hash表，即数组+链表+红黑树，哈希冲突时先用拉链法，当链表长度大于8且数组长度大于64时，把链表变成红黑树。 获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。</p>
<p>⭐HashMap的jdk1.7和jdk1.8有什么区别？</p>
<p>1.7没有红黑树；1.8增加了红黑树。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>常见属性 </p>
<img src="/pic/hashmap常见属性.png" style="zoom: 80%;" />

<p>HashMap默认构造函数</p>
<img src="/pic/hashmap默认构造函数.png" style="zoom:80%;" />

<ul>
<li><p>HashMap是<strong>懒加载</strong>，在<strong>创建对象时并没有初始化数组</strong></p>
</li>
<li><p>在无参的构造函数中，设置了默认的加载因子是0.75</p>
</li>
</ul>
<p>添加数据流程</p>
<img src="/pic/hashmap添加数据流程.png" style="zoom: 67%;" />

<p>⭐⭐HashMap中put方法的具体流程？</p>
<ol>
<li><p>判断数组table是否为空或为null，否则执行resize()进行扩容（初始化）</p>
</li>
<li><p>根据键值key计算hash值得到数组索引</p>
</li>
<li><p>判断table[i] &#x3D;&#x3D; null，条件成立，直接新建节点添加</p>
</li>
<li><p>如果table[i] !&#x3D; null </p>
<p>4.1 判断table[i] 是否存在相同的key，存在则直接覆盖value (这里put不是添加，是修改)</p>
<p>4.2 判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对</p>
<p>4.3 遍历table[i]，链表的尾部插入数据，然后判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操 作，遍历过程中若发现key已经存在直接覆盖value</p>
</li>
<li><p>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold（数组长度*0.75），如果超过，进行扩容。</p>
</li>
</ol>
<p>resize扩容流程</p>
<img src="/pic/hashmap扩容流程.png" style="zoom:80%;" />

<p>⭐HashMap的扩容机制？</p>
<ul>
<li><p>在添加元素或初始化的时候需要调用resize方法进行扩容，第一次添加数据初始化数组长度为16，以后每次每次扩容都是长度达到了扩容阈值（数组长度 * 0.75）</p>
</li>
<li><p>每次扩容的时候，都是扩容之前容量的2倍； </p>
</li>
<li><p>扩容之后，会新创建一个数组，需要把老数组中的数据挪动到新的数组中</p>
<ul>
<li>没有hash冲突的节点，则直接使用 e.hash &amp; (newCap - 1) 计算新数组的索引位置</li>
<li>如果是红黑树，走红黑树的添加</li>
<li>如果是链表，则需要遍历链表，可能需要拆分链表，判断(e.hash &amp; oldCap)是否为0，该元素的位置要么停留在原始位置，要么移动到原始位置+增加的数组大小这个位置上</li>
</ul>
</li>
</ul>
<p>⭐介绍hashmap的寻址算法</p>
<ul>
<li>计算对象的<code>hashCode()</code></li>
<li>再调用hash方法进行二次哈希，<code>hashcode</code>值右移16位 (数组初始化后长度为16位) 再异或运算，让哈希值分布更均匀，减少哈希碰撞。</li>
<li>最后<code>(capacity - 1) &amp; hash</code> 得到索引 （按位与 代替取模，效率更高）</li>
</ul>
<p>⭐为什么HashMap数组长度设计成2的次幂</p>
<ul>
<li>计算索引时效率更高：如果是2的n次幂可以用位与运算代替取模运算。<code>(capacity - 1) &amp; hash</code><ul>
<li><strong>hash值的范围是-20亿~20亿，要映射到数组必须做取模运算，如果数组的长度是2的n次幂，<code>capacity - 1</code>在二进制中就是全1，可以用与运算 代替 取模。</strong></li>
</ul>
</li>
<li>扩容时重新计算索引效率更高：<code>hash &amp; oldCap == 0</code> 的元素留在原本位置，否则新位置 &#x3D; 旧位置 + oldCap。</li>
</ul>
<p>HashMap数组扩容</p>
<img src="/pic/HashMap数组扩容.png" style="zoom:67%;" />

<p>⭐ hashmap在jdk1.7情况下的多线程死循环问题</p>
<p>1.7没有红黑树，在数组进行扩容的时候，因为链表是头插法，在进行数据迁移的过程中，有可能导致死循环。</p>
<p>首先，jdk1.7在数组扩容时有以下几个特性：</p>
<ul>
<li><p>变量e指向的是需要迁移的对象</p>
</li>
<li><p>变量next指向的是下一个需要迁移的对象</p>
</li>
<li><p>Jdk1.7中的链表采用的<strong>头插法</strong>，所以迁移完后链表元素顺序翻转了</p>
</li>
<li><p>在数据迁移的过程中并没有新的对象产生，只是改变了对象的引用</p>
</li>
</ul>
<p>现在有两个线程，线程1和2的变量e和next都引用了这两个节点</p>
<img src="/pic/过程1.png" style="zoom:67%;" />

<p>假设线程2先扩容，完成后，由于是头插法，链表顺序翻转，但是线程1的e和next的引用没变，还指向原来的节点</p>
<img src="/pic/过程2.png" style="zoom:67%;" />

<p>此时，线程1迁移A节点，同时e &#x3D; next ,即B，next &#x3D; next.next，即A</p>
<img src="/pic/过程3.png" style="zoom:67%;" />

<p>现在迁移当前的e，即B，头插法插入。同时e &#x3D; next ,即A，next &#x3D; next.next，即null</p>
<img src="/pic/过程4.png" style="zoom:67%;" />

<p>e!&#x3D;null，再迁移当前的e，即A。由于都是引用，没有新的对象产生。迁移前<code>B.next = A</code>，迁移后由于头插法，<code>A.next = B</code>，由此数据迁移结束。但是<strong>A和B形成了循环</strong>。那么之后如果要遍历这个链表，就会产生死循环问题。</p>
<p>所以在1.8中，改头插法为尾插法，保持元素的顺序不变，避免死循环问题的产生。</p>
<p>⭐ 为什么HashMap可以存null，HashTable和ConcurrentHashMap不行？</p>
<p>在计算hash值时，HashMap会单独判断是否为null，是则返回0；而HashTable不会判断，如果为null，计算hash值时会抛出空指针异常。</p>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>底层用hash表实现，1.7之前是分段的数组+链表，1.8开始是数组+链表+红黑树。</p>
<p>是线程安全的HashMap，线程安全主要通过对Node节点(jdk1.8) 或segement(jdk1.7) 加锁来保证数据更新的安全性</p>
<h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>ArrayList源码中，元素存放在elementData变量，这个变量被transient修饰，用来表示一个域不是该对象序行化的一部分，当一个对象被序行化的时候，transient修饰的变量的值是不包括在序行化的表示中的。</p>
<p>但是如果不序列化，那反序列化后的ArrayList岂不是丢失了原先的元素？</p>
<p>在ArrayList中有两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>;</span><br></pre></td></tr></table></figure>

<p>ArrayList在序列化的时候会调用writeObject，直接将size和element写入ObjectOutputStream；反序列化时调用readObject，从ObjectInputStream获取size和element，再恢复到elementData。</p>
<p>为什么不直接用elementData来序列化，而采用上诉的方式来实现序列化呢？原因在于elementData是一个缓存数组，它通常会预留一些容量，等容量不足时再扩充容量，那么有些空间可能就没有实际存储元素，采用上诉的方式来实现序列化时，就可以保证只序列化实际存储的那些元素，而不是整个数组，从而节省空间和时间。</p>
<h3 id="fail-fast"><a href="#fail-fast" class="headerlink" title="fail-fast"></a>fail-fast</h3><p>fail-fast是一种错误检测机制，一旦检测到可能发生错误，就立马抛出异常，程序不继续往下执行。</p>
<p>在阿里巴巴开发手册中写道，不要在foreach或增强for循环里对集合元素进行<code>remove/add</code>，增删需要使用Iterator。</p>
<p>其实foreach或增强for循环语法<strong>底层还是依赖了Iterator</strong>去做遍历，但是增删元素时使用的是自己的方法。</p>
<p>以ArrayList为例，<code>modCount</code>是一个成员遍历，代表集合实际被修改的次数；<code>expectedModCount</code>是ArrayList中的一个内部类<code>Iterator</code>的成员遍历，代表迭代器预期该集合被修改的次数。在增删元素时，只修改了<code>modCount</code>，这就<strong>导致<code>modCount</code>和<code>expectedModCount</code>不相等</strong>。每次iterator遍历会调用next方法，如果不相等，会抛出<code>ConcurrentModificationException</code>异常。</p>
<h4 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h4><ul>
<li>普通for循环</li>
<li>直接使用Iterator</li>
<li>流式操作，filter</li>
</ul>
]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>npm包、全局数据共享、分包</title>
    <url>/2022/04/28/00-00-00/</url>
    <content><![CDATA[<h2 id="使用npm包"><a href="#使用npm包" class="headerlink" title="使用npm包"></a>使用npm包</h2><h3 id="对npm的支持和限制"><a href="#对npm的支持和限制" class="headerlink" title="对npm的支持和限制"></a>对npm的支持和限制</h3><p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用 npm 包有如下 3 个限制，因此能供小程序使用的包不多</p>
<ul>
<li>不支持依赖于 Node.js 内置库的包</li>
<li>不支持依赖于浏览器内置对象的包</li>
<li>不支持依赖于 C++ 插件的包</li>
</ul>
<h3 id="Vant-Weapp"><a href="#Vant-Weapp" class="headerlink" title="Vant Weapp"></a>Vant Weapp</h3><p>Vant Weapp 是有赞前端团队开源的一套小程序 UI 组件库，助力开发者快速搭建小程序应用。它所使用的是 MIT 开源许可协议，对商业使用比较友好。</p>
<p>新版有改动，阅读官方文档地址 <a href="https://youzan.github.io/vant-weapp">https://youzan.github.io/vant-weapp</a></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在安装外部包之前，需要先安装包管理配置文件<code>npm init -y</code></p>
<p>在小程序项目中，安装 Vant 组件库主要分为如下 3 步：</p>
<ul>
<li>通过 npm 安装（建议指定版本为@1.3.3）<code>npm i @vant/weapp@1.3.3 -S --production</code></li>
<li>构建 npm 包 </li>
<li>修改 app.json</li>
</ul>
<p>可以参考官方教程： <a href="https://youzan.github.io/vant-weapp/#/quickstart#an-zhuang">https://youzan.github.io/vant-weapp/#/quickstart#an-zhuang</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>同自定义组件的引入方法一致，有全局引入和局部引入。</p>
<h4 id="补充：CSS变量"><a href="#补充：CSS变量" class="headerlink" title="补充：CSS变量"></a>补充：CSS变量</h4><p>复杂的网站都会有大量的CSS代码，通常也会有许多重复的值。举个例子，同样一个颜色值可能在成千上百个地方被使用到，如果这个值发生了变化，需要全局搜索并且一个一个替换。</p>
<p>自定义属性在某个地方存储一个值，然后在其他许多地方引用它。另一个好处是语义化的标识。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义css变量</span></span><br><span class="line">element &#123; <span class="comment">// 自定义属性</span></span><br><span class="line">  --main-bg-<span class="attr">color</span>: brown; <span class="comment">// 属性名以--开头</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用css变量</span></span><br><span class="line">element &#123; <span class="comment">// 通过var来使用css变量</span></span><br><span class="line">  background-<span class="attr">color</span>: <span class="title function_">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line">html &#123; <span class="comment">// 根节点中定义，其他节点都可以访问</span></span><br><span class="line">  --main-bg-<span class="attr">color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">one</span> &#123; <span class="comment">// </span></span><br><span class="line">  <span class="attr">color</span>: white;</span><br><span class="line">  background-<span class="attr">color</span>: <span class="title function_">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于 CSS 变量的知识，请参考 MDN 文档： <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties</a></p>
<h4 id="定制全局主题样式"><a href="#定制全局主题样式" class="headerlink" title="定制全局主题样式"></a>定制全局主题样式</h4><p>Vant Weapp 使用 CSS 变量来实现定制主题。 </p>
<p>在 <code>app.wxss</code> 中，写入 CSS 变量，即可对全局生效</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">page &#123; <span class="comment">/*为了让其全局生效，使用page根节点*/</span></span><br><span class="line">  <span class="comment">/*定制变量即可生效，自动引用*/</span></span><br><span class="line">  <span class="attr">--button-danger-background-color</span>: <span class="number">#C00000</span>;</span><br><span class="line">  <span class="attr">--button-danger-border-color</span>: <span class="number">#D60000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有可用的颜色变量，可参考 Vant 官方提供的配置文件： <a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less">https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less</a></p>
<p>如果想改变vant组件库中的样式，需要改变样式隔离节点为shared</p>
<h3 id="API-Promise化"><a href="#API-Promise化" class="headerlink" title="API Promise化"></a>API Promise化</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>小程序官方提供的异步 API 都是基于回调函数实现的，例如之前学过的get和post请求，如果多个API之间需要先后关系，很容易造成回调地狱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123; &#125;,</span><br><span class="line">    <span class="attr">success</span>:<span class="function">()=&gt;</span>&#123; &#125;,</span><br><span class="line">    <span class="attr">fail</span>:<span class="function">()=&gt;</span>&#123; &#125;,</span><br><span class="line">    <span class="attr">complete</span>:<span class="function">()=&gt;</span>&#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>API Promise化，指的是通过额外的配置，将官方提供的、基于回调函数的异步 API，升级改造为基于 Promise 的异步 API，从而提高代码的可读性、维护性，避免回调地狱的问题。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>在小程序中，实现 API Promise 化主要依赖于 <code>miniprogram-api-promise</code> 包</p>
<ul>
<li><code>npm install --save miniprogram-api-promise@1.0.4</code></li>
<li>工具-&gt;构建   构建npm</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="comment">//app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; promisifyAll &#125; <span class="keyword">from</span> <span class="string">&#x27;miniprogram-api-promise&#x27;</span></span><br><span class="line"><span class="comment">// wxp和wx.p指向同一个空对象</span></span><br><span class="line"><span class="keyword">const</span> wxp = wx.<span class="property">p</span> = &#123;&#125;</span><br><span class="line"><span class="comment">// promisify all wx&#x27;s api</span></span><br><span class="line"><span class="title function_">promisifyAll</span>(wx, wxp) </span><br><span class="line"><span class="comment">// 将wx这个顶级对象上所有异步API进行promise化，并挂载到wxp这个空对象上</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// wx.p.request的返回对象是promise，使用await优化</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解构返回结果，将其中的data重命名为res</span></span><br><span class="line">  <span class="keyword">const</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> wx.<span class="property">p</span>.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="comment">// const res = await wx.p.request(&#123;&#125;),通过res.data也能拿到后端数据</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h2><p>全局数据共享（又叫做：状态管理）是为了解决组件之间数据共享的问题。</p>
<p>开发中常用的全局数据共享方案有：Vuex、Redux、MobX 等。</p>
<p>在小程序中，可使用<code> mobx-miniprogram</code> 配合 <code>mobx-miniprogram-bindings</code> 实现全局数据共享。</p>
<ul>
<li><code>mobx-miniprogram</code> 用来创建 Store 实例对象</li>
<li><code>mobx-miniprogram-bindings</code> 用来把 Store 中的共享数据或方法，绑定到组件或页面中使用</li>
</ul>
<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p><code>npm install --save mobx-miniprogram@4.13.2 mobx-miniprogram-bindings@1.2.1</code></p>
<p>注意：MobX 相关的包安装完毕之后，记得删除 miniprogram_npm 目录后，重新构建 npm。</p>
<h3 id="创建MobX的store实例"><a href="#创建MobX的store实例" class="headerlink" title="创建MobX的store实例"></a>创建MobX的store实例</h3><p>可以在根目录创建一个store文件夹用于存储所有全局数据共享相关的方法。在该文件夹下新建<code>store.js</code>文件，用于创建store实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store.js，专门来创建 Store 的实例对象</span></span><br><span class="line"><span class="comment">// observable 用于创建实例，action函数用于修改store中的数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过observable方法创建实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">observable</span>(&#123;</span><br><span class="line">  <span class="comment">// 数据字段</span></span><br><span class="line">  <span class="attr">numA</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">numB</span>: <span class="number">2</span>,</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 计算属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">sum</span>() &#123; <span class="comment">// 用get标识，代表只能获取，不能修改</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">numA</span> + <span class="variable language_">this</span>.<span class="property">numB</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// actions函数，专门修改store中数据的值，外界修改数据字段的唯一方法就是调用这些函数</span></span><br><span class="line">  <span class="comment">// 用action方法包裹函数</span></span><br><span class="line">  <span class="attr">updateNum1</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numA</span> += step</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">updateNum2</span>: <span class="title function_">action</span>(<span class="keyword">function</span> (<span class="params">step</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numB</span> += step</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="绑定store到页面中使用"><a href="#绑定store到页面中使用" class="headerlink" title="绑定store到页面中使用"></a>绑定store到页面中使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="comment">// pages/message/message.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStoreBindings &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram-bindings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 将返回值挂载到this页面上，作为自定义属性storeBindings</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span> = <span class="title function_">createStoreBindings</span>(<span class="variable language_">this</span>, &#123;</span><br><span class="line">      store,</span><br><span class="line">      <span class="comment">// 将需要用到的字段和方法绑定到该页面</span></span><br><span class="line">      <span class="attr">fields</span>: [<span class="string">&#x27;numA&#x27;</span>, <span class="string">&#x27;numB&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>],</span><br><span class="line">      <span class="attr">actions</span>: [<span class="string">&#x27;updateNum1&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">storeBindings</span>.<span class="title function_">detroyStoreBindings</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--pages/message/message.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;numA&#125;&#125; + &#123;&#123;numB&#125;&#125; = &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--传递step参数为1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler1&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;&#123;&#123;1&#125;&#125;&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler1&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// pages/message/message.js</span><br><span class="line">btnHandler1(e) &#123;</span><br><span class="line">  this.updateNum1(e.target.dataset.step)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="绑定store到组件中使用"><a href="#绑定store到组件中使用" class="headerlink" title="绑定store到组件中使用"></a>绑定store到组件中使用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定</span></span><br><span class="line"><span class="comment">// components/numbers/numbers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeBindingsBehavior &#125; <span class="keyword">from</span> <span class="string">&#x27;mobx-miniprogram-bindings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;../../store/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [storeBindingsBehavior],</span><br><span class="line">  <span class="attr">storeBindings</span>: &#123;</span><br><span class="line">    <span class="comment">// 数据源</span></span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">fields</span>: &#123;</span><br><span class="line">      <span class="comment">// 自定义名称：&#x27;store中的名称&#x27;</span></span><br><span class="line">      <span class="attr">numA</span>: <span class="string">&#x27;numA&#x27;</span>,</span><br><span class="line">      <span class="attr">numB</span>: <span class="string">&#x27;numB&#x27;</span>,</span><br><span class="line">      <span class="attr">sum</span>: <span class="string">&#x27;sum&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">      <span class="attr">updateNum2</span>: <span class="string">&#x27;updateNum2&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用同页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;numA&#125;&#125; + &#123;&#123;numB&#125;&#125; = &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler2&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;&#123;&#123;1&#125;&#125;&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">bindtap</span>=<span class="string">&quot;btnHandler2&quot;</span> <span class="attr">data-step</span>=<span class="string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  /**组件的方法列表*/</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btnHandler2(e) &#123;</span><br><span class="line">      this.updateNum2(e.target.dataset.step)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>分包指的是把一个完整的小程序项目，<strong>按照需求划分为不同的子包</strong>，在构建时打包成不同的分包，用户在使用时按需进行加载。</p>
<p>对小程序进行分包的好处主要有以下两点</p>
<ul>
<li>可以优化小程序首次启动的下载时间</li>
<li>在多团队共同开发时可以更好的解耦协作</li>
</ul>
<h3 id="分包前后项目的构成"><a href="#分包前后项目的构成" class="headerlink" title="分包前后项目的构成"></a>分包前后项目的构成</h3><p>分包前，小程序项目中所有的页面和资源都被打包到了一起，导致整个项目体积过大，影响小程序首次启动的 下载时间。</p>
<p>分包后，小程序项目由 1 个主包 + 多个分包组成</p>
<ul>
<li>主包：一般只包含项目的启动页面或 TabBar 页面、以及所有分包都需要用到的一些公共资源 </li>
<li>分包：只包含和当前分包有关的页面和私有资源</li>
</ul>
<h3 id="分包的加载规则"><a href="#分包的加载规则" class="headerlink" title="分包的加载规则"></a>分包的加载规则</h3><p>在小程序启动时，默认会下载主包并启动主包内页面</p>
<ul>
<li>tabBar 页面需要放到主包中</li>
</ul>
<p>当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示</p>
<ul>
<li>非 tabBar 页面可以按照功能的不同，划分为不同的分包之后，进行按需下载</li>
</ul>
<h3 id="分包的体积限制"><a href="#分包的体积限制" class="headerlink" title="分包的体积限制"></a>分包的体积限制</h3><p>目前，小程序分包的大小有以下两个限制</p>
<ul>
<li>整个小程序所有分包大小不超过 16M（主包 + 所有分包） </li>
<li>单个分包&#x2F;主包大小不能超过 2M</li>
</ul>
<h3 id="使用分包"><a href="#使用分包" class="headerlink" title="使用分包"></a>使用分包</h3><p>在<code>app.json</code>中配置完后会自动生成文件</p>
<blockquote>
<p>—-app.js</p>
<p>—-app.json</p>
<p>—-app.wxss</p>
<p>—-pages   &#x2F;&#x2F; 主包的所有页面</p>
<p>​     |—-index</p>
<p>​     |—-logs</p>
<p>—-packageA    &#x2F;&#x2F; 第一个分包</p>
<p>​     |—-pages    &#x2F;&#x2F; 第一个分包的所有页面</p>
<p>​           |—-A</p>
<p>​           |—-B</p>
<p>—-packageA    &#x2F;&#x2F; 第二个分包</p>
<p>​     |—-pages    &#x2F;&#x2F; 第二个分包的所有页面</p>
<p>​           |—-X</p>
<p>​           |—-Y</p>
<p>—-utils</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.json</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 主包的所有页面</span></span><br><span class="line">    <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/message/message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;pages/contact/contact&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subpackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 声明分包的结构</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packageA&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p1&quot;</span><span class="punctuation">,</span>  <span class="comment">// 分包的别名</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/cat/cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pages/dog/dog&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packageB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;pages/apple/apple&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>在开发者工具-&gt;详情-&gt;基本信息-&gt;本地代码 中可以查看分包和主包的体积</p>
<h4 id="打包原则"><a href="#打包原则" class="headerlink" title="打包原则"></a>打包原则</h4><ul>
<li>小程序会按 subpackages 的配置进行分包，subpackages 之外的目录将被打包到主包中</li>
<li>主包也可以有自己的 pages（即最外层的 pages 字段）</li>
<li>tabBar 页面必须在主包内</li>
<li>分包之间不能互相嵌套，只能是平级的关系</li>
</ul>
<h4 id="引用原则"><a href="#引用原则" class="headerlink" title="引用原则"></a>引用原则</h4><ul>
<li>主包无法引用分包内的私有资源</li>
<li>分包之间不能相互引用私有资源</li>
<li>分包可以引用主包内的公共资源</li>
</ul>
<h3 id="独立分包"><a href="#独立分包" class="headerlink" title="独立分包"></a>独立分包</h3><p>独立分包本质上也是分包，只不过它比较特殊，可以独立于主包和其他分包而单独运行。</p>
<p>开发者可以按需，将某些具有一定<strong>功能独立性的页面</strong>配置到独立分包中。</p>
<ul>
<li>当小程序从普通的分包页面启动时，需要首先下载主包，如果用户并不需要使用主包的资源就会造成资源浪费</li>
<li>而独立分包不依赖主包即可运行，可以很大程度上提升分包页面的启动速度 </li>
<li>一个小程序中可以有多个独立分包。</li>
</ul>
<h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><p>独立分包的配置和普通分包的差别只在于多了一个节点</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;subpackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkgA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;pages/cat/cat&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;pages/dog/dog&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pkgB&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;p2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;pages/apple/apple&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 独立分包</span></span><br><span class="line">    <span class="attr">&quot;independent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h4 id="引用原则-1"><a href="#引用原则-1" class="headerlink" title="引用原则"></a>引用原则</h4><p>独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！</p>
<ul>
<li>主包无法引用独立分包内的私有资源</li>
<li>独立分包之间，不能相互引用私有资源</li>
<li>独立分包和普通分包之间，不能相互引用私有资源</li>
<li><strong>特别注意</strong>：独立分包中不能引用主包内的公共资源</li>
</ul>
<h3 id="分包预下载"><a href="#分包预下载" class="headerlink" title="分包预下载"></a>分包预下载</h3><p>在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包 页面时的启动速度。</p>
<p>同一个分包中的页面享有共同的预下载大小限额 2M</p>
<p>预下载分包的行为，会在<strong>进入指定的页面时触发</strong>。在 app.json 中，使用 <code>preloadRule</code> 节点定义分包的预下载规则</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;preloadRule&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 分包预下载的规则</span></span><br><span class="line">		<span class="attr">&quot;pages/contact/contact&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="comment">// 触发预下载的页面路径</span></span><br><span class="line">            <span class="comment">// 在指定网络下预下载，可选 all 或 wifi</span></span><br><span class="line">			<span class="attr">&quot;network&quot;</span><span class="punctuation">:</span><span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// 预下载哪些分包，可以用root或name指定</span></span><br><span class="line">			<span class="attr">&quot;packages&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;pkgA&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="案例-自定义tabBar"><a href="#案例-自定义tabBar" class="headerlink" title="案例-自定义tabBar"></a>案例-自定义tabBar</h2><p>微信小程序官方文档<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html</a></p>
<p>自定义 tabBar 分为 3 大步骤，分别是：</p>
<ul>
<li><p>配置信息</p>
<p>比起内置的tabBar，只需要在<code>app.json</code>中的tabBar节点增加<code>custom:true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tabBar&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;custom&quot;</span>: <span class="literal">true</span>, <span class="comment">// 只多了这一行</span></span><br><span class="line">    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;selectedColor&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;backgroundColor&quot;</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;list&quot;</span>: [&#123;</span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;page/component/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;组件&quot;</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&quot;pagePath&quot;</span>: <span class="string">&quot;page/API/index&quot;</span>,</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;接口&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 tabBar 代码文件</p>
<p>在项目根目录创建<code>custom-tab-bar</code>文件夹，创建index组件，名字不能变</p>
<p>小程序会把这个目录下的index组件自动识别为tabBar并渲染</p>
</li>
<li><p>编写 tabBar 代码</p>
<p>用自定义组件的方式编写即可，该自定义组件完全接管 tabBar 的渲染。另外，自定义组件新增 <code>getTabBar</code> 接口，可获取当前页面下的自定义 tabBar 组件实例。</p>
<p>推荐使用vant来创建自定义tabBar，其中的active变量建议使用全局数据共享，否则会有闪烁问题</p>
</li>
</ul>
]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>java虚拟机</title>
    <url>/2024/02/05/11-00-37/</url>
    <content><![CDATA[<h2 id="JVM介绍"><a href="#JVM介绍" class="headerlink" title="JVM介绍"></a>JVM介绍</h2><p>Java Virtual Machine ,  是Java程序的运行环境。可以实现一次编写，处处运行。</p>
<p>Java程序执行的完整流程如下图所示：</p>
<span id="more"></span>



<img src="/pic/java程序执行.png" alt="image-20240203213438879" style="zoom: 50%;" />



<h2 id="jvm组成"><a href="#jvm组成" class="headerlink" title="jvm组成"></a>jvm组成</h2><img src="/pic/jvm组成.png" alt="image-20240203214504562" style="zoom: 67%;" />

<p><strong>线程私有的：</strong></p>
<ul>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
</ul>
<p><strong>线程共享的：</strong></p>
<ul>
<li>堆</li>
<li>方法区</li>
<li>直接内存 (非运行时数据区的一部分)</li>
</ul>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器：线程私有的，因此是线程安全的，每个线程都有自己的程序计数器。内部保存字节码的行号。用于记录<strong>正在执行的字节码指令的地址</strong>。</p>
<h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul>
<li>每个<strong>线程</strong>运行时所需要的内存，称为虚拟机栈，先进后出</li>
<li>每个栈由多个栈帧（frame）组成，对应着每次方法调用时所占用的内存</li>
<li>每个线程只能有一个活动栈帧 ，对应着当前正在执行的那个方法</li>
</ul>
<p>⭐垃圾回收是否涉及栈内存？</p>
<p>垃圾回收主要是堆内存，当栈帧出栈后，内存会自动释放</p>
<p>⭐栈内存分配越大越好吗？</p>
<p>默认的栈内存通常是1024K。栈内存大会导致线程数变少，比如机器总内存为512M，则能活动的线程就是512个，如果栈内存是2048K，能活动的线程就会减半。</p>
<p>⭐方法内的局部变量是线程安全的吗？</p>
<ul>
<li>如果方法内局部变量没有逃离方法的作用范围，它就是线程安全的。因为每个线程都有各自的虚拟机栈，相互独立。</li>
<li>如果局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全。</li>
</ul>
<img src="/pic/局部变量线程安全.png"  />

<p>⭐栈内存溢出情况</p>
<ul>
<li>栈帧过多导致内存溢出，比如递归深度太深</li>
<li>栈帧过大导致内存溢出</li>
</ul>
<p>⭐堆栈的区别？</p>
<ul>
<li>栈内存一般存储局部变量和方法调用，堆内存存储Java对象和数组；堆会垃圾回收，栈不会</li>
<li>栈内存是线程私有的；堆内存是共享的</li>
<li>栈空间不足：StackOverFlowError；堆空间不足：OutOfMemoryError</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>线程共享的区域，保存<strong>对象实例，数组</strong>等，当堆中没有内存空间可以分配，也无法再扩展时，就抛出<code>OutOfMemoryError</code>异常(OOM异常)。</p>
<p>堆可以被分为年轻代和老年代。</p>
<ul>
<li>年轻代被划分为三部分，Eden区和两个大小严格相同的Survivor区，根据JVM的策略，在经过几次垃圾收集后，仍存活于Survivor的对象将被移动到老年代区间。</li>
<li>老年代主要保存生命周期长的对象，一般是一些老的对象</li>
<li>在jdk1.7中，还有一个永久代，也叫方法区，存储了类信息、静态变量、常量、编译后的代码。而1.8把永久代移除出堆，放在本地内存中成为元空间，为了防止程序后期加载越来越多的类导致堆内存溢出。</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>主要存储类的信息和运行时常量池，各<strong>线程共享</strong>。在虚拟机启动的时候创建，关闭虚拟机时释放。</p>
<h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息。</p>
<h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>常量池是 *.class 文件中的，当该<strong>类被加载</strong>，它的<strong>常量池信息就会放入运行时常量池</strong>，并把里面的<strong>符号地址变为真实地址</strong>。</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>是虚拟机的系统内存，常见于 NIO 操作时，用于<strong>数据缓冲区</strong>，分配回收成本较高，但读写性能高，不受jvm内存回收管理。</p>
<p>比如在读写文件时，传统IO需要先将磁盘文件读到系统缓冲区，再读到java缓冲区，然后java程序才能读写。</p>
<img src="/pic/传统IO.png" style="zoom:67%;" />

<p>而NIO会开辟直接内存区，系统可以读，java程序也可以直接读。</p>
<img src="/pic/NIO.png" style="zoom:67%;" />

<h3 id="NIO、BIO、AIO"><a href="#NIO、BIO、AIO" class="headerlink" title="NIO、BIO、AIO"></a>NIO、BIO、AIO</h3><ul>
<li><p>NIO是一种基于事件驱动的I&#x2F;O模型，通过使用通道（Channel）和缓冲区（Buffer）来实现非阻塞I&#x2F;O操作。在NIO中，一个线程可以处理多个I&#x2F;O操作，通过选择器（Selector）来监听多个通道的事件，当通道发生事件时，通过事件驱动模式来处理数据。</p>
</li>
<li><p>NIO提供了更高的并发性和性能，适用于处理大量的并发连接和高吞吐量的场景，例如网络服务器、聊天室等。</p>
</li>
<li><p>BIO是最传统的I&#x2F;O模型，也称为同步阻塞I&#x2F;O模型。在BIO中，每个I&#x2F;O操作都会阻塞当前线程，直到操作完成才会返回结果。这意味着当有大量的并发请求时，每个请求都需要创建一个新的线程来处理，会导致线程数量的急剧增加，从而降低了系统的性能和吞吐量。</p>
</li>
<li><p>BIO适用于连接数较少、并发量不高的情况，例如传统的Socket通信，简单的客户端-服务器应用等。</p>
</li>
<li><p>AIO是一种更高级别的I&#x2F;O模型，也称为异步非阻塞I&#x2F;O模型。在AIO中，I&#x2F;O操作是异步执行的，即操作被提交后会立即返回，不会阻塞当前线程，当操作完成时会通知应用程序。</p>
</li>
<li><p>AIO适用于处理大量的并发连接和高并发I&#x2F;O操作的场景，例如高性能的网络服务器、文件IO等，但是AIO通常需要操作系统的支持，因此在某些平台上可能不太容易实现。</p>
</li>
</ul>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器（ClassLoader）的主要作用就是将<strong>字节码文件加载到JVM中</strong>，从而让Java程序能够启动起来。</p>
<p>JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。</p>
<p>对于已经加载的类会被放在 <code>ClassLoader</code> 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，<strong>相同二进制名称的类只会被加载一次</strong>。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p><strong>启动类加载器(BootStrap ClassLoader)：</strong></p>
<p>该类并不继承ClassLoader类，其是由C++编写实现。用于加载<strong>JAVA_HOME&#x2F;jre&#x2F;lib</strong>目录下的类库。</p>
</li>
<li><p><strong>扩展类加载器(ExtClassLoader)：</strong></p>
<p>该类是ClassLoader的子类，主要加载<strong>JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</strong>目录中的类库。</p>
</li>
<li><p><strong>应用类加载器(AppClassLoader)：</strong></p>
<p>该类是ClassLoader的子类，主要用于加载<strong>classPath</strong>下的类，也就是加载开发者自己编写的Java类。</p>
</li>
<li><p><strong>自定义类加载器：</strong></p>
<p>开发者自定义类继承ClassLoader，实现自定义类加载规则。</p>
</li>
</ul>
<p>类加载器的体系并不是“继承”体系，而是<strong>委派体系</strong>。</p>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p>类加载器在接到加载类的请求时，它首先不会自己尝试去加载这个类，而是把这个请求任务委托给父类加载器去完成，依次递归，如果父类加载器可以完成类加载任务，就返回成功；只有父类加载器无法完成此加载任务时，才由下一级去加载。 </p>
<img src="/pic/双亲委派机制.png" style="zoom:80%;" />

<p>⭐为什么采用双亲委派机制？</p>
<ul>
<li>通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。比如String类，可以由启动类加载器加载到，就无需应用类加载器去随意加载。</li>
<li>为了安全，保证类库API不会被修改。</li>
</ul>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>在Java语言中，有自动的垃圾回收机制，也就是GC(Garbage Collection)。</p>
<p>有了垃圾回收机制后，程序员只需要关心内存的申请即可，内存的释放由系统自动识别完成。</p>
<p>在进行垃圾回收时，不同的对象引用类型，GC会采用不同的回收时机。</p>
<h3 id="内存分配和回收原则"><a href="#内存分配和回收原则" class="headerlink" title="内存分配和回收原则"></a>内存分配和回收原则</h3><ul>
<li><p>对象优先在Eden区分配</p>
</li>
<li><p>大对象直接进入老年代</p>
</li>
<li><p>长期存活的对象进入老年代</p>
<ul>
<li>动态年龄计算。对象年龄计数器，每经过一次GC就+1</li>
</ul>
</li>
</ul>
<p>⭐对象何时可以被垃圾器回收？</p>
<p>如果一个或多个对象<strong>没有任何的引用</strong>指向它了，那么这个对象现在就是垃圾，如果定位了垃圾，则有可能会被垃圾回收器回收。</p>
<p>要定位什么是垃圾，有两种方式来确定，第一个是引用计数法，第二个是可达性分析算法。</p>
<h3 id="定位垃圾"><a href="#定位垃圾" class="headerlink" title="定位垃圾"></a>定位垃圾</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>每个对象都有一个计数器，一个对象被引用了一次，则递增一次引用次数，如果这个对象的引用次数为0，代表这个对象可回收。但是如果对象间出现了循环引用，会有问题。</p>
<img src="/pic/引用计数法.png" style="zoom: 67%;" />

<p>虽然a和b都为null，但是由于a和b存在循环引用，互相引用了对方，这样a和b永远都不会被回收。会<strong>引发内存泄漏</strong>，现在都用可达性分析法。</p>
<h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><p>现在的虚拟机采用的都是通过可达性分析算法来确定哪些内容是垃圾。存在一个根节点【GC Roots】，引出它下面指向的下一个节点，再以下一个节点节点开始找出它下面的节点，依次往下类推。直到所有的节点全部遍历完毕。</p>
<p>根对象是那些肯定不能当做垃圾回收的对象，比如局部变量，静态方法，静态变量，类信息</p>
<p>核心是：判断某对象是否与根对象有直接或间接的引用，如果没有被引用，则可以当做垃圾回收。</p>
<h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><h4 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h4><p>标记清除算法，是将垃圾回收分为2个阶段，分别是<strong>标记和清除</strong>。</p>
<p>1.根据可达性分析算法得出的垃圾进行标记</p>
<p>2.对这些标记为可回收的内容进行垃圾回收</p>
<p>缺点：通过标记清除算法清理出来的内存，<strong>碎片化</strong>较为严重，因为被回收的对象可能存在于内存的各个角落，所以清理出来的内存是不连贯的</p>
<img src="/pic/标记清除算法.png" style="zoom: 50%;" />

<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p><strong>将原有的内存空间一分为二，每次只用其中的一块</strong>，在垃圾回收时，将正在使用的对象复制到另一个内存空间中，然后将该内存空间清空，交换两个内存的角色，完成垃圾的回收。</p>
<img src="/pic/复制算法.png" style="zoom:50%;" />

<p>缺点：分配的2块内存空间，在同一个时刻，只能使用一半，<strong>内存使用率较低</strong>。</p>
<h4 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h4><p>在标记清除算法的基础上，将存活对象都向内存另一端移动，然后清理边界以外的垃圾，从而解决了碎片化的问题。</p>
<img src="/pic/标记整理算法.png" style="zoom:50%;" />

<p>缺点：效率受影响。</p>
<h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>为什么HotSpot要分新生代和老年代？</p>
<ul>
<li>分代回收策略的核心是根据不同区域的特点对症下药。</li>
<li>比如在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出<strong>少量对象的复制成本</strong>就可以完成每次垃圾收集。而老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集。</li>
</ul>
<p>⭐MinorGC、 Mixed GC 、 FullGC的区别是什么？</p>
<ul>
<li><p>MinorGC【young GC】发生在新生代的垃圾回收，暂停时间短（STW）</p>
</li>
<li><p>Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有</p>
</li>
<li><p>FullGC： 新生代 + 老年代完整垃圾回收，暂停时间长（STW），应尽力避免？</p>
</li>
</ul>
<blockquote>
<p>注：STW（Stop-The-World）暂停所有应用程序线程，等待垃圾回收的完成</p>
</blockquote>
<h3 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h3><p>基于垃圾回收算法。</p>
<h4 id="串行垃圾收集器"><a href="#串行垃圾收集器" class="headerlink" title="串行垃圾收集器"></a>串行垃圾收集器</h4><p>Serial和Serial Old串行垃圾收集器，是指使用单线程进行垃圾回收，堆内存较小，适合个人电脑</p>
<ul>
<li><p>Serial 作用于新生代，采用复制算法</p>
</li>
<li><p>Serial Old 作用于老年代，采用标记-整理算法</p>
</li>
</ul>
<p>垃圾回收时，只有一个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p>
<img src="/pic/串行垃圾回收器.png" style="zoom: 80%;" />

<h4 id="并行垃圾收集器"><a href="#并行垃圾收集器" class="headerlink" title="并行垃圾收集器"></a>并行垃圾收集器</h4><p>这里并行是指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</p>
<p>Parallel New和Parallel Old是一个并行垃圾回收器，<strong>JDK8默认使用此垃圾回收器</strong></p>
<ul>
<li><p>Parallel New作用于新生代，采用复制算法</p>
</li>
<li><p>Parallel Old作用于老年代，采用标记-整理算法</p>
</li>
</ul>
<p>垃圾回收时，多个线程在工作，并且java应用中的所有线程都要暂停（STW），等待垃圾回收的完成。</p>
<img src="/pic/并行垃圾收集器.png" style="zoom:80%;" />

<h4 id="🌟CMS-并发-垃圾收集器"><a href="#🌟CMS-并发-垃圾收集器" class="headerlink" title="🌟CMS(并发)垃圾收集器"></a>🌟CMS(并发)垃圾收集器</h4><p>这里并发是指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。</p>
<p>CMS全称 Concurrent Mark Sweep，是一款并发的、使用<strong>标记-清除算法</strong>的垃圾回收器，该回收器是针对老年代垃圾回收的，是一款以获取最短回收停顿时间为目标的收集器，停顿时间短，用户体验就好。其最大特点是<strong>在进行垃圾回收时，应用仍然能正常运行</strong>。</p>
<img src="/pic/CMS垃圾收集器.png" style="zoom:80%;" />

<h4 id="🌟G1垃圾收集器"><a href="#🌟G1垃圾收集器" class="headerlink" title="🌟G1垃圾收集器"></a>🌟G1垃圾收集器</h4><ul>
<li>应用于新生代和老年代，<strong>在JDK9之后默认使用G1</strong>。 </li>
<li>划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备</li>
<li>采用复制算法</li>
<li>响应时间与吞吐量兼顾</li>
<li>分成三个阶段：新生代回收、并发标记、混合收集</li>
<li>如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC</li>
</ul>
<h5 id="年轻代垃圾回收"><a href="#年轻代垃圾回收" class="headerlink" title="年轻代垃圾回收"></a>年轻代垃圾回收</h5><ul>
<li><p>初始时，所有区域都处于空闲状态</p>
</li>
<li><p>创建对象时，挑出一些空闲区域作为伊甸园区存储这些对象</p>
</li>
<li><p>当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程</p>
</li>
<li><p>若伊甸园的内存又有不足，将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代</p>
</li>
</ul>
<h5 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h5><p>当老年代占用内存超过阈值(默认是45%)后，触发并发标记，这时无需暂停用户线程</p>
<ul>
<li><p>并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。</p>
</li>
<li><p>这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据暂停时间目标优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。</p>
</li>
</ul>
<h5 id="混合收集"><a href="#混合收集" class="headerlink" title="混合收集"></a>混合收集</h5><p>不会对所有老年代区域进行回收，而是根据暂停时间目标优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集。</p>
<h3 id="强引用、软引用、弱引用、虚引用"><a href="#强引用、软引用、弱引用、虚引用" class="headerlink" title="强引用、软引用、弱引用、虚引用"></a>强引用、软引用、弱引用、虚引用</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>只有所有 GC Roots 对象都不通过【强引用】引用该对象，该对象才能被垃圾回收。类似于<strong>必不可少的生活用品</strong>，垃圾回收器绝不会回收它。当内存空间不足，Java 虚拟机宁愿抛出 OutOfMemoryError 错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure>

<p><img src="/pic/%E5%BC%BA%E5%BC%95%E7%94%A8.png"></p>
<h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><p>类似于<strong>可有可无的生活用品</strong>。仅有软引用引用该对象时，在垃圾回收后，内存仍不足时会再次出发垃圾回收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">SoftReference</span> <span class="variable">softReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SoftReference</span>(user);</span><br></pre></td></tr></table></figure>

<img src="/pic/软引用.png" style="zoom:80%;" />

<p><strong>软引用可以加速 JVM 对垃圾内存的回收速度，可以维护系统的运行安全，防止内存溢出（OutOfMemory）等问题的产生</strong>。</p>
<h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><p>类似于<strong>可有可无的生活用品</strong>。仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">WeakReference</span> <span class="variable">weakReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeakReference</span>(user);</span><br></pre></td></tr></table></figure>

<img src="/pic/弱引用.png" style="zoom:80%;" />

<h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><p>形同虚设，不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p>
<h2 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h2>]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序入门</title>
    <url>/2022/04/24/00-00-00/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="小程序和普通网页开发的区别"><a href="#小程序和普通网页开发的区别" class="headerlink" title="小程序和普通网页开发的区别"></a>小程序和普通网页开发的区别</h3><ol>
<li><p>运行环境不同</p>
<ul>
<li>网页运行在浏览器环境中</li>
<li>小程序运行在微信环境中</li>
</ul>
</li>
<li><p>API不同</p>
<ul>
<li>小程序无法调用DOM和BOM的API</li>
<li>可以调用微信环境提供的API</li>
</ul>
</li>
<li><p>开发模式不同</p>
<p>小程序有自己的开发模式</p>
<ul>
<li>申请开发账号 <code>https://mp.weixin.qq.com/</code>，并获取AppID</li>
<li>安装开发者工具，修改代理选项为不使用代理<code>https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</code><ul>
<li>快速创建小程序项目 </li>
<li>代码的查看和编辑 </li>
<li>对小程序功能进行调试</li>
<li>小程序的预览和发布</li>
</ul>
</li>
<li>创建和配置小程序项目</li>
</ul>
</li>
</ol>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ol>
<li><p><strong>pages 用来存放所有小程序的页面</strong></p>
<p>官方建议把每个页面都存放在pages中，且以单独的文件夹存在，也就是说一个页面就是pages文件夹下的一个文件夹</p>
<p>其中，每个页面由 4 个基本文件组成，它们分别是</p>
<ul>
<li>.js 文件（页面的脚本文件，存放页面的数据、事件处理函数等）<ul>
<li>页面的入口文件，调用Page()函数创建并运行页面</li>
</ul>
</li>
<li>.json 文件（当前页面的配置文件，配置窗口的外观、表现等）<ul>
<li>若与app.json中的配置冲突了，以本页面的json文件为准</li>
</ul>
</li>
<li>.wxml 文件（页面的模板结构文件）<ul>
<li>小程序开发的标签语言，用于构建页面结构，作用类似HTML</li>
</ul>
</li>
<li>.wxss 文件（当前页面的样式表文件）<ul>
<li>类似于CSS</li>
<li>当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式</li>
<li>当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局的样式</li>
</ul>
</li>
</ul>
</li>
<li><p>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块）</p>
</li>
<li><p><strong>app.js 小程序项目的入口文件</strong>，通过App()函数来启动整个小程序</p>
</li>
<li><p><strong>app.json 小程序项目的全局配置文件</strong></p>
<p>包括了小程序的所有页面路径、窗口外观、界面表现、底部 tab 等，初始Demo的app.json有四个配置项</p>
<ul>
<li>pages：用来记录当前小程序所有页面的路径<ul>
<li>其中<strong>放在第一位的页面会被当做项目的首页</strong></li>
<li><strong>若需要新增页面，只需在pages中新增页面的存放路径，开发者工具会自动创建对应的页面文件</strong></li>
</ul>
</li>
<li>window：全局定义小程序所有页面的背景色、文字颜色等</li>
<li>style：全局定义小程序组件所使用的样式版本</li>
<li>sitemapLocation：用来指明 sitemap.json 的位置</li>
</ul>
</li>
<li><p>app.wxss 小程序项目的全局样式文件</p>
</li>
<li><p>project.config.json 项目的配置文件，用来记录我们对小程序开发工具所做的个性化配置</p>
<ul>
<li>setting 中保存了编译相关的配置 </li>
<li>projectname 中保存的是项目名称 </li>
<li>appid 中保存的是小程序的账号 ID</li>
</ul>
</li>
<li><p>sitemap.json 用来配置小程序及其页面是否允许被微信索引(默认开启)</p>
<p>当允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。</p>
<p>sitemap 的索引提示是默认开启的，如需要关闭，可在小程序项目配置文件 project.config.json 的 setting 中配置字段 checkSiteMap 为 false</p>
</li>
</ol>
<h2 id="宿主环境"><a href="#宿主环境" class="headerlink" title="宿主环境"></a>宿主环境</h2><p>host environment指的是<strong>程序运行所必须的依赖环境</strong>。例如： Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行的，所以， Android 是安卓软件的宿主环境，脱离了宿主环境的软件是没有任何意义的。</p>
<p>微信是小程序的宿主环境，包括：</p>
<ol>
<li><p>通信模型</p>
<ul>
<li><p>通信的主体是渲染层和逻辑层，其中：</p>
<ul>
<li><p>WXML 模板和 WXSS 样式工作在渲染层</p>
</li>
<li><p>JS 脚本工作在逻辑层</p>
</li>
</ul>
</li>
<li><p>通信模型分为两部分</p>
<ul>
<li>渲染层和逻辑层之间的通信，由微信客户端进行转发</li>
<li>逻辑层和第三方服务器之间的通信，由微信客户端进行转发</li>
</ul>
</li>
</ul>
</li>
<li><p>运行机制</p>
<ul>
<li>启动过程<ul>
<li>把小程序的代码包下载到本地 </li>
<li>解析 app.json 全局配置文件 </li>
<li>执行 app.js 小程序入口文件，调用 App() 创建小程序实例 </li>
<li>渲染小程序首页</li>
<li>小程序启动完成</li>
</ul>
</li>
<li>页面渲染过程<ul>
<li>加载解析页面的 .json 配置文件</li>
<li>加载页面的 .wxml 模板和 .wxss 样式</li>
<li>执行页面的 .js 文件，调用 Page() 创建页面实例 </li>
<li>页面渲染完成</li>
</ul>
</li>
</ul>
</li>
<li><p>组件</p>
<ul>
<li><p><strong>视图容器</strong></p>
<ul>
<li>view，相当于div</li>
<li>scroll-view</li>
<li>swiper ,  swiper-item 轮播图组件</li>
</ul>
</li>
<li><p><strong>基础内容</strong></p>
<ul>
<li><p>text，selectable属性支持长按选中</p>
<ul>
<li><code>&lt;text selectable&gt;123123123&lt;/text&gt;</code></li>
</ul>
</li>
<li><p>rich-text，通过node属性节点，可以把html字符串渲染为wxml结构</p>
<ul>
<li><code>&lt;rich-text node=&quot;&lt;h1&gt;我是标题&lt;/h1&gt;&quot;&gt;&lt;/rich-text&gt;</code></li>
</ul>
</li>
<li><p>button</p>
<ul>
<li><code>&lt;button type=&quot;primary&quot;&gt;主色调按钮&lt;/button&gt;</code></li>
<li><code>&lt;button type=&quot;warn&quot;&gt;警告按钮&lt;/button&gt;</code></li>
<li><code>&lt;button size=&quot;mini&quot;&gt;小尺寸按钮&lt;/button&gt;</code></li>
<li><code>&lt;button plain&gt;镂空按钮&lt;/button&gt;</code></li>
</ul>
</li>
<li><p>image 有默认的宽高</p>
<table>
<thead>
<tr>
<th>mode属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>scaleToFill</td>
<td>（默认值）缩放模式，不保持纵横比缩放图片，使图片的宽高完全拉伸至填满 image 元素</td>
</tr>
<tr>
<td>aspectFit</td>
<td>缩放模式，保持纵横比缩放图片，使图片的长边能完全显示出来。也就是说，可以完整地将图片显示出来。</td>
</tr>
<tr>
<td>aspectFill</td>
<td>缩放模式，保持纵横比缩放图片，只保证图片的短边能完全显示出来。也就是说，图片通常只在水平或垂直方 向是完整的，另一个方向将会发生截取。</td>
</tr>
<tr>
<td>widthFix</td>
<td>缩放模式，宽度不变，高度自动变化，保持原图宽高比不变</td>
</tr>
<tr>
<td>heightFix</td>
<td>缩放模式，高度不变，宽度自动变化，保持原图宽高比不变</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>表单组件</strong></p>
</li>
<li><p><strong>导航组件</strong></p>
</li>
<li><p>媒体组件</p>
</li>
<li><p>map 地图组件</p>
</li>
<li><p>canvas 画布组件</p>
</li>
<li><p>开放能力</p>
</li>
<li><p>无障碍访问</p>
</li>
</ul>
</li>
<li><p>API</p>
<ul>
<li>事件监听API</li>
<li>同步API</li>
<li>异步API</li>
</ul>
</li>
</ol>
<h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h2><ol>
<li><p>权限管理</p>
<p>不同角色员工的权限进行边界划分</p>
</li>
<li><p>成员的组织结构</p>
<p>开发者权限</p>
<ul>
<li>开发者权限：可使用小程序开发者工具及对小程序的功能进行代码开发</li>
<li>体验者权限：可使用体验版小程序</li>
<li>登录权限：可登录小程序管理后台，无需管理员确认</li>
<li>开发设置：设置小程序服务器域名、消息推送及扫描普通链接二维码打开小程序</li>
<li>腾讯云管理：云开发相关设置</li>
</ul>
<p>可以添加项目成员和体验成员</p>
</li>
<li><p>开发流程</p>
</li>
</ol>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="小程序版本"><a href="#小程序版本" class="headerlink" title="小程序版本"></a>小程序版本</h3><table>
<thead>
<tr>
<th>版本阶段</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>开发版本</td>
<td align="center">使用开发者工具，可将代码上传到开发版本中。 开发版本只保留每人最新的一份上传的代码。 点击提交审核，可将代码提交审核。开发版本可删除，不影响线上版本和审核中版本的代码。</td>
</tr>
<tr>
<td>体验版本</td>
<td align="center">可以选择某个开发版本作为体验版，并且选取一份体验版。</td>
</tr>
<tr>
<td>审核中的版本</td>
<td align="center">只能有一份代码处于审核中。有审核结果后可以发布到线上，也可直接重新提交审核，覆盖原审核版本。</td>
</tr>
<tr>
<td>线上版本</td>
<td align="center">线上所有用户使用的代码版本，该版本代码在新版本代码发布后被覆盖更新。</td>
</tr>
</tbody></table>
<h3 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h3><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><ul>
<li><p>上传代码</p>
</li>
<li><p>提交审核</p>
</li>
<li><p>发布</p>
</li>
</ul>
<h4 id="基于小程序码推广"><a href="#基于小程序码推广" class="headerlink" title="基于小程序码推广"></a>基于小程序码推广</h4><p>登录小程序管理后台 -&gt; 设置 -&gt; 基本设置 -&gt; 基本信息 -&gt; 小程序码及线下物料下载</p>
<h4 id="运营数据"><a href="#运营数据" class="headerlink" title="运营数据"></a>运营数据</h4><p>在小程序后台查看</p>
<ol>
<li>登录小程序管理后台</li>
<li>点击侧边栏的“统计” </li>
<li>点击相应的 tab 可以看到相关的数据</li>
</ol>
<p>用小程序数据助手查看</p>
<ol>
<li>打开微信 </li>
<li>搜索“小程序数据助手” </li>
<li>查看已发布的小程序相关的数据</li>
</ol>
]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app框架</title>
    <url>/2022/04/29/00-00-00/</url>
    <content><![CDATA[<p><a href="https://www.escook.cn/docs-uni-shop/">https://www.escook.cn/docs-uni-shop/</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>uni-app 是一个使用 Vue.js 开发所有前端应用的框架</strong>。开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序平台，官方文档<strong><a href="https://uniapp.dcloud.net.cn/">https://uniapp.dcloud.net.cn/</a></strong></p>
<p>uni-app 官方推荐使用 <strong>HBuilderX</strong> 来开发 uni-app 类型的项目。主要好处：</p>
<ul>
<li>模板丰富</li>
<li>完善的智能提示</li>
<li>一键运行</li>
</ul>
<h2 id="uni-app项目目录结构"><a href="#uni-app项目目录结构" class="headerlink" title="uni-app项目目录结构"></a>uni-app项目目录结构</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置小程序的全局样式、生命周期函数等</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路径、页面窗口样式、tabBar、navigationBar 等页面类信息</span><br></pre></td></tr></table></figure>



<h2 id="配置tabBar"><a href="#配置tabBar" class="headerlink" title="配置tabBar"></a>配置tabBar</h2><h2 id="配置网络请求"><a href="#配置网络请求" class="headerlink" title="配置网络请求"></a>配置网络请求</h2><p>由于平台的限制，小程序项目中不支持 axios，而且原生的 wx.request() API 功能较为简单，不支 持拦截器等全局定制的功能。因此，建议在 uni-app 项目中使用 <code>@escook/request-miniprogram </code>第三方包发起网络数据请求。</p>
<h2 id="配置分包"><a href="#配置分包" class="headerlink" title="配置分包"></a>配置分包</h2><h2 id="封装uni-showMsg-方法"><a href="#封装uni-showMsg-方法" class="headerlink" title="封装uni.$showMsg()方法"></a>封装<code>uni.$showMsg()</code>方法</h2><h2 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h2><h3 id="自定义搜索组件my-search"><a href="#自定义搜索组件my-search" class="headerlink" title="自定义搜索组件my-search"></a>自定义搜索组件my-search</h3><p>该组件不是一个真正的搜索框，作用是点击组件后跳转到搜索页面。</p>
<p>自定义组件中没有提供click事件，因此要封装click事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--my-search.vue--&gt;</span><br><span class="line">&lt;!--view中提供了click，可以直接绑定--&gt;</span><br><span class="line">&lt;view class=&quot;my-search-box&quot; :style=&quot;&#123;&#x27;border-radius&#x27;: radius + &#x27;px&#x27;&#125;&quot; @click=&quot;searchBoxHandler&quot;&gt;</span><br><span class="line">  &lt;uni-icons type=&quot;search&quot; size=&quot;17&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">  &lt;text class=&quot;placeholder&quot;&gt;搜索&lt;/text&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      searchBoxHandler() &#123;</span><br><span class="line">        // 触发外界通过 @click绑定的事件处理函数</span><br><span class="line">        this.$emit(&#x27;click&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--使用该组件的页面--&gt;</span><br><span class="line">&lt;!--直接绑定click不起作用，需要在my-search内部提供click--&gt;</span><br><span class="line">&lt;my-search @click=&quot;gotoSearch&quot;&gt;&lt;/my-search&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">	methods: &#123;</span><br><span class="line">   	// 跳转到分包中的搜索页面</span><br><span class="line">       gotoSearch() &#123;</span><br><span class="line">         uni.navigateTo(&#123;</span><br><span class="line">           url: &#x27;/subpkg/search/search&#x27;</span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用uni-ui提供的搜索组件"><a href="#使用uni-ui提供的搜索组件" class="headerlink" title="使用uni-ui提供的搜索组件"></a>使用uni-ui提供的搜索组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 uni-ui 提供的搜索组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-search-bar</span> @<span class="attr">input</span>=<span class="string">&quot;input&quot;</span> <span class="attr">:radius</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cancelButton</span>=<span class="string">&quot;none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-search-bar</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="搜索组件的吸顶效果"><a href="#搜索组件的吸顶效果" class="headerlink" title="搜索组件的吸顶效果"></a>搜索组件的吸顶效果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 使用自定义的搜索组件 --&gt;</span><br><span class="line">    &lt;view class=&quot;search-box&quot;&gt;</span><br><span class="line">      &lt;my-search @click=&quot;gotoSearch&quot;&gt;&lt;/my-search&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.search-box &#123;</span><br><span class="line">  // 设置定位效果为“吸顶”</span><br><span class="line">  position: sticky;</span><br><span class="line">  // 吸顶的“位置”</span><br><span class="line">  top: 0;</span><br><span class="line">  // 提高层级，防止被轮播图覆盖</span><br><span class="line">  z-index: 999;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="搜索框防抖"><a href="#搜索框防抖" class="headerlink" title="搜索框防抖"></a>搜索框防抖</h3><p>用户连续输入时，没有必要让每次的新输入都去发请求，可以设置500ms的时间，该时间内没有新的输入时间才去发请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        // 延时器的 timerId</span><br><span class="line">        timer: null,</span><br><span class="line">        // 搜索关键词</span><br><span class="line">        kw: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    methods:&#123;</span><br><span class="line">        input(e) &#123;</span><br><span class="line">          // 清除 timer 对应的延时器</span><br><span class="line">          clearTimeout(this.timer)</span><br><span class="line">          // 重新启动一个延时器，并把 timerId 赋值给 this.timer</span><br><span class="line">          this.timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            // 如果 500 毫秒内，没有触发新的输入事件，则为搜索关键词赋值</span><br><span class="line">            this.kw = e.value</span><br><span class="line">            console.log(this.kw)</span><br><span class="line">          &#125;, 500)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="搜索建议列表"><a href="#搜索建议列表" class="headerlink" title="搜索建议列表"></a>搜索建议列表</h3><p>向后端发请求，获得建议列表</p>
<h3 id="实现搜索建议和搜索历史的按需展示"><a href="#实现搜索建议和搜索历史的按需展示" class="headerlink" title="实现搜索建议和搜索历史的按需展示"></a>实现搜索建议和搜索历史的按需展示</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用 v-if 和 v-else 控制这两个区域的显示和隐藏--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索建议列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;sugg-list&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;searchResults.length !== 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略其它代码... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 搜索历史 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-box&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略其它代码... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h3><p>定义<code>historyList</code>数组，将搜索关键词保存到数组中，根据数组渲染搜索历史</p>
<p>需要解决数组内元素排列顺序问题和重复元素展示问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存搜索关键词为历史记录，使用set过渡，解决重复元素的问题</span></span><br><span class="line"><span class="title function_">saveSearchHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this.historyList.push(this.kw)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 将 Array 数组转化为 Set 对象</span></span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">historyList</span>)</span><br><span class="line">  <span class="comment">// 2. 调用 Set 对象的 delete 方法，移除对应的元素</span></span><br><span class="line">  set.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  <span class="comment">// 3. 调用 Set 对象的 add 方法，向 Set 中添加元素</span></span><br><span class="line">  set.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  <span class="comment">// 4. 将 Set 对象转化为 Array 数组</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="将搜索历史记录持久化存储到本地"><a href="#将搜索历史记录持久化存储到本地" class="headerlink" title="将搜索历史记录持久化存储到本地"></a>将搜索历史记录持久化存储到本地</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用 uni.setStorageSync(key, value) 将搜索历史记录持久化存储到本地</span></span><br><span class="line">  uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;kw&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">historyList</span>))</span><br><span class="line"><span class="comment">//在 onLoad 生命周期函数中，加载本地存储的搜索历史记录：</span></span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;kw&#x27;</span>) || <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">    <span class="comment">// 若kw不存在，使用空数组[]代替</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="清空搜索历史"><a href="#清空搜索历史" class="headerlink" title="清空搜索历史"></a>清空搜索历史</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清空搜索历史记录</span></span><br><span class="line"><span class="title function_">cleanHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 清空 data 中保存的搜索历史</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = []</span><br><span class="line">  <span class="comment">// 清空本地存储中记录的搜索历史</span></span><br><span class="line">  uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;kw&#x27;</span>, <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h2><h3 id="在请求头中添加-Token-身份认证的字段"><a href="#在请求头中添加-Token-身份认证的字段" class="headerlink" title="在请求头中添加 Token 身份认证的字段"></a>在请求头中添加 Token 身份认证的字段</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 请求开始之前做一些事情</span></span><br><span class="line">$http.<span class="property">beforeRequest</span> = <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断请求的是否为有权限的 API 接口</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">url</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;/my/&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 为请求头添加身份认证字段</span></span><br><span class="line">    options.<span class="property">header</span> = &#123;</span><br><span class="line">      <span class="comment">// 字段的值可以直接从 vuex 中进行获取</span></span><br><span class="line">      <span class="title class_">Authorization</span>: store.<span class="property">state</span>.<span class="property">m_user</span>.<span class="property">token</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结算商品的流程"><a href="#结算商品的流程" class="headerlink" title="结算商品的流程"></a>结算商品的流程</h3><ol>
<li><strong>创建订单</strong><ul>
<li>请求创建订单的 API 接口：把（订单金额、收货地址、订单中包含的商品信息）发送到服务器</li>
<li>服务器响应的结果：<em>订单编号</em></li>
</ul>
</li>
<li><strong>订单预支付</strong><ul>
<li>请求订单预支付的 API 接口：把（订单编号）发送到服务器</li>
<li>服务器响应的结果：<em>订单预支付的参数对象</em>，里面包含了订单支付相关的必要参数</li>
</ul>
</li>
<li><strong>发起微信支付</strong><ul>
<li>调用 <code>uni.requestPayment()</code> 这个 API，发起微信支付；把步骤 2 得到的 “订单预支付对象” 作为参数传递给 <code>uni.requestPayment()</code> 方法</li>
<li>监听 <code>uni.requestPayment()</code> 这个 API 的 <code>success</code>，<code>fail</code>，<code>complete</code> 回调函数</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 点击了结算按钮</span></span><br><span class="line"><span class="title function_">settlement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 先判断是否勾选了要结算的商品</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">checkedCount</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;请选择要结算的商品！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 再判断用户是否选择了收货地址</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">addstr</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;请选择收货地址！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 最后判断用户是否登录了</span></span><br><span class="line">  <span class="comment">// if (!this.token) return uni.$showMsg(&#x27;请先登录！&#x27;)</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">token</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">delayNavigate</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 实现微信支付功能</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">payOrder</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 微信支付</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">payOrder</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 创建订单</span></span><br><span class="line">  <span class="comment">// 1.1 组织订单的信息对象</span></span><br><span class="line">  <span class="keyword">const</span> orderInfo = &#123;</span><br><span class="line">    <span class="comment">// 开发期间，注释掉真实的订单价格，</span></span><br><span class="line">    <span class="comment">// order_price: this.checkedGoodsAmount,</span></span><br><span class="line">    <span class="comment">// 写死订单总价为 1 分钱</span></span><br><span class="line">    <span class="attr">order_price</span>: <span class="number">0.01</span>,</span><br><span class="line">    <span class="attr">consignee_addr</span>: <span class="variable language_">this</span>.<span class="property">addstr</span>,</span><br><span class="line">    <span class="attr">goods</span>: <span class="variable language_">this</span>.<span class="property">cart</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_state</span>).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> (&#123; <span class="attr">goods_id</span>: x.<span class="property">goods_id</span>, <span class="attr">goods_number</span>: x.<span class="property">goods_count</span>, <span class="attr">goods_price</span>: x.<span class="property">goods_price</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1.2 发起请求创建订单</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/api/public/v1/my/orders/create&#x27;</span>, orderInfo)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;创建订单失败！&#x27;</span>)</span><br><span class="line">  <span class="comment">// 1.3 得到服务器响应的“订单编号”</span></span><br><span class="line">  <span class="keyword">const</span> orderNumber = res.<span class="property">message</span>.<span class="property">order_number</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2. 订单预支付</span></span><br><span class="line">   <span class="comment">// 2.1 发起请求获取订单的支付信息</span></span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="attr">data</span>: res2 &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/api/public/v1/my/orders/req_unifiedorder&#x27;</span>, &#123; <span class="attr">order_number</span>: orderNumber &#125;)</span><br><span class="line">   <span class="comment">// 2.2 预付订单生成失败</span></span><br><span class="line">   <span class="keyword">if</span> (res2.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showError(<span class="string">&#x27;预付订单生成失败！&#x27;</span>)</span><br><span class="line">   <span class="comment">// 2.3 得到订单支付相关的必要参数</span></span><br><span class="line">   <span class="keyword">const</span> payInfo = res2.<span class="property">message</span>.<span class="property">pay</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3. 发起微信支付</span></span><br><span class="line">   <span class="comment">// 3.1 调用 uni.requestPayment() 发起微信支付</span></span><br><span class="line">   <span class="keyword">const</span> [err, succ] = <span class="keyword">await</span> uni.<span class="title function_">requestPayment</span>(payInfo)</span><br><span class="line">   <span class="comment">// 3.2 未完成支付</span></span><br><span class="line">   <span class="keyword">if</span> (err) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;订单未支付！&#x27;</span>)</span><br><span class="line">   <span class="comment">// 3.3 完成了支付，进一步查询支付的结果</span></span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="attr">data</span>: res3 &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">post</span>(<span class="string">&#x27;/api/public/v1/my/orders/chkOrder&#x27;</span>, &#123; <span class="attr">order_number</span>: orderNumber &#125;)</span><br><span class="line">   <span class="comment">// 3.4 检测到订单未支付</span></span><br><span class="line">   <span class="keyword">if</span> (res3.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;订单未支付！&#x27;</span>)</span><br><span class="line">   <span class="comment">// 3.5 检测到订单支付完成</span></span><br><span class="line">   uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>: <span class="string">&#x27;支付完成！&#x27;</span>,</span><br><span class="line">     <span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2>]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义组件</title>
    <url>/2022/04/27/00-00-00/</url>
    <content><![CDATA[<h2 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h2><ol>
<li><p>在项目根目录创建components文件夹，里面存放所有的自定义组件。</p>
</li>
<li><p>在components文件夹下新建若干子文件夹，每个文件夹下存放一个自定义组件。</p>
</li>
<li><p>右击<code>新建component</code>，输入组件名称，系统会自动生成对应的4个文件</p>
</li>
</ol>
<h2 id="引用组件"><a href="#引用组件" class="headerlink" title="引用组件"></a>引用组件</h2><ol>
<li><p>局部引用</p>
<p>组件只能在当前被引用的页面内使用</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在页面的json文件中引入组件</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;usingComponents&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="comment">// 为组件起别名：组件路径</span></span><br><span class="line">      <span class="attr">&quot;my-test1&quot;</span><span class="punctuation">:</span><span class="string">&quot;/components/test/test&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在页面的wxml中就可以以标签的形式使用组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test1</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>全局引用</p>
<p>组件可以在每个小程序页面中使用，在app.json中全局配置</p>
</li>
<li><p>组件和页面的区别</p>
<p>在生成组件时，会生成和每个页面一样的四个文件。但是，组件和页面的js和json文件有明显不同</p>
<ul>
<li>组件的 .json 文件中需要声明 <code>&quot;component&quot;: true </code>属性，代表它是一个组件</li>
<li>组件的 .js 文件中调用的是 <code>Component()</code> 函数，页面调用的是<code>page()</code>函数</li>
<li>组件的事件处理函数需要定义到<code>methods</code>节点中，页面不需要定义到特定的节点中</li>
</ul>
</li>
</ol>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><ol>
<li><p>组件样式隔离</p>
<p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构</p>
<p>好处： ① 防止外界的样式影响组件内部的样式 ② 防止组件的样式破坏外界的样式</p>
</li>
<li><p>注意点</p>
<ul>
<li>app.wxss 中的全局样式对组件无效</li>
<li>只有 class 选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响</li>
<li>建议：在组件和引用组件的页面中建议使用 class 选择器，不要使用 id、属性、标签选择器！</li>
</ul>
</li>
<li><p>修改隔离选项</p>
<p>有时，我们希望在外界能够控制组件内部的样式，此时，可以通过 styleIsolation 修改组件的样式隔离选项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件的js文件中增加配置</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&#x27;isolated&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者在组件的json文件中增加配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;styleIsolation&quot;</span>: <span class="string">&#x27;isolated&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>styleIsolation的可选值</p>
<table>
<thead>
<tr>
<th>可选值</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>isolated</td>
<td>是</td>
<td>表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响</td>
</tr>
<tr>
<td>apply-shared</td>
<td>否</td>
<td>表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面，单向影响</td>
</tr>
<tr>
<td>shared</td>
<td>否</td>
<td>表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其 他设置了 apply-shared 或 shared 的自定义组件</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="数据、方法、属性"><a href="#数据、方法、属性" class="headerlink" title="数据、方法、属性"></a>数据、方法、属性</h2><ol>
<li><p>data数据</p>
<p>在小程序组件中，用于组件模板渲染的<strong>私有数据</strong>，需要定义到 data 节点中。</p>
</li>
<li><p>methods方法</p>
<p>事件处理函数和自定义方法需要定义到 methods 节点中</p>
</li>
<li><p>properties属性</p>
<p>properties 是组件的对外属性，用来<strong>接收外界传递到组件中的数据</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在别的页面使用自定义组件，传递max属性为9，会覆盖默认值10--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test1</span> <span class="attr">max</span>=<span class="string">&quot;9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test1</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>data和properties</p>
<p>本质上没有区别，因此properties也可以用于页面渲染，可以使用setData修改值</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/test/test.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="attr">properties</span>: &#123;</span><br><span class="line">    <span class="comment">// 第一种方式：简化的方式</span></span><br><span class="line">    <span class="comment">// max: Number</span></span><br><span class="line">    <span class="comment">// 第二种方式：完整的定义方式</span></span><br><span class="line">    <span class="attr">max</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 点击事件处理函数</span></span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> &gt;= <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">max</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">        <span class="attr">max</span>: <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">max</span> + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_showCount</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">_showCount</span>(<span class="params"></span>) &#123; <span class="comment">//自定义方法，并不是某些元素的事件处理函数，建议_开头</span></span><br><span class="line">      wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;count是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">showInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">properties</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">data</span> === <span class="variable language_">this</span>.<span class="property">properties</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>于监听和响应任何属性和数据字段的变化，从而执行特定的操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">	<span class="attr">observers</span>:&#123;</span><br><span class="line">		<span class="string">&#x27;字段A，字段B&#x27;</span>:<span class="keyword">function</span>(<span class="params">A的新值,B的新值</span>)&#123;</span><br><span class="line">			<span class="comment">//do sth</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">n1</span>: <span class="number">0</span>, <span class="attr">n2</span>: <span class="number">0</span>, <span class="attr">sum</span>: <span class="number">0</span> &#125;,  </span><br><span class="line">  <span class="attr">observers</span>: &#123; <span class="comment">// 监听n1和n2，当值变化时，执行函数</span></span><br><span class="line">    <span class="string">&#x27;n1, n2&#x27;</span>: <span class="keyword">function</span> (<span class="params">newN1, newN2</span>) &#123; <span class="comment">// 自动计算sum</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">sum</span>: newN1 + newN2</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="监听对象属性"><a href="#监听对象属性" class="headerlink" title="监听对象属性"></a>监听对象属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//data:&#123;</span></span><br><span class="line"><span class="comment">//    rgb: &#123; r: 0, g: 0, b: 0 &#125;, // rgb是一个对象，有三个属性r,g,b</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">	<span class="attr">observers</span>:&#123;</span><br><span class="line">		<span class="string">&#x27;对象.属性A,对象.属性B&#x27;</span>:<span class="keyword">function</span>(<span class="params">A的新值,B的新值</span>)&#123;</span><br><span class="line">			<span class="comment">//触发此监听器的3种情况</span></span><br><span class="line">            <span class="comment">// 属性A改变</span></span><br><span class="line">            <span class="comment">// 属性B改变</span></span><br><span class="line">            <span class="comment">// 对象改变</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果一个对象中属性太多，可以用通配符<code>**</code>监听所有属性的变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">observers</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;_rgb.**&#x27;</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    	<span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        	<span class="attr">fullColor</span>: <span class="string">`<span class="subst">$&#123;obj.r&#125;</span>, <span class="subst">$&#123;obj.g&#125;</span>, <span class="subst">$&#123;obj.b&#125;</span>`</span></span><br><span class="line">      	&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>纯数据字段指的是那些不用于界面渲染的 data 字段。有些情况下，某些 data 中的字段既不会展示在界面上，也不会传递给其他组件，仅仅在当前组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段。纯数据字段有助于提升页面更新的性能。</p>
<h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><p>在 Component的 options 节点中，指定 pureDataPattern 为一个正则表达式，字段名符合这个正则 表达式的字段将成为纯数据字段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">pureDataPattern</span>: <span class="regexp">/^_/</span> <span class="comment">// 定义 以_开头的都是纯数据字段</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="literal">true</span>, <span class="comment">// 普通字段</span></span><br><span class="line">    <span class="attr">_b</span>:<span class="literal">false</span>, <span class="comment">// 被定义为纯数据字段</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>组件的生命周期函数，按序执行</p>
<table>
<thead>
<tr>
<th>生命周期函数</th>
<th>参数</th>
<th>描述说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>created</strong></td>
<td>无</td>
<td>在组件实例刚刚被创建时执行</td>
</tr>
<tr>
<td><strong>attached</strong></td>
<td>无</td>
<td>在组件实例进入页面节点树时执行</td>
</tr>
<tr>
<td>ready</td>
<td>无</td>
<td>在组件在视图层布局完成后执行</td>
</tr>
<tr>
<td>moved</td>
<td>无</td>
<td>在组件实例被移动到节点树另一个位置时执行</td>
</tr>
<tr>
<td><strong>detached</strong></td>
<td>无</td>
<td>在组件实例被从页面节点树移除时执行</td>
</tr>
<tr>
<td>error</td>
<td>Object Error</td>
<td>每当组件方法抛出错误时执行</td>
</tr>
</tbody></table>
<p>① 组件实例刚被创建好的时候，created 生命周期函数会被触发 </p>
<ul>
<li>此时还不能调用 setData </li>
<li>通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段</li>
</ul>
<p>② 在组件完全初始化完毕、进入页面节点树后，还没有被渲染出来， attached 生命周期函数会被触发</p>
<ul>
<li>此时， this.data 已被初始化完毕</li>
<li>这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）</li>
</ul>
<p>③ 在组件离开页面节点树后， detached 生命周期函数会被触发</p>
<ul>
<li>退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数</li>
<li>此时适合做一些清理性质的工作</li>
</ul>
<h3 id="定义和使用"><a href="#定义和使用" class="headerlink" title="定义和使用"></a>定义和使用</h3><p>生命周期函数可以直接定义在 Component 的第一级参数中（旧方式），也可以在 lifetimes 字段内进行声明（这是推荐的方式，其优先级最高）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="comment">// created() &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;created&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// attached() &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;attached&#x27;)</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// 推荐方式</span></span><br><span class="line">  <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created ~~~~~&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">attached</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;attached ~~~~~&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a>组件所在页面的生命周期</h3><p>有时，自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。 </p>
<p>例如：每当触发页面的 show 生命周期函数的时候，我们希望能够重新生成一个随机的 RGB 颜色值。 在自定义组件中，组件所在页面的生命周期函数有如下 3 个，需要定义在<code>pageLifetimes</code>节点中</p>
<table>
<thead>
<tr>
<th>生命周期函数</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>show</td>
<td>无</td>
<td>组件所在的页面被展示时执行</td>
</tr>
<tr>
<td>hide</td>
<td>无</td>
<td>组件所在的页面被隐藏时执行</td>
</tr>
<tr>
<td>resize</td>
<td>Object Size</td>
<td>组件所在的页面尺寸变化时执行</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/test3/test3.js</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">pageLifetimes</span>: &#123;</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;show&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_randomColor</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hide&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">resize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resize&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>在自定义组件中，有些结构需要由使用者提供，因此不能写死，组件封装者可以使用插槽<code>&lt;slot&gt;</code>来提供占位符</p>
<h3 id="单个插槽"><a href="#单个插槽" class="headerlink" title="单个插槽"></a>单个插槽</h3><p>在小程序中，默认每个自定义组件中只允许使用一个  进行占位，这种个数上的限制叫做单个插槽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/test4.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部结构<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pages/home/home.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test4</span>&gt;</span> <span class="comment">&lt;!--使用自定义组件，并填充插槽内容--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span>这是通过插槽填充的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-test4</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多个插槽"><a href="#多个插槽" class="headerlink" title="多个插槽"></a>多个插槽</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// components/test4/test4.js</span></span><br><span class="line"><span class="comment">// 在自定义组件的js文件中开启配置</span></span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">multipleSlots</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--components/test4.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;before&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部结构<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;after&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-test4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;before&quot;</span>&gt;</span>这是通过插槽填充的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">&quot;after&quot;</span>&gt;</span>~~~~~~~<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-test4</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h3><p>属性绑定用于实现<strong>父向子传值</strong>，而且<strong>只能传递普通类型的数据</strong>，无法将方法传递给子组件。</p>
<p>即上文提到的propertie属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 父组件使用自定义组件并向其传值</span><br><span class="line">&lt;my-test5 count=&quot;5&quot;&gt;&lt;/my-test5&gt;</span><br><span class="line"></span><br><span class="line">// 子组件中定义该属性，接收父组件传递的值</span><br><span class="line">  properties: &#123;</span><br><span class="line">    count: Number</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>事件绑定用于实现子向父传值，可以传递任何类型的数据。本质是让在父组件中定义函数，让子组件能调用这个函数，以实现传值的效果</p>
<ul>
<li>在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件，由子组件来调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">syncCount</span>(<span class="params">e</span>) &#123; &#125;,</span><br></pre></td></tr></table></figure>



<ul>
<li>在父组件的 wxml 中，通过自定义事件的形式，将上面定义的函数引用，传递给子组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span> <span class="attr">bind:sync</span>=<span class="string">&quot;syncCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--bind后面是自定义事件的名称，这里是sync--&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>子组件的 js 中，通过调用 <code>this.triggerEvent(&#39;自定义事件名称&#39;, &#123; /* 参数对象 */ &#125;) </code>，将数据发送到父组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 触发自定义事件，将数值同步给父组件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">triggerEvent</span>(<span class="string">&#x27;sync&#x27;</span>, &#123; <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">properties</span>.<span class="property">count</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>在父组件的 js 中，通过 <code>e.detail </code>获取到子组件传递过来的数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">syncCount</span>(<span class="params">e</span>) &#123; <span class="comment">// 通过e.detail获取子组件传递的数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="comment">// 将子组件传递的数据保存到父组件的data中</span></span><br><span class="line">    <span class="attr">count</span>: e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h3 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h3><p>可在父组件里调用 <code>this.selectComponent(&quot;id或class选择器&quot;)</code> ，获取子组件的实例对象，从而直接访问子组件的任意数据和方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在使用自定义组件时为其定义一个类名，以便于获取其实例对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-test5</span> <span class="attr">count</span>=<span class="string">&quot;&#123;&#123;count&#125;&#125;&quot;</span> <span class="attr">bind:sync</span>=<span class="string">&quot;syncCount&quot;</span> <span class="attr">class</span>=<span class="string">&quot;customA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-test5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;getChild&quot;</span>&gt;</span>获取子组件的实例对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getChild</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="variable language_">this</span>.<span class="title function_">selectComponent</span>(<span class="string">&#x27;.cA&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(child)</span><br><span class="line">  child.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: child.<span class="property">properties</span>.<span class="property">count</span> + <span class="number">1</span> <span class="comment">// 使用子组件中的数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">  child.<span class="title function_">addCount</span>() <span class="comment">// 调用子组件中的方法</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a>behaviors</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>behaviors 是小程序中，用于实现组件间<strong>代码共享</strong>的特性，类似于 Vue.js 中的 “mixins”。</p>
<p>将组件间相同的代码放到behaviors中，有组件要用这份代码直接引用就可生效</p>
<p>每个 behavior 可以包含<strong>一组属性、数据、生命周期函数和方法</strong>。组件引用它时，它的属性、数据和方法会被 <strong>合并到组件</strong>中。 每个组件可以引用多个 behavior，behavior 也可以引用其它 behavior。</p>
<h3 id="创建behavior"><a href="#创建behavior" class="headerlink" title="创建behavior"></a>创建behavior</h3><p>调用 <code>Behavior(Object object)</code> 方法即可创建一个共享的 behavior 实例对象，供所有的组件使用</p>
<p>可以在项目中创建一个behaviors文件夹，里面每个js文件就是一个behavior</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// behaviors/my-behavior.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Behavior</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;zs&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>behavior中所有可用的节点</p>
<table>
<thead>
<tr>
<th>可用的节点</th>
<th>类型</th>
<th>是否必填</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>properties</td>
<td>Object Map</td>
<td>否</td>
<td>同组件的属性</td>
</tr>
<tr>
<td>data</td>
<td>Object</td>
<td>否</td>
<td>同组件的数据</td>
</tr>
<tr>
<td>methods</td>
<td>Object</td>
<td>否</td>
<td>同自定义组件的方法</td>
</tr>
<tr>
<td>behaviors</td>
<td>String Array</td>
<td>否</td>
<td>引入其它的 behavior</td>
</tr>
<tr>
<td>created</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>attached</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>ready</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>moved</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
<tr>
<td>detached</td>
<td>Function</td>
<td>否</td>
<td>生命周期函数</td>
</tr>
</tbody></table>
<h3 id="使用behavior"><a href="#使用behavior" class="headerlink" title="使用behavior"></a>使用behavior</h3><p>在组件中，使用<code> require()</code> 方法导入需要的 behavior，挂载后即可访问 behavior 中的数据或方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="comment">// components/test5/test5.js</span></span><br><span class="line"><span class="keyword">const</span> myBehavior = <span class="built_in">require</span>(<span class="string">&#x27;../../behaviors/my-behavior&#x27;</span>)</span><br><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">behaviors</span>: [ myBehavior ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>在behavior中定义的用户名是：&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="同名字段的覆盖和组合规则"><a href="#同名字段的覆盖和组合规则" class="headerlink" title="同名字段的覆盖和组合规则*"></a>同名字段的覆盖和组合规则*</h3><p>组件和它引用的 behavior 中可以包含同名的字段，此时可以参考如下 3 种同名时的处理规则</p>
<ul>
<li>同名的数据字段 (data)</li>
<li>同名的属性 (properties) 或方法 (methods)</li>
<li>同名的生命周期函数</li>
</ul>
<p>详细的覆盖和组合规则，可以参考文档</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html</a></p>
]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>模板与配置</title>
    <url>/2022/04/25/00-00-00/</url>
    <content><![CDATA[<h2 id="WXML模板语法"><a href="#WXML模板语法" class="headerlink" title="WXML模板语法"></a>WXML模板语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>在data中定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在页面对应的js文件中将数据定义到data对象中</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="comment">// 字符串类型</span></span><br><span class="line">		<span class="attr">info</span>:<span class="string">&#x27;init data&#x27;</span>,</span><br><span class="line">        <span class="attr">imgSrc</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">randomNum</span>: <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span></span><br><span class="line">        <span class="comment">// 数组类型</span></span><br><span class="line">		<span class="attr">msgList</span>:[&#123;<span class="attr">mas</span>:<span class="string">&#x27;hello&#x27;</span>&#125;,&#123;<span class="attr">msg</span>:<span class="string">&#x27;world&#x27;</span>&#125;]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>在WXML中使用数据</p>
<ul>
<li>通过Mustache语法(双大括号)渲染数据</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; 要绑定的数据名 &#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> 绑定数据</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;imgSrc&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span> 绑定属性</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123; randomNum&gt;5?&#x27;大于5&#x27;:&#x27;小于5&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> 运算</span><br></pre></td></tr></table></figure>



<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p>
<p>常用事件</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">绑定方式</th>
<th align="center">事件描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tap</td>
<td align="center">bindtap 或 bind:tap</td>
<td align="center">手指触摸后马上离开，类似于 HTML 中的 click 事件</td>
</tr>
<tr>
<td align="center">input</td>
<td align="center">bindinput 或 bind:input</td>
<td align="center">文本框的输入事件</td>
</tr>
<tr>
<td align="center">change</td>
<td align="center">bindchange 或 bind:change</td>
<td align="center">状态改变时触发</td>
</tr>
</tbody></table>
<p>事件对象的属性</p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">type</td>
<td align="center">String</td>
<td align="center">事件类型</td>
</tr>
<tr>
<td align="center">timeStamp</td>
<td align="center">Integer</td>
<td align="center">页面打开到触发事件所经过的毫秒数</td>
</tr>
<tr>
<td align="center"><strong>target</strong></td>
<td align="center">Object</td>
<td align="center">触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td align="center">currentTarget</td>
<td align="center">Object</td>
<td align="center">当前组件的一些属性值集合</td>
</tr>
<tr>
<td align="center"><strong>detail</strong></td>
<td align="center">Object</td>
<td align="center">额外的信息</td>
</tr>
<tr>
<td align="center">touches</td>
<td align="center">Array</td>
<td align="center">触摸事件，当前停留在屏幕中的触摸点信息的数组</td>
</tr>
<tr>
<td align="center">changedTouches</td>
<td align="center">Array</td>
<td align="center">触摸事件，当前变化的触摸点信息的数组</td>
</tr>
</tbody></table>
<p>注：target是触发事件的源头组件；currentTarget是当前事件的绑定的组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">&quot;handler&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--点击内部按钮时，点击事件以冒泡方式扩散，也会触发外层view的事件处理函数。</span></span><br><span class="line"><span class="comment">对于view来说，target是按钮，currentTarget是自己--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><p>事件绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handler&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">// 在js文件的page函数下定义事件处理函数</span></span><br><span class="line">	<span class="title function_">handler</span>(<span class="params">event</span>)&#123; <span class="comment">//event是事件对象，可不写</span></span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>事件传参</p>
<ul>
<li><p>不能在绑定事件的同时为事件处理函数传参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这样写相当于要调用一个名称为handler(12)的事件处理函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;handler(12)&quot;</span>&gt;</span>事件传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以用data-自定义属性传参</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;handler&quot;</span> <span class="attr">data-info</span>=<span class="string">&quot;&#123;&#123;2&#125;&#125;&quot;</span>&gt;</span>事件传参<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&gt;</span></span><br><span class="line"><span class="comment">info会被解析为参数的名字</span></span><br><span class="line"><span class="comment">数值2会被解析为参数的值</span></span><br><span class="line"><span class="comment">在事件处理函数中通过event.target.dataset.参数名 即可获取到具体参数值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>为data中的数据动态赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过this.setData(data)方法为数据动态赋值</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">	<span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">changeCount</span>(<span class="params"></span>)&#123; <span class="comment">// 在事件处理函数中调用该方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">count</span>+<span class="number">1</span>  <span class="comment">//通过this.data获得data中的数据</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>input事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;ad&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;inputHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">inputHandler</span>(<span class="params">e</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">value</span>); <span class="comment">// 通过e.detail.value获取文本框中的最新值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现文本框和data之间的数据同步</p>
<ul>
<li>定义数据</li>
<li>渲染结构</li>
<li>绑定input事件处理函数</li>
</ul>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><ol>
<li><p>wx:if</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;type==1&#125;&#125;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">&quot;&#123;&#123;type==2&#125;&#125;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>保密<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结合<code>&lt;block&gt;</code>的wx:if</p>
<p>如果需要一次控制多个组件的展示与隐藏，可以在外层包裹一个容器，最好用<block>标签将多个组件打包一起控制，因为block不会在页面中被渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">view</span>&gt;</span> view1 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span> view2 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span><span class="comment">&lt;!--block只是容器，不会在页面中渲染--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>hidden</p>
<p>直接使用hidden&#x3D;”“ 也能控制元素的显示与隐藏：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">hidden</span>=<span class="string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span>adsad<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>if和hidden对比</p>
<ul>
<li>运行方式不同<ul>
<li>wx:if 以<strong>动态创建和移除元素</strong>的方式，控制元素的展示与隐藏</li>
<li>hidden 以<strong>切换样式</strong>的方式（display: none&#x2F;block;），控制元素的显示与隐藏</li>
</ul>
</li>
<li>使用建议<ul>
<li>频繁切换时，建议使用 hidden</li>
<li>控制条件复杂时，建议使用 wx:if 搭配 wx:elif、wx:else 进行展示与隐藏的切换</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><ol>
<li><p><code>wx:for</code></p>
<p>通过 <code>wx:for</code> 可以根据指定的数组，循环渲染重复的组件结构，语法示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">	索引是&#123;&#123;index&#125;&#125;, 当前项是&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!--默认下，当前循环项用item表示，当前循环项的索引用index表示--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>手动指定索引和当前项的变量名*（一般不用）</p>
<ul>
<li><p>使用 wx:for-index 可以指定当前循环项的索引的变量名</p>
</li>
<li><p>使用 wx:for-item 可以指定当前项的变量名</p>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;id&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;itemName&quot;</span>&gt;</span></span><br><span class="line">	索引是&#123;&#123;id&#125;&#125;，当前项是&#123;&#123;itemName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>wx:key</code>指定key值，提高渲染效率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// data数据</span><br><span class="line">data:&#123;</span><br><span class="line">	userList:[</span><br><span class="line">		&#123;id:1,name:&#x27;小红&#x27;&#125;,</span><br><span class="line">		&#123;id:2,name:&#x27;小bai&#x27;&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// wxml结构</span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123;userList&#125;&#125;&quot; wx:key=&quot;id&quot;&gt;&#123;&#123;item.name&#125;&#125;&lt;/view&gt;</span><br><span class="line">// 指定key值的时候不能用Mustache语法</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="WXSS模板样式"><a href="#WXSS模板样式" class="headerlink" title="WXSS模板样式"></a>WXSS模板样式</h2><h3 id="WXSS和CSS的关系"><a href="#WXSS和CSS的关系" class="headerlink" title="WXSS和CSS的关系"></a>WXSS和CSS的关系</h3><p>WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。 与 CSS 相比，WXSS 扩展的特性有：</p>
<ul>
<li><p>rpx 尺寸单位</p>
<ul>
<li>用于解决屏适配的尺寸单位</li>
<li>rpx将所有设备的屏幕在宽度上等分为750份，在不同设备运行时，自动换算成对应的像素单位来渲染，实现屏幕适配</li>
</ul>
</li>
<li><p>@import 样式导入</p>
 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*--@import后跟需要导入的外联样式表的相对路径，用;表示语句结束*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;common.wxss&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>小程序根目录下的 <code>app.json</code> 文件是小程序的全局配置文件，常用配置如下：</p>
<h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><p>记录当前小程序所有页面的存放路径</p>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>全局设置小程序窗口外观</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td>字符串</td>
<td>导航栏标题文字内容</td>
</tr>
<tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#000000</td>
<td>导航栏背景颜色</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>导航栏标题颜色，仅支持 black &#x2F; white</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>下拉刷新的窗口的背景色</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>下拉 loading 的样式，仅支持 dark &#x2F; light</td>
</tr>
<tr>
<td>enablePullDownRefresh</td>
<td>Boolean</td>
<td>false</td>
<td>是否全局开启下拉刷新，会作用于每个小程序页面</td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>页面上拉触底事件触发时距页面底部距离，单位为px</td>
</tr>
</tbody></table>
<h3 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h3><p>设置小程序底部的tabBar效果，只能配置至少2个、至多5个tab页签</p>
<p>渲染顶部tabBar时，不显示icon，只显示文本</p>
<p>tabBar节点的配置项</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必填</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>position</td>
<td>String</td>
<td>否</td>
<td>bottom</td>
<td>tabBar 的位置，仅支持 bottom&#x2F;top</td>
</tr>
<tr>
<td>borderStyle</td>
<td>String</td>
<td>否</td>
<td>black</td>
<td>tabBar 上边框的颜色，仅支持 black&#x2F;white</td>
</tr>
<tr>
<td>color</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tab 上文字的默认（未选中）颜色</td>
</tr>
<tr>
<td>selectedColor</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tab 上的文字选中时的颜色</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>否</td>
<td></td>
<td>tabBar 的背景色</td>
</tr>
<tr>
<td>list</td>
<td>Array</td>
<td>是</td>
<td></td>
<td>tab 页签的列表，2~5个</td>
</tr>
</tbody></table>
<p>每个list项的配置项</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必填</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pagePath</td>
<td>String</td>
<td>是</td>
<td>页面路径，页面必须在 pages 中预先定义</td>
</tr>
<tr>
<td>text</td>
<td>String</td>
<td>是</td>
<td>tab 上显示的文字</td>
</tr>
<tr>
<td>iconPath</td>
<td>String</td>
<td>否</td>
<td>未选中时的图标路径；当 postion 为 top 时，不显示 icon</td>
</tr>
<tr>
<td>selectedIconPath</td>
<td>String</td>
<td>否</td>
<td>选中时的图标路径；当 postion 为 top 时，不显示 icon</td>
</tr>
</tbody></table>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/home-active.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/message/message&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;消息&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/message.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/message-active.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/contact/contact&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;联系我们&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/contact.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/images/tabs/contact-active.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>是否启用新版的组件样式</p>
<h2 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h2><p>每个页面都有自己的 .json 配置文件，用来对当前页面的窗口外观、页面效果等进行配置。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>navigationBarTitleText</td>
<td>String</td>
<td>字符串</td>
<td>当前页面导航栏标题文字内容</td>
</tr>
<tr>
<td>navigationBarBackgroundColor</td>
<td>HexColor</td>
<td>#000000</td>
<td>当前页面导航栏背景颜色</td>
</tr>
<tr>
<td>navigationBarTextStyle</td>
<td>String</td>
<td>white</td>
<td>当前页面导航栏标题颜色，仅支持 black &#x2F; white</td>
</tr>
<tr>
<td>backgroundColor</td>
<td>HexColor</td>
<td>#ffffff</td>
<td>下拉刷新的窗口的背景色</td>
</tr>
<tr>
<td>backgroundTextStyle</td>
<td>String</td>
<td>dark</td>
<td>下拉 loading 的样式，仅支持 dark &#x2F; light</td>
</tr>
<tr>
<td>enablePullDownRefresh</td>
<td>Boolean</td>
<td>false</td>
<td>是否为当前页面开启下拉刷新</td>
</tr>
<tr>
<td>onReachBottomDistance</td>
<td>Number</td>
<td>50</td>
<td>页面上拉触底事件触发时距页面底部距离，单位为px</td>
</tr>
</tbody></table>
<h2 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h2><p>出于安全性方面的考虑，小程序官方对数据接口的请求做出了如下 两个限制：</p>
<ul>
<li>只能请求 HTTPS 类型的接口</li>
<li>必须将接口的域名添加到信任列表中<ul>
<li>在小程序管理后台-&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名</li>
<li>域名只支持 https 协议 </li>
<li>域名不能使用 IP 地址或 localhost </li>
<li>域名必须经过 ICP 备案 </li>
<li>域名一个月内最多可申请 5 次修改</li>
<li>配置完成后在开发工具-&gt;详情-&gt;项目配置 可以查看域名信息</li>
</ul>
</li>
</ul>
<h3 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/api/get&#x27;</span>,  <span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,  <span class="comment">//请求方式</span></span><br><span class="line">    <span class="attr">data</span>: &#123;  <span class="comment">//请求参数</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;  <span class="comment">//请求成功之后的回调</span></span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="发起POST请求"><a href="#发起POST请求" class="headerlink" title="发起POST请求"></a>发起POST请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/api/post&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">33</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">   		<span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="在页面刚加载时请求数据"><a href="#在页面刚加载时请求数据" class="headerlink" title="在页面刚加载时请求数据"></a>在页面刚加载时请求数据</h3><p>在页面的 onLoad 事件 中调用获取数据的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getInfo</span>()  <span class="comment">// 通过this调用页面方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">postInfo</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="跳过-request-合法域名校验"><a href="#跳过-request-合法域名校验" class="headerlink" title="跳过 request 合法域名校验"></a>跳过 request 合法域名校验</h3><p>如果后端程序员仅仅提供了 http 协议的接口、暂时没有提供 https 协议的接口。 此时为了不耽误开发的进度，我们可以在微信开发者工具-&gt;详情-&gt;本地设置中，临时开启「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」选项，跳过 request 合法域名的校验。</p>
<p> 注意： 跳过 request 合法域名校验的选项，仅限在开发与调试阶段使用！</p>
<h3 id="跨域和Ajax的说明"><a href="#跨域和Ajax的说明" class="headerlink" title="跨域和Ajax的说明"></a>跨域和Ajax的说明</h3><p>跨域问题只存在于基于浏览器的 Web 开发中。由于小程序的宿主环境不是浏览器，而是微信客户端，所以小 程序中不存在跨域的问题。</p>
<p>Ajax 技术的核心是依赖于浏览器中的 XMLHttpRequest 这个对象，由于小程序的宿主环境是微信客户端，所 以小程序中不能叫做“发起 Ajax 请求”，而是叫做“发起网络数据请求”。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>获取data中定义的变量</p>
<ul>
<li>this.data.变量</li>
</ul>
<p>为data中定义的变量动态赋值</p>
<ul>
<li>this.setData({ msg: “new data” })</li>
</ul>
<p>获取文本框中的值</p>
<ul>
<li>event.detail.value</li>
</ul>
<p>设置文本框中初始值</p>
<ul>
<li><code>&lt;input value=&quot;ad&quot;&gt;&lt;/input&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>视图与逻辑</title>
    <url>/2022/04/26/00-00-00/</url>
    <content><![CDATA[<h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><h3 id="小程序中实现页面导航的两种方式"><a href="#小程序中实现页面导航的两种方式" class="headerlink" title="小程序中实现页面导航的两种方式"></a>小程序中实现页面导航的两种方式</h3><ol>
<li><p>声明式导航</p>
<p>在页面上声明一个 <code>&lt;navigator&gt;</code>导航组件，点击实现页面跳转</p>
<ul>
<li>导航到tabBar页面<ul>
<li>tabBar 页面指的是被配置为 tabBar 的页面。需要指定 url 属性和 open-type 属性</li>
<li>url 表示要跳转的页面的地址，必须以 &#x2F; 开头</li>
<li>open-type 表示跳转的方式，必须为 switchTab</li>
<li><code>&lt;navigator url=&quot;/pages/message/message&quot; open-type=&quot;switchTab&quot;&gt;导航到消息页面&lt;/navigator&gt;</code></li>
</ul>
</li>
<li>导航到非tabBar页面<ul>
<li><code>&lt;navigator url=&quot;/pages/info/info&quot; open-type=&quot;navigate&quot;&gt;导航到info页面&lt;/navigator&gt;</code></li>
<li><code>open-type</code>属性可以省略</li>
</ul>
</li>
<li>后退导航<ul>
<li><code>&lt;navigator open-type=&quot;navigateBack&quot; delta=&quot;1&quot;&gt;返回上一页&lt;/navigator&gt;</code></li>
<li>delta属性值为1时，可以省略</li>
</ul>
</li>
</ul>
</li>
<li><p>编程式导航</p>
<p>调用小程序的导航 API，实现页面的跳转</p>
<ul>
<li><p>导航到tabBar页面，通过<code>wx.switchTab(Object object)</code>方法</p>
<ul>
<li><p>object参数对象的属性列表</p>
</li>
<li><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>是否必选</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>string</td>
<td>是</td>
<td>需要跳转到的非 tabBar 页面的路径，路径后可以带参数</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WXML文件</span><br><span class="line">&lt;button bindtap=&quot;gotoMessage&quot;&gt;跳转到message页面&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">js文件</span><br><span class="line">gotoMessage() &#123;</span><br><span class="line"> 	wx.switchTab(&#123;</span><br><span class="line">   		url: &#x27;/pages/message/message&#x27;</span><br><span class="line"> 	&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>导航到非tabBar页面，通过<code>wx.navigateTo(Object object)</code>方法</p>
</li>
<li><p>后退导航，通过<code>wx.navigateBack(Object object)</code>方法</p>
<ul>
<li><table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>是否必选</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>delta</td>
<td>number</td>
<td>否</td>
<td>返回的页面数，如果 delta 大于现有页面数，则返回到首页</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h3><ol>
<li><p>声明式导航传参</p>
<p>直接在url路径后面携带参数</p>
<ul>
<li>参数与路径之间使用 ? 分隔</li>
<li>参数键与参数值用 &#x3D; 相连</li>
<li>不同参数用 &amp; 分隔</li>
<li><code>&lt;navigator url=&quot;/pages/info/info?name=zs&amp;age=2&quot;&gt;跳转到info页面&lt;/navigator&gt;</code></li>
</ul>
</li>
<li><p>编程式导航传参，同上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">gotoInfo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/pages/info/info?name=ls&amp;gender=男&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>在onLoad中接收导航参数，上面两种导航传参都可以在onLoad中直接获取到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123; <span class="comment">// options就是参数对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">query</span>: options</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><h4 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h4><p>启用下拉刷新有两种方式，在实际开发中，推荐使用第 2 种，为需要的页面单独开启。</p>
<ol>
<li>全局开启下拉刷新<ul>
<li>在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true</li>
</ul>
</li>
<li>局部开启下拉刷新<ul>
<li>在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true</li>
</ul>
</li>
</ol>
<h4 id="配置样式"><a href="#配置样式" class="headerlink" title="配置样式"></a>配置样式</h4><p>见模板与配置-&gt;页面配置</p>
<h4 id="监听下拉刷新事件"><a href="#监听下拉刷新事件" class="headerlink" title="监听下拉刷新事件"></a>监听下拉刷新事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">onPullDownRefresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;触发了message页面的下拉刷新&#x27;)</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  wx.<span class="title function_">stopPullDownRefresh</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>注：当处理完下拉刷新后，下拉刷新的loading 效果会一直显示，不会主动消失，需要手动隐藏，调用 <code>wx.stopPullDownRefresh() </code>可以停止当前页面的下拉刷新。</p>
<h3 id="上拉触底-上拉加载更多"><a href="#上拉触底-上拉加载更多" class="headerlink" title="上拉触底 (上拉加载更多)"></a>上拉触底 (上拉加载更多)</h3><h4 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h4><p><code>onReachBottom: function () &#123;&#125;,</code></p>
<h4 id="补充ES6数组拼接"><a href="#补充ES6数组拼接" class="headerlink" title="补充ES6数组拼接"></a>补充ES6数组拼接</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> array2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">let</span> array3 = [array1,array2] <span class="comment">// [[1,2,3],[4,5,6]]</span></span><br><span class="line"><span class="comment">// 这样写是一个数组中包含了两个对象，一个对象是array1，一个对象是array2</span></span><br><span class="line">[...array1,...array2]  <span class="comment">// [1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">// 使用扩展运算符可以分解数组</span></span><br></pre></td></tr></table></figure>

<h4 id="添加loading提示框"><a href="#添加loading提示框" class="headerlink" title="添加loading提示框"></a>添加loading提示框</h4><p>在开发者工具中找到开发者文档-&gt;API-&gt;界面-&gt;交互-&gt;<code>wx.showLoading(Object object)</code></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>默认值</th>
<th>必填</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>string</td>
<td></td>
<td>是</td>
<td>提示的内容</td>
</tr>
<tr>
<td>mask</td>
<td>boolean</td>
<td>false</td>
<td>否</td>
<td>是否显示透明蒙层，防止触摸穿透</td>
</tr>
<tr>
<td>success</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用成功的回调函数</td>
</tr>
<tr>
<td>fail</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用失败的回调函数</td>
</tr>
<tr>
<td>complete</td>
<td>function</td>
<td></td>
<td>否</td>
<td>接口调用结束的回调函数（调用成功、失败都会执行）</td>
</tr>
</tbody></table>
<p>请求数据时打开loading，请求完毕后无论成功还是失败都关闭loading <code>wx.hideLoading()</code></p>
<h4 id="节流处理"><a href="#节流处理" class="headerlink" title="节流处理"></a>节流处理</h4><p>防止用户多次请求</p>
<ul>
<li>在 data 中定义 isloading 节流阀<ul>
<li>false 表示当前没有进行任何数据请求</li>
<li>true 表示当前正在进行数据请求</li>
</ul>
</li>
<li>在 getColors() 方法中修改 isloading 节流阀的值<ul>
<li>在刚调用 getColors 时将节流阀设置 true</li>
<li>在网络请求的 complete 回调函数中，将节流阀重置为 false</li>
</ul>
</li>
<li>在 onReachBottom 中判断节流阀的值，从而对数据请求进行节流控制<ul>
<li>如果节流阀的值为 true，则阻止当前请求</li>
<li>如果节流阀的值为 false，则发起数据请求</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">  <span class="attr">colorList</span>: [],</span><br><span class="line">  <span class="attr">isloding</span>: <span class="literal">false</span> <span class="comment">// 定义节流阀</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">getColors</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="comment">// 开启节流阀</span></span><br><span class="line">    <span class="attr">isloding</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 需要展示 loading 效果</span></span><br><span class="line">  wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  wx.<span class="title function_">request</span>(&#123; <span class="comment">// 请求数据</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;https://www.escook.cn/api/color&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">colorList</span>: [...<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">colorList</span>, ...res.<span class="property">data</span>]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123; <span class="comment">// 请求完成后关闭loading</span></span><br><span class="line">      wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; <span class="comment">// 同时关闭节流阀，代表用户可以发起下一次请求</span></span><br><span class="line">        <span class="attr">isloding</span>: <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getColors</span>()</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onReachBottom</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">isloding</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getColors</span>()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="自定义编译模式"><a href="#自定义编译模式" class="headerlink" title="自定义编译模式"></a>自定义编译模式</h2><p>每次保存代码后，模拟器的预览模块都会跳转到项目的首页，我们要手动点到正在编写的页面查看效果，很麻烦。可以自定义编译模式，暂时改变启动页面，还可以定义启动参数</p>
<p>工具栏-&gt;普通编译下拉-&gt;添加编译模式-&gt;自定义编译模式</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>生命周期（Life Cycle）是指一个对象从创建 -&gt; 运行 -&gt; 销毁的整个阶段，强调的是一个时间段。</p>
<p>在小程序中，生命周期分为两类</p>
<ul>
<li>应用生命周期<ul>
<li>特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程</li>
</ul>
</li>
<li>页面生命周期<ul>
<li>特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程</li>
</ul>
</li>
</ul>
<h3 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h3><p>生命周期函数：是由小程序框架提供的<strong>内置函数</strong>，会伴随着生命周期，自动按次序执行。</p>
<p>生命周期函数的作用：允许程序员在特定的时间点，执行某些特定的操作。例如，页面刚加载的时候，可以在 onLoad 生命周期函数中初始化页面的数据。</p>
<p> 注意：生命周期强调的是时间段，生命周期函数强调的是时间点。</p>
<p>与生命周期的分类对应，生命周期函数也分为两类，应用的和页面的</p>
<h4 id="应用的生命周期函数"><a href="#应用的生命周期函数" class="headerlink" title="应用的生命周期函数"></a>应用的生命周期函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="comment">// 小程序初始化完成时调用，全局只触发一次</span></span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params">options</span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 小程序启动时调用</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params">options</span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 小程序进入后台时调用</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="页面的生命周期函数"><a href="#页面的生命周期函数" class="headerlink" title="页面的生命周期函数"></a>页面的生命周期函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 页面.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">// 监听页面加载，一个页面只调用1次</span></span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params">options</span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 监听页面显示</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 监听页面初次渲染完成，一个页面只调用1次</span></span><br><span class="line">    <span class="attr">onReady</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 监听页面隐藏</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="comment">// 监听页面卸载，一个页面只调用1次</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="WXS脚本"><a href="#WXS脚本" class="headerlink" title="WXS脚本"></a>WXS脚本</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>WXS（WeiXin Script）是小程序独有的一套脚本语言，结合 WXML，可以构建出页面的结构。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>wxml 中无法调用在页面的 .js 中定义的函数，但是，wxml 中可以调用 wxs 中定义的函数。因此，<strong>小程序中 wxs 的典型应用场景就是“过滤器”。</strong></p>
<h3 id="wxs和js的关系"><a href="#wxs和js的关系" class="headerlink" title="wxs和js的关系*"></a>wxs和js的关系*</h3><p>虽然 wxs 的语法类似于 JavaScript，但是 wxs 和 JavaScript 是完全不同的两种语言</p>
<ul>
<li>wxs 有自己的数据类型<ul>
<li>number 数值类型、string 字符串类型、boolean 布尔类型、object 对象类型</li>
<li>function 函数类型、array 数组类型、 date 日期类型、 regexp 正则</li>
</ul>
</li>
<li>wxs 不支持类似于 ES6 及以上的语法形式<ul>
<li>不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc…</li>
<li>支持：var 定义变量、普通 function 函数等类似于 ES5 的语法</li>
</ul>
</li>
<li>wxs 遵循 CommonJS 规范<ul>
<li>module 对象</li>
<li>require() 函数</li>
<li>module.exports 对象</li>
</ul>
</li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><ol>
<li><p>内嵌式</p>
<p>wxs 代码可以编写在wxml文件中的<code>&lt;wxs&gt;</code>标签内，<strong>必须提供 module 属性</strong>，用来指定当前 wxs 的模块名称，方便在 wxml 中访问模块中的成员</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;m1.toUpper(username)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">module</span>=<span class="string">&quot;m1&quot;</span>&gt;</span></span><br><span class="line">  module.exports.toUpper = function(str) &#123;</span><br><span class="line">    return str.toUpperCase()</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外联式</p>
<p>wxs 代码还可以编写在以 .wxs 为后缀名的文件内，就像 javascript 代码可以编写在以 .js 为后缀名的文件中一样，该文件需要自己创建</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tools.wxs文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toLower</span>(<span class="params">str</span>) &#123; <span class="comment">// 定义函数</span></span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">toLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="comment">// 向外部共享</span></span><br><span class="line">  <span class="attr">toLower</span>: toLower</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--调用m2模块中的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;m2.toLower(country)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用外联的wxs脚本，将其命名为m2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">&quot;../../utils/tools.wxs&quot;</span> <span class="attr">module</span>=<span class="string">&quot;m2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="wxs的特点"><a href="#wxs的特点" class="headerlink" title="wxs的特点"></a>wxs的特点</h3><ol>
<li><p>与js不同</p>
</li>
<li><p>不能作为组件的事件回调</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--正确用法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;m2.toLower(query)&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--错误用法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtao</span>=<span class="string">&quot;m2.toLower&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>隔离性</p>
<p>隔离性指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。</p>
<ul>
<li>wxs 不能调用 js 中定义的函数</li>
<li>wxs 不能调用小程序提供的 API</li>
</ul>
</li>
<li><p>性能好</p>
</li>
</ol>
<h3 id="示例-处理手机号"><a href="#示例-处理手机号" class="headerlink" title="示例-处理手机号"></a>示例-处理手机号</h3><p>将一串手机号分组，123-4567-8901</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// utils/tools.wxs</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">splitPhone</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str.<span class="property">length</span>!=<span class="number">11</span>) <span class="keyword">return</span> str;</span><br><span class="line">    <span class="keyword">var</span> arr = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    arr.<span class="title function_">splice</span>(<span class="number">3</span>,<span class="number">0</span>,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    arr.<span class="title function_">splice</span>(<span class="number">8</span>,<span class="number">0</span>,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">splitPhone</span>:splitPhone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>wxApplet</category>
      </categories>
      <tags>
        <tag>wxApplet</tag>
      </tags>
  </entry>
  <entry>
    <title>java设计模式</title>
    <url>/2023/10/12/08-30-37/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个问题通常有n种解法，其中肯定有一种解法是最优的，这个最优的解法被人总结出来了，称之为<strong>设计模式</strong>。</p>
<p>关于设计模式，重点关注</p>
<ul>
<li>解决什么问题</li>
<li>怎么写</li>
</ul>
<span id="more"></span>

<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>确保一个类只有一个对象</p>
<h3 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h3><p>实现方法有很多种。主要的要点包括</p>
<ul>
<li>把类的<strong>构造器私有</strong>，确保外部无法创建对象。</li>
<li>定义一个<strong>类变量</strong>记住类的一个对象</li>
<li>定义一个<strong>类方法</strong>，返回对象。</li>
</ul>
<h4 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h4><p>拿对象时，对象早就创建好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="comment">// 2、定义一个类变量记住类的一个对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">	<span class="comment">// 1、私有构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3、定义一个类方法返回对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h4><p>拿对象时才开始创建对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="comment">// 2、定义一个类变量记住类的一个对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> A a;</span><br><span class="line">	<span class="comment">// 1、私有构造器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 3、定义一个类方法返回对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="literal">null</span>)&#123;</span><br><span class="line">            a=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>在某些业务场景下，使用单例模式，可以避免浪费内存。如任务管理器对象、全局只有一个，获取运行时对象。</p>
<h2 id="模板方法-设计模式"><a href="#模板方法-设计模式" class="headerlink" title="模板方法 设计模式"></a>模板方法 设计模式</h2><p><strong>主要解决方法中存在重复代码的问题</strong>。</p>
<p>比如两个方法大部分代码相同，只有少部分不同的代码。</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//用final修饰，防止被重写</span></span><br><span class="line">        System.out.println(<span class="string">&quot;唱一首你喜欢的歌：&quot;</span>); <span class="comment">//相同部分</span></span><br><span class="line">        doSing(); <span class="comment">//不同部分</span></span><br><span class="line">        System.out.println(<span class="string">&quot;唱完了!&quot;</span>); <span class="comment">//相同部分</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSing</span><span class="params">()</span>; <span class="comment">//把不同部分定义为抽象方法，强制子类实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只小小小小鸟，想要飞就能飞的高~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵喵喵喵喵~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 目标：搞清楚模板方法设计模式能解决什么问题，以及怎么写。</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.sing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul>
<li>定义一个抽象类，把子类中相同的代码写成一个模板方法(建议使用final修饰，防止重写)。</li>
<li>把模板方法中不能确定的代码写成抽象方法，并在模板方法中调用。</li>
<li>子类继承抽象类，实现父类的抽象方法。</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>以明星和经纪人举例。明星要做的是唱歌、跳舞、拍戏，但是每次唱歌和跳舞之前或者之后都要做一些繁琐的事情，那么这些事情就可以交给经纪人，比如准备话筒，搭建舞台和收钱。</p>
<p>那我们就需要明星类和经纪人类，但是如何让他们的业务保持一致呢(经纪人要代理明星业务范围内的活)？<strong>让他们实现同一个接口</strong>。</p>
<h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ul>
<li>必须定义接口，里面定义一些行为，用来约束被代理对象和代理对象都要完成的事情。</li>
<li>定义一个实现类实现接口，这个实现类的对象代表被代理的对象。</li>
<li>定义一个测试类，在里面创建被代理对象，然后为其创建一个代理对象返回。（重点）</li>
<li>代理对象中，需要模拟收首付款，真正触发被代理对象的行为，然后接收尾款操作。</li>
<li>通过返回的代理对象进行方法的调用，观察动态代理的执行流程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Star</span>&#123;</span><br><span class="line">    String <span class="title function_">sing</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigStar</span> <span class="keyword">implements</span> <span class="title class_">Star</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BigStar</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sing</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="comment">//这个类用于生成代理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title function_">createProxy</span><span class="params">(BigStar bigStar)</span>&#123;</span><br><span class="line">       <span class="comment">/* newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                InvocationHandler h)</span></span><br><span class="line"><span class="comment">                参数1：用于指定一个类加载器</span></span><br><span class="line"><span class="comment">                参数2：接口数组，指定生成的代理长什么样子，也就是有哪些方法</span></span><br><span class="line"><span class="comment">                参数3：用来指定生成的代理对象要干什么事情</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">        <span class="comment">// Star starProxy = ProxyUtil.createProxy(s);</span></span><br><span class="line">        <span class="comment">// starProxy.sing(&quot;好日子&quot;);</span></span><br><span class="line">        <span class="type">Star</span> <span class="variable">starProxy</span> <span class="operator">=</span> (Star) Proxy.newProxyInstance(ProxyUtil.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Star.class&#125;, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span> <span class="comment">// 回调方法</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                        <span class="comment">// 代理对象要做的事情，会在这里写代码</span></span><br><span class="line">                        <span class="comment">// method代表代理的具体方法</span></span><br><span class="line">                        <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;sing&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备话筒，收钱20万&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">&quot;dance&quot;</span>))&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;准备场地，收钱1000万&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//返回给被代理对象，被代理对象执行对应方法</span></span><br><span class="line">                        <span class="keyword">return</span> method.invoke(bigStar, args);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> starProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigStar</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigStar</span>(<span class="string">&quot;杨超越&quot;</span>);</span><br><span class="line">        <span class="type">Star</span> <span class="variable">starProxy</span> <span class="operator">=</span> ProxyUtil.createProxy(s);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> starProxy.sing(<span class="string">&quot;好日子&quot;</span>);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">        starProxy.dance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><p>方法中不属于主要业务的其他重复代码可以用代理完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 登录功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName,String passWord)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">// 查询用户，返回数组的形式。</span></span><br><span class="line">    String[] selectUsers() <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面有一个UserService接口的实现类，下面<strong>每一个方法中都有计算方法运行时间的代码</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务实现类（面向接口编程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName, String passWord)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(passWord))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录失败，用户名或密码错误~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;login方法耗时：&quot;</span>+(time2-time1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;成功删除了1万个用户~&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteUsers方法耗时：&quot;</span>+(time2-time1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectUsers() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">		<span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;查询出了3个用户&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张全蛋&quot;</span>, <span class="string">&quot;李二狗&quot;</span>, <span class="string">&quot;牛爱花&quot;</span>&#125;;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="type">long</span> <span class="variable">time2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;selectUsers方法耗时：&quot;</span>+(time2-time1));</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个方法中<strong>计算耗时的代码都是重复的</strong>，况且这些代码并不属于UserSerivce的主要业务</p>
<p>把计算每一个方法的耗时操作，交给代理对象来做。</p>
<p>先在UserService类中把计算耗时的代码删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户业务实现类（面向接口编程）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String loginName, String passWord)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>.equals(loginName) &amp;&amp; <span class="string">&quot;123456&quot;</span>.equals(passWord))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录成功，欢迎光临本系统~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您登录失败，用户名或密码错误~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUsers</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功删除了1万个用户~&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectUsers() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;查询出了3个用户&quot;</span>);</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张全蛋&quot;</span>, <span class="string">&quot;李二狗&quot;</span>, <span class="string">&quot;牛爱花&quot;</span>&#125;;</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后为UserService生成一个动态代理对象，在动态代理中调用目标方法，在调用目标方法之前和之后记录毫秒值，并计算方法运行的时间。代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title function_">createProxy</span><span class="params">(UserService userService)</span>&#123;</span><br><span class="line">        UserService userServiceProxy= (UserService) Proxy.newProxyInstance(</span><br><span class="line">            ProxyUtil.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;UserService.class&#125;, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;             </span><br><span class="line">                <span class="keyword">if</span>( method.getName().equals(<span class="string">&quot;login&quot;</span>) || method.getName().equals(<span class="string">&quot;deleteUsers&quot;</span>)||</span><br><span class="line">                method.getName().equals(<span class="string">&quot;selectUsers&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//方法运行前记录毫秒值         </span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                    <span class="comment">//执行方法</span></span><br><span class="line">                    <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line">                    <span class="comment">//执行方法后记录毫秒值</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                    System.out.println(method.getName() + <span class="string">&quot;方法执行耗时：&quot;</span> + (endTime - startTime)/ <span class="number">1000.0</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> rs;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">rs</span> <span class="operator">=</span> method.invoke(userService, args);</span><br><span class="line">                    <span class="keyword">return</span> rs;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> userServiceProxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在测试类中为UserService创建代理对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标：使用动态代理解决实际问题，并掌握使用代理的好处。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 1、创建用户业务对象。</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ProxyUtil.createProxy(<span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、调用用户业务的功能。</span></span><br><span class="line">        userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.deleteUsers();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] names = userService.selectUsers();</span><br><span class="line">        System.out.println(<span class="string">&quot;查询到的用户是：&quot;</span> + Arrays.toString(names));</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2023/06/23/21-00-00/</url>
    <content><![CDATA[<h2 id="数组理论基础"><a href="#数组理论基础" class="headerlink" title="数组理论基础"></a>数组理论基础</h2><p>数组是存放在<strong>连续内存空间</strong>上的<strong>相同类型数据</strong>的集合。正是因为数组在内存空间的地址上是连续的，所以在增删元素时，难免要移动其他元素的地址。</p>
<p><strong>数组的元素是不能删的，只能覆盖。</strong></p>
<p>关于二维数组的内存地址空间的连续性问题，不同的编程语言的内存管理不同。在C++中，二维数组是连续分布的；但在Java中二维数组的每一行头结点的地址是没有规则的。</p>
<span id="more"></span>



<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>题目的前提是数组为<strong>有序数组</strong>，同时题目还强调数组中<strong>无重复元素</strong>。二分法逻辑比较简单，但有两个容易搞错的点，即</p>
<ul>
<li><p><code>while(left &lt; right)</code>    or    <code>while(left &lt;= right)</code></p>
</li>
<li><p><code> right = middle</code>    or     <code>right = middle - 1</code></p>
</li>
</ul>
<p>主要原因在于<strong>对区间的定义没想清楚</strong>，在二分查找时要遵循<strong>循环不变量</strong>原则，区间的定义就是不变量。</p>
<p>区间的一般定义有两种，左闭右闭和左闭右开。因此衍生了两种主要的写法</p>
<h3 id="左闭右闭"><a href="#左闭右闭" class="headerlink" title="左闭右闭"></a>左闭右闭</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span>,mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        mid=(left + right) &gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid]) left=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right=mid-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(logn)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="左闭右开"><a href="#左闭右开" class="headerlink" title="左闭右开"></a>左闭右开</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> left=<span class="number">0</span>,right=nums.<span class="property">length</span>,mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        mid=(left + right) &gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(target==nums[mid]) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid]) left=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> right=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(logn)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li>35</li>
<li>34</li>
<li>69</li>
<li>367</li>
</ul>
<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>题目：给定一个数组nums和一个值val，<strong>原地</strong>移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
</blockquote>
<p>问题乍一看很简单，但涉及到数组的底层理论，即：数组元素不能删除，只能覆盖。</p>
<p>有一些库可以轻易实现该操作，例如vector中的erase操作，此题的本质就是实现erase函数。</p>
<h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> length=nums.<span class="property">length</span>; <span class="comment">// 记录下原数组的大小</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;)&#123; <span class="comment">// 这里不能笼统的i+1，碰到要删除的元素时，元素整体前移，此时i不用+1</span></span><br><span class="line">        <span class="comment">// 此外，i&lt;length,而不是i&lt;nums.length,因为数组是动态变化的，length的值跟随数组变化</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&lt;length-<span class="number">1</span>;j++)&#123; <span class="comment">// 覆盖待删除元素 </span></span><br><span class="line">                nums[j]=nums[j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            length--; <span class="comment">// length--和for循环的位置不能变，否则for循环中条件要变</span></span><br><span class="line">        &#125;<span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n^2)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>也叫快慢指针法，定义快慢指针</p>
<ul>
<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>
<li>慢指针：指向更新 新数组下标的位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="keyword">function</span>(<span class="params">nums, val</span>) &#123;</span><br><span class="line">    <span class="comment">// j指针用于遍历原数组，是快指针</span></span><br><span class="line">    <span class="comment">// i指针用于构成新数组，是慢指针</span></span><br><span class="line">    <span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;nums.<span class="property">length</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]!=val)&#123; <span class="comment">// 快指针指向的元素不是待删元素时，可以插入到新数组</span></span><br><span class="line">            nums[i]=nums[j]; <span class="comment">// 插入到新数组中的i指针位置</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(1)</li>
</ul>
<h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li><p>26</p>
</li>
<li><p>283</p>
</li>
</ul>
<h2 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>题目：给定一个 <strong>非递减</strong>的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减</strong> 排序。</p>
</blockquote>
<p>很容易想到暴力的方法，即先遍历数组，取每个元素的平方，再快排。</p>
<h3 id="双指针法-1"><a href="#双指针法-1" class="headerlink" title="双指针法"></a>双指针法</h3><p>观察数组，由于负数的存在，平方后数组中最大的元素在两边。因此可以在<strong>两边各放指针向中间靠拢</strong>，得到由大到小的元素，数组从后往前构造即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> new_num=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++) nums[i]*=nums[i]; <span class="comment">// 先遍历，得到元素的平方</span></span><br><span class="line">    <span class="keyword">var</span> index=nums.<span class="property">length</span>-<span class="number">1</span>,left=<span class="number">0</span>,right=nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[left]&gt;nums[right])&#123;</span><br><span class="line">            new_num[index--]=nums[left];</span><br><span class="line">            left++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            new_num[index--]=nums[right];</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)</li>
<li>空间复杂度：O(n)</li>
</ul>
<p>也可以从最小的元素向两边扩散，得到由小到大的元素，但处理上比较麻烦</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sortedSquares = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nums_new=[]</span><br><span class="line">    <span class="keyword">let</span> min=<span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> index</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        nums[i]*=nums[i]</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;min)&#123; <span class="comment">//得到最小值的索引</span></span><br><span class="line">            index=i</span><br><span class="line">            min=nums[i]</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index&lt;=<span class="number">0</span>) <span class="keyword">return</span> nums</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left=index-<span class="number">1</span>,right=index,k=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span>&amp;&amp;right&lt;nums.<span class="property">length</span>)&#123; <span class="comment">//从最小值向两边扩散</span></span><br><span class="line">            <span class="keyword">if</span>(nums[right]&lt;nums[left])&#123;</span><br><span class="line">                nums_new[k++]=nums[right]</span><br><span class="line">                right++</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums_new[k++]=nums[left]</span><br><span class="line">                left--</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两边多出来的元素再加进新数组，下面两个while只会执行一个</span></span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums_new[k++]=nums[left]</span><br><span class="line">            left--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(right&lt;nums.<span class="property">length</span>)&#123;</span><br><span class="line">            nums_new[k++]=nums[right]</span><br><span class="line">            right++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums_new</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><strong>思考：为什么这个算法不能原地工作？</strong></p>
<p>如果原地工作，则index初始指向原数组的最后一位，当right指向的元素大于left指向的元素时，只需要把index–即可；但若反过来，则需要把left指向的元素赋到index位置，此时index指向的元素会被覆盖，数组的元素就不对了，即使把index指向的元素先取出来，等覆盖后left位置空出来再赋给left，这样会导致数组元素排列的无序性。</p>
<h2 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>题目：给定一个含有n个正整数的数组和一个正整数s，找出该数组中满足其和 ≥ s 的<strong>长度最小的连续</strong>子数组，并返回其长度。如果不存在符 合条件的子数组，返回 0。</p>
</blockquote>
<p>暴力方法：两个循环，一个遍历数组起始位置，一个遍历数组结束位置，组合出所有可能的数组位置从而得到长度。</p>
<p>该问题的一个很自然的思路是从小到大列举数组的长度，看最小能满足条件的长度是多少。但这样就需要列举数组长度个 结果。</p>
<p>刚刚那种思路是<strong>固定窗口大小，改变窗口位置</strong>。那能不能<strong>固定窗口位置，改变窗口大小</strong>呢？</p>
<p>由此想到，可以遍历数组，遍历窗口的<strong>起始位置</strong>，增加窗口大小直到满足条件，由此可得在该位置下最小的窗口大小，在一次完整的遍历之后即可得到全局解。<strong>本质上也是双指针</strong>的方法。</p>
<p>但是如果遍历起始位置，其方法与暴力破解没有区别。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum,result=<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 以i为头的子数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        j=i;sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum&lt;target&amp;&amp;j&lt;nums.<span class="property">length</span>)&#123;</span><br><span class="line">            sum+=nums[j];j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">            <span class="keyword">if</span>((j-i)&lt;result) result=j-i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(result==<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>) result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n^2)</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>那么再换个思路，如果<strong>遍历窗口的结束位置</strong>呢? 在遍历结束位置时，只有<strong>当条件已经满足才后移起始位置</strong>以得到该结束位置下满足条件的最小解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span> (<span class="params">target, nums</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result=<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>; <span class="comment">// 全局最优解</span></span><br><span class="line">  <span class="keyword">var</span> sum=<span class="number">0</span>; <span class="comment">// 当前选中数组的和</span></span><br><span class="line">  <span class="keyword">var</span> start=<span class="number">0</span>; <span class="comment">// 初始起始位置为0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> end=<span class="number">0</span>;end&lt;nums.<span class="property">length</span>;end++)&#123;</span><br><span class="line">    sum+=nums[end]; <span class="comment">// 每次先计算数组和</span></span><br><span class="line">    <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">      sum-=nums[start++]; <span class="comment">// 找到该结束位置下满足条件的最小长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(start&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      sum += nums[--start]; <span class="comment">// 出循环时已经不满足条件，重新满足条件</span></span><br><span class="line">      result = <span class="title class_">Math</span>.<span class="title function_">min</span>(result, end - start + <span class="number">1</span>); <span class="comment">// 记录结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>) result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 以上写法还有优化的空间</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  for(var end=0;end&lt;nums.length;end++)&#123;</span></span><br><span class="line"><span class="comment">    sum+=nums[end];</span></span><br><span class="line"><span class="comment">    while(sum&gt;=target)&#123;</span></span><br><span class="line"><span class="comment">      result=Math.min(result,end-start+1);</span></span><br><span class="line"><span class="comment">      sum-=nums[start++];</span></span><br><span class="line"><span class="comment">    &#125; // 出while时不满足&gt;=target条件，直接end++，上面已经记录过结果</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  return result==Number.MAX_VALUE?0:result;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度：O(n)，每个元素在滑动窗后进来和出去各操作一次，复杂度为2×n</li>
<li>空间复杂度：O(1)</li>
</ul>
<p>只要思想对，写法可以有很多种</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minSubArrayLen = <span class="keyword">function</span>(<span class="params">target, nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span>,right=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> sum=nums[<span class="number">0</span>] <span class="comment">//sum初始为nums[0]</span></span><br><span class="line">    <span class="keyword">while</span>(right&lt;nums.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(sum&gt;=target)&#123; <span class="comment">//这里千万不能写成if</span></span><br><span class="line">            res=<span class="title class_">Math</span>.<span class="title function_">min</span>(right-left+<span class="number">1</span>,res)</span><br><span class="line">            sum-=nums[left++]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(sum&lt;target)&#123;</span><br><span class="line">            sum+=nums[++right] <span class="comment">//right初始为0，要先++</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res==<span class="title class_">Infinity</span>?<span class="number">0</span>:res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="相关题目-2"><a href="#相关题目-2" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li>904</li>
</ul>
<h2 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><blockquote>
<p>题目：给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>
</blockquote>
<p>这道题并没有涉及到什么算法，而是一道模拟题。在循环时一定要遵循<strong>循环不变量</strong>原则，判断边界时确定好左闭右开 ，循环时就用左闭右开</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 左闭右开原则</span></span><br><span class="line"><span class="keyword">var</span> generateMatrix = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(n/<span class="number">2</span>);<span class="comment">//上取整</span></span><br><span class="line">    <span class="keyword">var</span> ans=<span class="keyword">new</span> <span class="title class_">Array</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++) ans[i]=<span class="keyword">new</span> <span class="title class_">Array</span>(n);<span class="comment">// 构造数组</span></span><br><span class="line">    <span class="keyword">var</span> index=<span class="number">1</span>; <span class="comment">// 填入数组中的数字</span></span><br><span class="line">    <span class="keyword">var</span> col=<span class="number">0</span>; <span class="comment">// 列</span></span><br><span class="line">    <span class="keyword">var</span> row=<span class="number">0</span>; <span class="comment">// 行</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;=count;j++)&#123; </span><br><span class="line">        <span class="keyword">var</span> temp=n-(<span class="number">2</span>*j-<span class="number">1</span>); <span class="comment">// 该循环次数下，每条边要填几个数字</span></span><br><span class="line">        <span class="comment">// 四条边的循环填入数字</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;temp;i++) ans[row][col++]=index++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;temp;i++) ans[row++][col]=index++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;temp;i++) ans[row][col--]=index++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;temp;i++) ans[row--][col]=index++;</span><br><span class="line">        row++;col++;<span class="comment">// 回到下一次循环的正确位置</span></span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="number">0</span>) ans[--row][--col]=index; <span class="comment">// n为奇数时，最后一个数组填不上</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度 O(n^2)</li>
<li>空间复杂度 O(1)</li>
</ul>
<h3 id="相关题目-3"><a href="#相关题目-3" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li>54</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>二分法</li>
<li>双指针法</li>
<li>滑动窗口法</li>
<li>模拟行为</li>
</ul>
<img src="https://code-thinking-1253855093.file.myqcloud.com/pics/%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93.png" alt="img"  />

<p>7.24日二刷</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2024/01/25/11-00-37/</url>
    <content><![CDATA[<h2 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h2><p>表象：页面加载过慢、接口响应时间过长(超过1s)。</p>
<h3 id="定位慢查询"><a href="#定位慢查询" class="headerlink" title="定位慢查询"></a>定位慢查询</h3><p>主要有两种方案</p>
<h4 id="开源工具"><a href="#开源工具" class="headerlink" title="开源工具"></a>开源工具</h4><ul>
<li>调试工具：Arthas</li>
<li>运维工具：Prometheus、Skywalking</li>
</ul>
<span id="more"></span>

<h4 id="MySQL自带的慢日志"><a href="#MySQL自带的慢日志" class="headerlink" title="MySQL自带的慢日志"></a>MySQL自带的慢日志</h4><p>这个方法一般只在调试阶段使用，生产阶段不用，会损耗性能。</p>
<p>慢查询日志记录了所有执行时间超过指定参数(long_query_time，单位：秒，默认10)的所有SQL语句。但默认没有开启，需要在MySQL的配置文件 <code>/etc/my.cnf</code> 中配置如下信息：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启慢日志</span></span><br><span class="line"><span class="attr">slow_query_log</span> = <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置阈值</span></span><br><span class="line"><span class="attr">long_query_time</span> = <span class="string">2</span></span><br></pre></td></tr></table></figure>

<p>日志会记录在 <code>var/lib/mysql/localhost-slow.log</code> 文件中。</p>
<p>⭐如何定位慢查询？</p>
<ul>
<li><p>介绍问题产生场景（接口测试很慢，压测结果有5s）</p>
</li>
<li><p>当时采用了运维工具 Skywalking，测试出是sql的问题</p>
</li>
<li><p>或者 开启了慢日志（调试阶段）</p>
</li>
</ul>
<h3 id="分析慢查询"><a href="#分析慢查询" class="headerlink" title="分析慢查询"></a>分析慢查询</h3><p>MySQL自带了分析工具EXPLAIN或DESC。使用方法是直接在SELECT语句前加上关键字 explain &#x2F; desc</p>
<img src="/pic/explain结果.png" style="zoom: 67%;" />

<ul>
<li><p>possible_keys：代表当前sql可能会使用到的索引</p>
</li>
<li><p>key：实际命中的索引</p>
</li>
<li><p>key_len：索引占用的大小</p>
</li>
<li><p>extra：额外的优化建议</p>
<ul>
<li><table>
<thead>
<tr>
<th>Extra</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Using where; Using Index</td>
<td>查找使用了索引，需要的数据都在索引列中找到，不需要回表查询数据</td>
</tr>
<tr>
<td>Using index condition</td>
<td>查找使用了索引，但是需要回表查询数据</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>type：sql连接的类型，性能由好到差为：NULL、system、const、eq_ref、ref、range、index、all</p>
<ul>
<li><table>
<thead>
<tr>
<th>type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>查询过程中没有用到表(用的少)</td>
</tr>
<tr>
<td>system</td>
<td>查询的是mysql内置的表(用的少)</td>
</tr>
<tr>
<td>const</td>
<td>根据主键查询</td>
</tr>
<tr>
<td>eq_ref</td>
<td>根据主键或唯一索引查询</td>
</tr>
<tr>
<td>ref</td>
<td>索引查询</td>
</tr>
<tr>
<td>range</td>
<td>范围查询</td>
</tr>
<tr>
<td>index</td>
<td>全索引查询</td>
</tr>
<tr>
<td>all</td>
<td>全盘扫描</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<p>⭐如何分析SQL语句？</p>
<p>采用MySQL自带的分析工具EXPLAIN，比如<code>explain select * from user</code>。</p>
<ul>
<li>通过key和key_len检查是否命中索引(索引本身是否有失效的情况)</li>
<li>通过type字段查看sql是否有进一步优化的空间，是否存在全索引扫描或全盘扫描</li>
<li>通过extra建议判断，是否出现回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复。</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助MySQL高效获取数据的数据结构。在数据之外，数据库系统还维护着满足特定查找算法的数据结构(<strong>B+树</strong>)，这些数据结构以某种方式引用数据，这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p>
<h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p><strong>多叉平衡查找树</strong>，相比红黑树，B数每个节点有多个分支。当数据量很大时，红黑树会很深，查找也很耗时，B树缓解这种情况。</p>
<img src="/pic/B树.png" style="zoom: 67%;" />

<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><strong>数据全都存储在叶子节点上</strong>，并且叶子节点之间使用双向指针相连接。</p>
<img src="/pic/B+树.png" style="zoom:67%;" />

<ul>
<li>磁盘读写代价更低：B树要把查找路径上的所有数据全都读一遍，B+树查找路径上没有数据，都是指针。</li>
<li>查询效率更稳定：数据都在叶子节点上，所有数据的查找路径长度都差不多。</li>
<li>便于扫库和区间查询：对于区间查询，可以从根节点找到左区间的值，利用叶子节点之间的双向指针找到另一个区间的值，而不用再从根节点开始查询。</li>
</ul>
<p>⭐数据库中的索引是什么</p>
<ul>
<li>索引是帮助MySQL高效获取数据的数据结构（有序）</li>
<li>提高数据检索的效率，降低数据库的IO成本（不需要全表扫描）</li>
<li>通过索引列对数据进行排序，降低数据排序成本，降低CPU消耗</li>
</ul>
<p>⭐索引的底层数据结构？</p>
<p>MySQL的InnoDB引擎采用的是B+树来存储索引</p>
<ul>
<li>阶数更多，路径更短</li>
<li>磁盘读写代价更低，非叶子节点只存储指针，叶子节点存储数据</li>
<li>B+树便于扫库和区间查询，叶子节点是一个双向链表</li>
</ul>
<h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><p>聚簇索引也叫聚集索引，非聚簇索引也叫二级索引。</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>聚集索引</td>
<td>将数据存储与索引放在一起，索引结构的叶子节点保存了数据表中一行数据</td>
<td>有且只有一个</td>
</tr>
<tr>
<td>二级索引</td>
<td>数据和索引分开存储，索引结构的叶子节点关联的是对应的主键值</td>
<td>可以存在多个</td>
</tr>
</tbody></table>
<p>聚集索引选取规则</p>
<ul>
<li>存在主键，主键就是聚集索引</li>
<li>不存在主键，第一个唯一(UNIQUE)索引作为聚集索引</li>
<li>如果既没有主键，也没有合适的唯一索引，InnoDB自动生成一个rowid作为隐藏的聚集索引</li>
</ul>
<img src="/pic/聚集索引和二级索引.png" style="zoom: 67%;" />

<p>⭐什么是回表查询？</p>
<p>数据库索引中有聚簇索引和非聚簇索引。聚簇索引是将数据和索引放到一起，B+树的叶子节点保存了整行数据，有且只有一个；非聚簇索引是数据和索引分开存储，B+树的叶子节点保存对应的主键，可以有多个。</p>
<p>回表查询是通过二级索引先找到对应的主键值，再到聚集索引中查找整行数据，这个过程就是回表。</p>
<p>比如<code>select * from user where name = &#39;Arm&#39; </code></p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 ，不需要回表查询。</p>
<p>比如上图的user表，id是主键索引，name是普通索引，那么</p>
<p><code>select * from tb_user where id = 1</code> 是覆盖索引<br><code>select id，name from tb_user where name = ‘Arm’</code> 是覆盖索引<br><code>select id，name，gender from tb_user where name = ‘Arm’</code> 不是覆盖索引</p>
<p>⭐什么是覆盖索引？</p>
<ul>
<li><p>覆盖索引是指查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到</p>
</li>
<li><p>使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。</p>
</li>
<li><p>如果返回的列中没有创建索引，有可能会触发回表查询，因此要尽量避免使用select *</p>
</li>
</ul>
<p>⭐什么是超大分页问题？怎么处理？</p>
<p>当一张表中数据量比较大时，使用limit分页查询，需要对数据进行排序，效率低。</p>
<p>解决：覆盖索引+子查询。先分页查询数据的id字段，确定了id之后，再用子查询来过滤，只查询这个id列表中的数据就可以了。因为查询id的时候，走的覆盖索引，所以效率可以提升很多</p>
<p>⭐索引创建原则有哪些？</p>
<ul>
<li>针对数据量较大（10万），且查询较频繁的表建立索引。√</li>
<li>针对常作为查询条件、排序、分组操作的字段建立索引 √</li>
<li>尽量选择区分度高(列中重复元素少)的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</li>
<li>如果是字符串类型的字段，其长度较长，可以针对字段特点，建立前缀索引。</li>
<li>尽量使用 <strong>联合索引</strong> ，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。√<ul>
<li>比如用户表，创建索引(用户id，姓名)，这一个索引相当于两个索引：id 和 id+姓名（有顺序）</li>
</ul>
</li>
<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率 √</li>
<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</li>
</ul>
<p>⭐什么情况下索引会失效？</p>
<ul>
<li>联合索引，违反最左原则</li>
<li>范围查询右边的列，不能使用索引</li>
<li>不要在索引列上进行运算操作， 索引将失效</li>
<li>字符串不加单引号，造成索引失效。(类型转换)</li>
<li>以%开头的Like模糊查询，索引失效</li>
</ul>
<p>⭐对sql优化的经验</p>
<ul>
<li>表的设计优化<ul>
<li>比如设置合适的数值（tinyint   int   bigint），要根据实际情况选择</li>
<li>比如设置合适的字符串类型（char和varchar）char定长效率高，varchar可变长度，效率稍低</li>
</ul>
</li>
<li>索引优化    参考优化创建原则和索引失效</li>
<li>SQL语句优化<ul>
<li>SELECT语句务必指明字段名称（避免直接使用select * ）</li>
<li>SQL语句要避免造成索引失效的写法</li>
<li>尽量用union all代替union，union会多一次过滤重复结果的操作，效率低</li>
<li>避免在where子句中对字段进行表达式操作</li>
<li>Join优化 能用innerjoin 就不用left join，right join，如必须使用 一定要以小表为驱动，<ul>
<li>内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left join 或 right join，不会重新调整顺序</li>
</ul>
</li>
</ul>
</li>
<li>主从复制、读写分离<ul>
<li>如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构。读写分离解决的是，数据库的写入，影响了查询的效率。</li>
<li><img src="/pic/数据库读写分离.png" style="zoom: 80%;" /></li>
</ul>
</li>
<li>分库分表</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<ul>
<li>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>
<li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li>
<li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li>
<li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>
</ul>
<p>⭐事务的特性是什么？</p>
<p>原子性( Atomicity )、一致性( Consistency )、隔离性( Isolation )、持久性( Durability )。结合转账案例说明。</p>
<h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><table>
<thead>
<tr>
<th><strong>问题</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读到另外一个事务还没有提交的数据。</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。</td>
</tr>
</tbody></table>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>设置隔离。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Read uncommitted</strong> 未提交读</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><strong>Read committed</strong> 读已提交</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>**Repeatable Read(默认) **可重复读</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td><strong>Serializable</strong> <strong>串行化</strong></td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>从上至下，隔离级别越高，数据越安全，但是性能越差。</p>
<h3 id="数据存储形式"><a href="#数据存储形式" class="headerlink" title="数据存储形式"></a>数据存储形式</h3><ul>
<li>缓冲池（buffer pool）:主<strong>内存</strong>中的一个区域，里面可以缓存磁盘上经常操作的真实数据，在执行增删改查操作时，先操作缓冲池中的数据（若缓冲池没有数据，则从磁盘加载并缓存），以一定频率刷新到磁盘，从而减少磁盘IO，加快处理速度</li>
<li>数据页（page）:是InnoDB 存储引擎<strong>磁盘</strong>管理的最小单元，每个页的大小默认为 16KB。页中存储的是行数据</li>
</ul>
<p>⭐介绍一下<code>undo log</code> 和 <code>redo log</code></p>
<ul>
<li>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。<br>该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log file）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时, 进行数据恢复使用。</li>
<li>回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚 和 MVCC(多版本并发控制) 。undo log和redo log记录物理日志不一样，它是逻辑日志。<ul>
<li>可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，</li>
<li>当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</li>
</ul>
</li>
</ul>
<h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><p>MySQL主从复制的核心就是<strong>二进制日志</strong>，二进制日志（BINLOG）记录了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句，但不包括数据查询（SELECT、SHOW）语句，即会对数据产生改变的DML。</p>
<img src="/pic/主从同步.png" style="zoom:67%;" />

<p>复制分成三步：</p>
<ul>
<li>Master 主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li>
<li>从库 读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据。</li>
</ul>
<p>⭐主从同步原理？</p>
<p>MySQL主从复制的核心就是二进制日志binlog(DDL（数据定义语言）语句和 DML（数据操纵语言）语句)</p>
<ul>
<li>主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。</li>
<li>从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。</li>
<li>从库重做中继日志中的事件，将改变反映它自己的数据</li>
</ul>
<h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h3 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h3><ul>
<li>前提，项目业务数据逐渐增多，或业务发展比较迅速（单表的数据量达1000W或20G以后）</li>
<li>优化解决不了性能问题（主从读写分离、查询索引…）</li>
<li>IO瓶颈（磁盘IO、网络IO）、CPU瓶颈（聚合查询、连接数太多）</li>
</ul>
<h3 id="拆分策略"><a href="#拆分策略" class="headerlink" title="拆分策略"></a>拆分策略</h3><h4 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h4><p>拆分的是数据结构</p>
<h5 id="垂直分库"><a href="#垂直分库" class="headerlink" title="垂直分库"></a>垂直分库</h5><p>以表为依据，根据业务将不同表拆分到不同库中(微服务)</p>
<h5 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h5><p>以字段为依据，根据字段属性将不同字段拆分到不同表中。通常把不常用的字段单独放在一张表，或者把大字段拆分出来放在附表。</p>
<p>可以冷热数据分离，同时减少IO过渡争抢，两表互不影响。</p>
<h4 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h4><p>拆分的是数据</p>
<h5 id="水平分库"><a href="#水平分库" class="headerlink" title="水平分库"></a>水平分库</h5><p>把一个库的数据拆分到多个库中，解决了单库大数量，高并发的性能瓶颈问题，提高了系统的稳定性和可用性。</p>
<h5 id="水平分表"><a href="#水平分表" class="headerlink" title="水平分表"></a>水平分表</h5><p>将一张表的数据拆分到多个表中(可以在同一个库内)，优化单一表数据量过大而产生的性能问题；避免IO争抢并减少锁表的几率。</p>
<h3 id="问题和解决"><a href="#问题和解决" class="headerlink" title="问题和解决"></a>问题和解决</h3><p>水平拆分后，由于同类型的数据涉及到跨库或跨表，会引发很多问题，比如</p>
<ul>
<li>分布式事务一致性问题</li>
<li>跨节点关联查询</li>
<li>跨节点分页、排序函数</li>
</ul>
<p>以上这些问题使用中间件可以解决，如mycat、sharding-sphere</p>
]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2023/06/29/11-00-00/</url>
    <content><![CDATA[<h2 id="反转字符串"><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h2><span id="more"></span>

<blockquote>
<p>题目：给定一个字符串 s 和一个整数 k，从字符串开头算起，每计数至 2k 个字符，就反转这 2k 字符中的前 k 个字符。</p>
<p>如果剩余字符少于 k 个，则将剩余字符全部反转。<br>如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</p>
</blockquote>
<p>一些同学可能为了处理逻辑：每隔2k个字符的前k的字符，写了一堆逻辑代码或者再搞一个计数器，来统计2k，再统计前k个字符。</p>
<p>其实在遍历字符串的过程中，只要让 i +&#x3D; (2 * k)，i 每次移动 2 * k 就可以了，然后判断是否需要有反转的区间。</p>
<p><strong>所以当需要固定规律一段一段去处理字符串的时候，要想想在在for循环的表达式上做做文章。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="keyword">function</span>(<span class="params">s, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len=s.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> res=s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 字符串无法更改，先变成数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="number">2</span>*k)&#123; <span class="comment">//每次移动2k</span></span><br><span class="line">        k=i+k&gt;len?len-<span class="attr">i</span>:k <span class="comment">// 剩余字符&lt;k,则全部反转;&gt;k则反转前k个</span></span><br><span class="line">        <span class="keyword">let</span> left=i  <span class="comment">// 待反转字符的头指针</span></span><br><span class="line">        <span class="keyword">let</span> right=i+k-<span class="number">1</span> <span class="comment">// 待反转字符的尾指针</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">let</span> temp=res[left]</span><br><span class="line">            res[left++]=res[right]</span><br><span class="line">            res[right--]=temp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 变成字符串返回</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h2><blockquote>
<p>题目：实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
</blockquote>
<p>这道题如果用split库函数非常简单，但也失去了意义。</p>
<h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(s); <span class="comment">// 转化为数组</span></span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">0</span>; <span class="comment">// 空格的数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="string">&#x27; &#x27;</span>) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = arr.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = arr.<span class="property">length</span>+count*<span class="number">2</span>-<span class="number">1</span>; <span class="comment">//将所有空格替换之后的长度</span></span><br><span class="line">    <span class="keyword">while</span>(left&gt;=<span class="number">0</span>)&#123; <span class="comment">// 从后向前依次遍历，若从前向后需要重新分配空间</span></span><br><span class="line">        <span class="keyword">if</span>(arr[left]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            arr[right--]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            arr[right--]=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">            arr[right--]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            arr[right--]=arr[left]</span><br><span class="line">        &#125;</span><br><span class="line">        left--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="翻转字符串中的单词"><a href="#翻转字符串中的单词" class="headerlink" title="翻转字符串中的单词"></a>翻转字符串中的单词</h2><blockquote>
<p>题目：给你一个字符串 s ，请你反转字符串中 单词 的顺序。</p>
<p>单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。</p>
<p>返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。</p>
<p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>
</blockquote>
<p>在不申请额外空间的前提下，这类问题的基本范式是<strong>局部反转+整体反转</strong></p>
<ol>
<li>移除多余空格</li>
<li>将整个字符串反转</li>
<li>将每个单词反转</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(s)</span><br><span class="line">    <span class="title function_">removeMoreSpace</span>(arr) <span class="comment">// js参数传递时，基本类型是值传递，引用类型是引用传递</span></span><br><span class="line">    <span class="comment">// 翻转</span></span><br><span class="line">    <span class="title function_">reverse</span>(arr, <span class="number">0</span>, arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] === <span class="string">&#x27; &#x27;</span> || i === arr.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="comment">// 翻转单词</span></span><br><span class="line">            <span class="title function_">reverse</span>(arr, start, i - <span class="number">1</span>);</span><br><span class="line">            start = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除多余空格</span></span><br><span class="line"><span class="keyword">var</span> removeMoreSpace=<span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> fast=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> slow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast&lt;arr.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[fast]==<span class="string">&#x27; &#x27;</span>&amp;&amp;(fast==<span class="number">0</span>||arr[fast-<span class="number">1</span>]==<span class="string">&#x27; &#x27;</span>)) fast++</span><br><span class="line">        <span class="keyword">else</span> arr[slow++]=arr[fast++]</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="property">length</span>=arr[slow-<span class="number">1</span>]==<span class="string">&#x27; &#x27;</span>?slow-<span class="number">1</span>:slow</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 翻转从start到end的字符</span></span><br><span class="line"><span class="keyword">var</span> reverse=<span class="keyword">function</span>(<span class="params">arr,start,end</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> left = start;</span><br><span class="line">    <span class="keyword">let</span> right = end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">        [arr[left], arr[right]] = [arr[right], arr[left]];</span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串匹配-KMP"><a href="#字符串匹配-KMP" class="headerlink" title="字符串匹配-KMP"></a>字符串匹配-KMP</h2><blockquote>
<p>题目：给定两个字符串 haystack 和 needle，在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标(下标从 0 开始)，否则返回 -1 。 </p>
</blockquote>
<p>KMP的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再做匹配了</strong></p>
<h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h3><p>包含首字母，不包含尾字母的所有子串</p>
<h3 id="前缀表"><a href="#前缀表" class="headerlink" title="前缀表"></a>前缀表</h3><p>前缀表中存储的是前缀和该字符串本身的<strong>最长相等前后缀</strong></p>
<h3 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h3><p>在文本串和模式串分别设指针开始匹配，当匹配不上的时候，查询前一个字符的前缀表。不必从头开始匹配，而是从前一个字符的最长相等前后缀的后一位开始。原理是不匹配的那一位的前面所有字符都是匹配的，此时找到最长相等前后缀，既然该子串的前缀和后缀相等，那么前缀也是匹配的，所以<strong>跳过必然匹配的前缀，从前缀后面开始匹配即可</strong>。</p>
<p>而这个前缀表的数字正好代表了下次匹配时需要跳过的前缀长度，比如查询到对应的前缀表数字是2，那么下一次匹配时就跳过模式串前两个字符，从索引为2的位置开始。所以<strong>前缀表上最长相等前后缀刚好代表了下一次需要跳转到的位置</strong>，因此<strong>可以直接把前缀表当成next数组</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">haystack</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">needle</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 得到next数组</span></span><br><span class="line"><span class="keyword">var</span> getNext = <span class="keyword">function</span>(<span class="params">needle</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> next = [];</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>; <span class="comment">// 前缀末尾,同时也是最长相等前后缀的长度</span></span><br><span class="line">    next.<span class="title function_">push</span>(j); <span class="comment">// 初始化,next[0] = 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; needle.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// i指向后缀末尾</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] !== needle[j])</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (needle[i] === needle[j])</span><br><span class="line">            j++;</span><br><span class="line">        next.<span class="title function_">push</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> strStr = <span class="keyword">function</span>(<span class="params">haystack, needle</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (needle.<span class="property">length</span> === <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next = <span class="title function_">getNext</span>(needle);</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>; <span class="comment">// 指向模式串，与next数组一一对应</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; haystack.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// i指向文本串</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] !== needle[j])</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (haystack[i] === needle[j])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (j === needle.<span class="property">length</span>) <span class="comment">//j要指向最后才满足整个模式串都匹配上</span></span><br><span class="line">            <span class="keyword">return</span> (i - needle.<span class="property">length</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="重复子串"><a href="#重复子串" class="headerlink" title="重复子串"></a>重复子串</h2><blockquote>
<p>题目：给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p>
</blockquote>
<h3 id="移动匹配"><a href="#移动匹配" class="headerlink" title="移动匹配"></a>移动匹配</h3><p>任何一个<strong>重复子串的前半部分和后半部分都能找到一个相等的区间</strong>，给字符串s拼接一个相同的s得到ss，那么ss<strong>中间部分</strong>就一定能<strong>找到一个s</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> repeatedSubstringPattern = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newS = s+s</span><br><span class="line">    newS = newS.<span class="title function_">substr</span>(<span class="number">1</span>,newS.<span class="property">length</span>-<span class="number">2</span>)<span class="comment">// 移除首尾字母，避免在首部和尾部找到s</span></span><br><span class="line">    <span class="keyword">if</span>(newS.<span class="title function_">includes</span>(s)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>栈和队列</title>
    <url>/2023/07/08/11-00-00/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>栈其实就是递归的一种实现结构</strong></p>
<span id="more"></span>

<h2 id="用栈实现队列"><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h2><blockquote>
<p>题目：请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p>
<p>实现 MyQueue 类：</p>
<ul>
<li>void push(int x) 将元素 x 推到队列的末尾</li>
<li>int pop() 从队列的开头移除并返回元素</li>
<li>int peek() 返回队列开头的元素</li>
<li>boolean empty() 如果队列为空，返回 true ；否则，返回 false</li>
</ul>
</blockquote>
<p>使用两个栈实现队列，在实现pop时先将一个栈中的元素全部移到另一个栈中，取其栈顶即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyQueue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用数组push、pop模拟栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inStack</span>=[]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">outStack</span>=[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">inStack</span>.<span class="title function_">push</span>(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="property">length</span>&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">inStack</span>.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="variable language_">this</span>.<span class="property">inStack</span>.<span class="title function_">pop</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="title function_">push</span>(temp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="title function_">pop</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">peek</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="title function_">push</span>(temp)</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyQueue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">inStack</span>.<span class="property">length</span>&lt;=<span class="number">0</span>&amp;&amp;<span class="variable language_">this</span>.<span class="property">outStack</span>.<span class="property">length</span>&lt;=<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h2><blockquote>
<p>题目：请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。</p>
<p>实现 MyStack 类：</p>
<ul>
<li>void push(int x) 将元素 x 压入栈顶。</li>
<li>int pop() 移除并返回栈顶元素。</li>
<li>int top() 返回栈顶元素。</li>
<li>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</li>
</ul>
</blockquote>
<p>使用两个队列实现栈，在实现pop时先将一个队列中的元素移到另一个队列中，直到只剩一个为止，取剩的那一个元素即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">MyStack</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用数组push、shift模拟队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>=[]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue2</span>=[]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(x)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span>&lt;=<span class="number">0</span>) [<span class="variable language_">this</span>.<span class="property">queue1</span>,<span class="variable language_">this</span>.<span class="property">queue2</span>]=[<span class="variable language_">this</span>.<span class="property">queue2</span>,<span class="variable language_">this</span>.<span class="property">queue1</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span>&gt;<span class="number">1</span>) <span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>())</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">shift</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp=<span class="variable language_">this</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="title function_">push</span>(temp)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyStack</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">empty</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue1</span>.<span class="property">length</span>==<span class="number">0</span>&amp;&amp;<span class="variable language_">this</span>.<span class="property">queue2</span>.<span class="property">length</span>==<span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h2><blockquote>
<p>题目：给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ul>
</blockquote>
<p><strong>括号匹配是使用栈解决的经典问题。</strong>由于栈结构的特殊性，非常适合做对称匹配类的题目。</p>
<p>不匹配的情况有三种，左括号多余、右括号多余和左右括号不匹配</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack = []</span><br><span class="line">    <span class="keyword">let</span> map = &#123; <span class="string">&quot;(&quot;</span>:<span class="string">&quot;)&quot;</span>, <span class="string">&quot;&#123;&quot;</span>:<span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;[&quot;</span>:<span class="string">&quot;]&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>) stack.<span class="title function_">push</span>(s[i]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> temp = stack.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(temp===<span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 排除右括号多余的情况</span></span><br><span class="line">            <span class="keyword">if</span>(map[temp]!=s[i]) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 排除不匹配的情况</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.<span class="property">length</span> <span class="comment">//排除左括号多余的情况</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="删除字符串中的所有相邻重复项"><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h2><blockquote>
<p>题目：给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p>
<p>在 S 上<strong>反复执行</strong>重复项删除操作，直到无法继续删除。</p>
<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
</blockquote>
<h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>会超时！设置双指针，fast检测，slow指向待填入位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>; <span class="comment">//代表这一次循环有没有删除，如果没有则结束</span></span><br><span class="line">  <span class="keyword">let</span> arr = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>) <span class="comment">//便于修改</span></span><br><span class="line">  <span class="keyword">let</span> fast = <span class="number">0</span>, slow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">    flag = <span class="literal">false</span>,count=<span class="number">0</span>,fast=<span class="number">0</span>,slow=<span class="number">0</span> <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="keyword">while</span> (fast &lt; arr.<span class="property">length</span>) &#123; <span class="comment">// 一次循环</span></span><br><span class="line">      <span class="keyword">if</span> (arr[fast] == arr[fast + <span class="number">1</span>]) &#123; <span class="comment">// 需要消除</span></span><br><span class="line">        fast += <span class="number">2</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        count++ <span class="comment">// 记录下消除次数，通过改变length删除元素</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr[slow++] = arr[fast++]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="property">length</span>=arr.<span class="property">length</span>-count*<span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 变回字符串</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="用栈解决"><a href="#用栈解决" class="headerlink" title="用栈解决"></a>用栈解决</h3><p>将字符串元素依次入栈，入栈前与前一个元素若相同，则不入栈且将前一个元素出栈</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr=s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    stack.<span class="title function_">push</span>(arr[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==stack[stack.<span class="property">length</span>-<span class="number">1</span>]) stack.<span class="title function_">pop</span>()</span><br><span class="line">        <span class="comment">// 注意这里不能写arr[i]==arr[i-1]</span></span><br><span class="line">        <span class="keyword">else</span> stack.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="后缀表达式求值"><a href="#后缀表达式求值" class="headerlink" title="后缀表达式求值"></a>后缀表达式求值</h2><blockquote>
<p>题目：给你一个字符串数组 <code>tokens</code> ，表示一个根据 <a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437">逆波兰表示法</a> 表示的算术表达式。</p>
<p>请你计算该表达式。返回一个表示表达式值的整数。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">tokens</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> evalRPN = <span class="keyword">function</span>(<span class="params">tokens</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    <span class="keyword">let</span> num1=<span class="number">0</span>,num2=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tokens.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tokens[i]==<span class="string">&#x27;+&#x27;</span>||tokens[i]==<span class="string">&#x27;-&#x27;</span>||tokens[i]==<span class="string">&#x27;*&#x27;</span>||tokens[i]==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">            num1=<span class="built_in">parseInt</span>(stack.<span class="title function_">pop</span>())</span><br><span class="line">            num2=<span class="built_in">parseInt</span>(stack.<span class="title function_">pop</span>())</span><br><span class="line">            <span class="keyword">if</span>(tokens[i]==<span class="string">&#x27;+&#x27;</span>) stack.<span class="title function_">push</span>(num1+num2)</span><br><span class="line">            <span class="keyword">if</span>(tokens[i]==<span class="string">&#x27;-&#x27;</span>) stack.<span class="title function_">push</span>(num2-num1)</span><br><span class="line">            <span class="keyword">if</span>(tokens[i]==<span class="string">&#x27;*&#x27;</span>) stack.<span class="title function_">push</span>(num2*num1)</span><br><span class="line">            <span class="keyword">if</span>(tokens[i]==<span class="string">&#x27;/&#x27;</span>) stack.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(num2/num1))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(tokens[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.<span class="title function_">pop</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="滑动窗口最大值"><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h2><blockquote>
<p>题目：给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回 滑动窗口中的最大值 。</p>
</blockquote>
<p>暴力会超时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> nums</span><br><span class="line">    <span class="keyword">let</span> max</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=nums.<span class="property">length</span>-k;i++)&#123;</span><br><span class="line">        max=-<span class="title class_">Infinity</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=i;j&lt;k+i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[j]&gt;max) max=nums[j]</span><br><span class="line">        &#125;</span><br><span class="line">        ans.<span class="title function_">push</span>(max)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度 O(n*k)</li>
</ul>
<h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>可以维护一个队列，队列中的元素就是滑动窗口的元素，每次移动滑动窗口则需要对队列做三个操作：</p>
<ul>
<li>push一个元素进队尾</li>
<li>从队头pop一个元素</li>
<li>获取队列中的 最大值</li>
</ul>
<p>但是获取最大值的操作不能遍历实现，否则时间复杂度和暴力解法没有区别。因此需要实现一种特殊的<strong>单调队列</strong>，它应该能以O(1)时间来获取队列中最大值。</p>
<p>在单调队列中，并<strong>不需要维护滑动窗口中的所有元素</strong>，只需要维护有可能成为最大值的元素即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSlidingWindow = <span class="keyword">function</span> (<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MonoQueue</span> &#123; <span class="comment">// 单调队列</span></span><br><span class="line">        queue;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">queue</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">enqueue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">//入队操作，入队时弹出所有小于value的元素</span></span><br><span class="line">            <span class="keyword">let</span> back = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span> (back !== <span class="literal">undefined</span> &amp;&amp; back &lt; value) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">pop</span>();</span><br><span class="line">                back = <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="variable language_">this</span>.<span class="property">queue</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">push</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">dequeue</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">//出队操作</span></span><br><span class="line">            <span class="keyword">let</span> front = <span class="variable language_">this</span>.<span class="title function_">front</span>();</span><br><span class="line">            <span class="keyword">if</span> (front === value) &#123;</span><br><span class="line">            <span class="comment">//当它是最大值时才会留在队列中，否则早就被弹出了</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">queue</span>.<span class="title function_">shift</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取队列中的最大值，最大值一直维护在队头</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">queue</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> helperQueue = <span class="keyword">new</span> <span class="title class_">MonoQueue</span>();</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; <span class="comment">//j指向滑动窗口右边；i指向滑动窗口左边</span></span><br><span class="line">    <span class="keyword">let</span> resArr = [];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; k) &#123; <span class="comment">// 先入队k个元素</span></span><br><span class="line">        helperQueue.<span class="title function_">enqueue</span>(nums[j++]);</span><br><span class="line">    &#125;</span><br><span class="line">    resArr.<span class="title function_">push</span>(helperQueue.<span class="title function_">front</span>());</span><br><span class="line">    <span class="keyword">while</span> (j &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        helperQueue.<span class="title function_">enqueue</span>(nums[j]);</span><br><span class="line">        helperQueue.<span class="title function_">dequeue</span>(nums[i]);</span><br><span class="line">        resArr.<span class="title function_">push</span>(helperQueue.<span class="title function_">front</span>());</span><br><span class="line">        i++, j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resArr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="前k个高频元素"><a href="#前k个高频元素" class="headerlink" title="前k个高频元素"></a>前k个高频元素</h2><blockquote>
<p>题目：给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>
</blockquote>
<p>首先统计元素出现的频率，这一类的问题可以使用map来进行统计。</p>
<p>然后是对频率进行排序，这里我们可以使用一种 容器适配器就是<strong>优先级队列</strong>。其实就是**一个披着队列外衣的堆(大根堆和小根堆)**，因为优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。</p>
<p>而且优先级队列内部元素是自动依照元素的权值排列。</p>
<p>但在js中没有堆的库函数，可以用<code>Array.from</code>转化为二维数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">k</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> topKFrequent = <span class="keyword">function</span>(<span class="params">nums, k</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> map=<span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.<span class="title function_">has</span>(nums[i])) map.<span class="title function_">set</span>(nums[i], map.<span class="title function_">get</span>(nums[i])+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> map.<span class="title function_">set</span>(nums[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回一个按出现次数降序的二维数组</span></span><br><span class="line">    <span class="keyword">let</span> sortArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(map).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">1</span>] - a[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        res.<span class="title function_">push</span>(sortArray[i][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心</title>
    <url>/2023/07/14/10-00-00/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。贪心法没有固定的策略或套路。</p>
<p><strong>刷题或者面试的时候，手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心</strong>。</p>
<span id="more"></span>

<h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><ul>
<li>将问题分解为若干个子问题</li>
<li>找出适合的贪心策略</li>
<li>求解每一个子问题的最优解</li>
<li>将局部最优解堆叠成全局最优解</li>
</ul>
<h2 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h2><blockquote>
<p>题目：每个孩子最多只能给一块饼干。</p>
<p>对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;&#x3D; g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
</blockquote>
<p>题目要求满足越多数量的孩子，就要充分利用饼干，用大饼干喂大胃口，小饼干喂小胃口。那么<strong>局部最优解就是把饼干喂给范围内胃口最大的小孩</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findContentChildren = <span class="keyword">function</span>(<span class="params">g, s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span></span><br><span class="line">    s.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;) <span class="comment">// 从小到大排序</span></span><br><span class="line">    g.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;)</span><br><span class="line">    <span class="keyword">let</span> i=<span class="number">0</span> <span class="comment">//孩子</span></span><br><span class="line">    <span class="keyword">let</span> j=<span class="number">0</span> <span class="comment">//饼干</span></span><br><span class="line">    <span class="comment">// 双指针法</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;g.<span class="property">length</span>&amp;&amp;j&lt;s.<span class="property">length</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g[i]&lt;=s[j])&#123;</span><br><span class="line">            ans++</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a>摆动序列</h2><blockquote>
<p>题目：如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p>
<p>子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p>
<p>给你一个整数数组 nums ，返回 nums 中作为 摆动序列 的 最长子序列的长度 。</p>
</blockquote>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201124174327597.png" alt="376.摆动序列"></p>
<p><strong>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值</strong>。</p>
<p><strong>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列</strong>。</p>
<p>可以分为几种情况来看</p>
<ul>
<li>上下坡有平坡</li>
</ul>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20230106170449.png" alt="img"></p>
<ul>
<li>单调有平坡</li>
</ul>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20230108171505.png" alt="img"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> wiggleMaxLength = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> nums.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> preDiff = <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">    <span class="keyword">let</span> curDiff = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        curDiff = nums[i + <span class="number">1</span>] - nums[i]</span><br><span class="line">        <span class="keyword">if</span>((curDiff&gt;<span class="number">0</span> &amp;&amp; preDiff&lt;=<span class="number">0</span>) || (curDiff&lt;<span class="number">0</span> &amp;&amp; preDiff&gt;=<span class="number">0</span>))&#123;</span><br><span class="line">            result++</span><br><span class="line">            preDiff = curDiff <span class="comment">//只有遇到摆动了preDiff才改变，实现逻辑删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h2><blockquote>
<p>题目：给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
</blockquote>
<p>本题如果使用暴力法来做，就是两层for循环遍历出所有的子数组，选取最大和的数组。</p>
<p>但在遍历的过程中不难想到，<strong>当和为正数时，对后面的数有增大作用；当和为负数，对后面的数只会有减小作用</strong>。</p>
<p><strong>当连续和为负数时，再去加后面的数，只会让后面的数变小</strong>。此时不如抛弃之前的和，从下一个数开始重新求和</p>
<p>需要注意的是，本题的策略是<strong>遇到连续和为负数时抛弃，而不是遇到负数时抛弃</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=-<span class="title class_">Infinity</span></span><br><span class="line">    <span class="keyword">let</span> sum=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        sum+=nums[i]</span><br><span class="line">        ans=<span class="title class_">Math</span>.<span class="title function_">max</span>(ans,sum) <span class="comment">// 记录下当前的最大连续和</span></span><br><span class="line">        <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123; <span class="comment">//如果连续和为负数，则抛弃，重新开始计</span></span><br><span class="line">            sum=<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>本题的贪心思路并不好想，虽然贪心的理论很直白，但是题目不简单</p>
<h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><blockquote>
<p>题目：给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</p>
<p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。</p>
<p>返回 你能获得的 最大 利润 。</p>
</blockquote>
<p>画出股票价格走势图，就是在极小值点买，在极大值点卖出。</p>
<p>同时如果股票连涨三天，<strong>在第一天买第三天卖的利润 与 每天都买且卖所得的利润是一样的</strong>，反应到图上就是每一段递增曲线的高度差之和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="keyword">function</span>(<span class="params">prices</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.<span class="property">length</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices[i]&lt;prices[i+<span class="number">1</span>]) <span class="comment">//股票涨价</span></span><br><span class="line">            ans+=(prices[i+<span class="number">1</span>]-prices[i]) <span class="comment">//当天利润</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h2><blockquote>
<p>题目：给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。判断你是否能够到达最后一个下标。</p>
</blockquote>
<p>如果用数组中的元素代表其覆盖范围，这道题其实在问能不能从第一个元素覆盖到最后一个元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canJump = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cover=<span class="number">0</span> <span class="comment">//从第一个元素开始能覆盖到的范围</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=cover;i++)&#123; <span class="comment">//注意这里是i&lt;=cover，遍历到能覆盖到的区域</span></span><br><span class="line">        cover=<span class="title class_">Math</span>.<span class="title function_">max</span>(cover,i+nums[i]) <span class="comment">//更新覆盖区域</span></span><br><span class="line">        <span class="keyword">if</span>(cover&gt;=nums.<span class="property">length</span>-<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>题目：现假定可以到达<code>nums[n-1]</code>，返回到达的最小跳跃次数</p>
</blockquote>
<p>本题的贪心思路是<strong>用尽量少的步数去增加覆盖范围</strong>，每次遍历覆盖范围内的元素，记录下一次跳跃的最大覆盖范围</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jump = <span class="keyword">function</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> curIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> nextIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> steps = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        nextIndex = <span class="title class_">Math</span>.<span class="title function_">max</span>(nums[i] + i, nextIndex)</span><br><span class="line">        <span class="keyword">if</span>(i === curIndex) &#123;</span><br><span class="line">            curIndex = nextIndex</span><br><span class="line">            steps++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> steps</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a>加油站</h2><blockquote>
<p>题目：在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。</p>
<p>你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。</p>
<p>给定两个整数数组 gas 和 cost ，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。</p>
</blockquote>
<p>到达每个加油站后的剩余油量为 <code>gas[i] - cost[i]</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">gas</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">cost</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canCompleteCircuit = <span class="keyword">function</span>(<span class="params">gas, cost</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> curSum = <span class="number">0</span> <span class="comment">//当前油量和消耗的差值</span></span><br><span class="line">    <span class="keyword">let</span> totalSum = <span class="number">0</span> <span class="comment">//记录总油量和总消耗的差值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; gas.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        curSum += gas[i] - cost[i]</span><br><span class="line">        totalSum += gas[i] - cost[i]</span><br><span class="line">        <span class="keyword">if</span>(curSum &lt; <span class="number">0</span>) &#123; <span class="comment">//入不敷出，尝试把下一个结点作为开始结点</span></span><br><span class="line">            curSum = <span class="number">0</span></span><br><span class="line">            start = i + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(totalSum &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a>分发糖果</h2><blockquote>
<p>题目：n 个孩子站成一排。给你一个整数数组 ratings 表示每个孩子的评分。</p>
<p>你需要按照以下要求，给这些孩子分发糖果：</p>
<ul>
<li><p>每个孩子至少分配到 1 个糖果。</p>
</li>
<li><p>相邻两个孩子评分更高的孩子会获得更多的糖果。</p>
</li>
</ul>
<p>请你给每个孩子分发糖果，计算并返回需要准备的 最少糖果数目 。</p>
</blockquote>
<p>对于每个孩子来说，既要和左边比较又要和右边比较，但如果在一次循环中作两次比较会顾此失彼。</p>
<p>先处理右边孩子得分高的情况，在循环中，如果右边分高则该孩子的糖果应是其左边孩子糖果数量+1，否则糖果为1</p>
<p>再处理左边孩子得分高的情况，从后向前遍历，如果左边孩子分高则该孩子的糖果应是右边孩子糖果数量+1，否则为1</p>
<p>这样得到两组糖果数量，取较大值最为最终值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">ratings</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> candy = <span class="keyword">function</span>(<span class="params">ratings</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="keyword">new</span> <span class="title class_">Array</span>(ratings.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;ratings.<span class="property">length</span>;i++)&#123; <span class="comment">//左边孩子大</span></span><br><span class="line">        <span class="keyword">if</span>(ratings[i]&gt;ratings[i-<span class="number">1</span>]) res[i]=res[i-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=ratings.<span class="property">length</span>-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">//右边孩子大</span></span><br><span class="line">        <span class="keyword">if</span>(ratings[i]&gt;ratings[i+<span class="number">1</span>])</span><br><span class="line">            res[i]=<span class="title class_">Math</span>.<span class="title function_">max</span>(res[i+<span class="number">1</span>]+<span class="number">1</span>,res[i]) <span class="comment">//得到每个孩子最终的糖果数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ans=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> res) ans+=i</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="柠檬水找零"><a href="#柠檬水找零" class="headerlink" title="柠檬水找零"></a>柠檬水找零</h2><blockquote>
<p>题目：在柠檬水摊上，每一杯柠檬水的售价为 5 美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。</p>
<p>每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。</p>
<p>注意，一开始你手头没有任何零钱。</p>
<p>给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回 true ，否则返回 false 。</p>
</blockquote>
<p>顾客付10美元后，要找回5美元；顾客付20美元后，可以找回三张5美元，也可以找回一张10美元和一张5美元。因此5美元比10美元用处多，在找钱时优先把10美元用出去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">bills</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lemonadeChange = <span class="keyword">function</span>(<span class="params">bills</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pocket=<span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    pocket.<span class="title function_">set</span>(<span class="number">5</span>,<span class="number">0</span>)</span><br><span class="line">    pocket.<span class="title function_">set</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="comment">//没必要记录20美元的数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> bills)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i===<span class="number">5</span>) pocket.<span class="title function_">set</span>(<span class="number">5</span>,pocket.<span class="title function_">get</span>(<span class="number">5</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(i===<span class="number">10</span>)&#123;</span><br><span class="line">            pocket.<span class="title function_">set</span>(<span class="number">10</span>,pocket.<span class="title function_">get</span>(<span class="number">10</span>)+<span class="number">1</span>);</span><br><span class="line">            pocket.<span class="title function_">set</span>(<span class="number">5</span>,pocket.<span class="title function_">get</span>(<span class="number">5</span>)-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span>(pocket.<span class="title function_">get</span>(<span class="number">5</span>)&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i===<span class="number">20</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pocket.<span class="title function_">get</span>(<span class="number">10</span>)&gt;<span class="number">0</span>)&#123; <span class="comment">//有10美元先用10美元</span></span><br><span class="line">                pocket.<span class="title function_">set</span>(<span class="number">10</span>,pocket.<span class="title function_">get</span>(<span class="number">10</span>)-<span class="number">1</span>)</span><br><span class="line">                pocket.<span class="title function_">set</span>(<span class="number">5</span>,pocket.<span class="title function_">get</span>(<span class="number">5</span>)-<span class="number">1</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> pocket.<span class="title function_">set</span>(<span class="number">5</span>,pocket.<span class="title function_">get</span>(<span class="number">5</span>)-<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">if</span>(pocket.<span class="title function_">get</span>(<span class="number">5</span>)&lt;<span class="number">0</span>||pocket.<span class="title function_">get</span>(<span class="number">10</span>)&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a>根据身高重建队列</h2><blockquote>
<p>题目：假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] &#x3D; [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。</p>
<p>请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] &#x3D; [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。</p>
</blockquote>
<p>本题有两个维度，h和k。遇到两个维度权衡的时候，一定要先确定一个维度，再确定另一个维度。<strong>如果两个维度一起考虑一定会顾此失彼</strong>。</p>
<p>那么是先确定k还是先确定h呢，如果按照k来从小到大排序，排完之后，会发现k的排列并不符合条件，身高也不符合条件，两个维度哪一个都没确定下来。</p>
<p>那么按照身高h从高到低排序，身高一样时按k从小到大排序。身高最高者，其k值必定为0，之后以k为索引将元素加入到数组中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">people</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reconstructQueue = <span class="keyword">function</span>(<span class="params">people</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    people.<span class="title function_">sort</span>(</span><br><span class="line">        <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[<span class="number">0</span>]!==b[<span class="number">0</span>]) <span class="keyword">return</span> b[<span class="number">0</span>]-a[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> a[<span class="number">1</span>]-b[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ) <span class="comment">//按身高从高到低排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;people.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="comment">// people[i][1]为k值</span></span><br><span class="line">        res.<span class="title function_">splice</span>(people[i][<span class="number">1</span>],<span class="number">0</span>,people[i])</span><br><span class="line">        <span class="comment">//原本的顺序不会因为插入新元素而乱，因为后来的people都比较矮，对高的人的k值无法造成影响</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="用最少数量的箭引爆气球"><a href="#用最少数量的箭引爆气球" class="headerlink" title="用最少数量的箭引爆气球"></a>用最少数量的箭引爆气球</h2><blockquote>
<p>题目：有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 points ，其中points[i] &#x3D; [xstart, xend] 表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。</p>
<p>一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。</p>
<p>给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。</p>
</blockquote>
<p>本题的直观想法就是扫描过去，射重叠部分多的。</p>
<p><strong>为了让气球尽可能的重叠，需要对数组进行排序</strong>。按起始位置或终止位置排序都可以，以起始位置为例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">points</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMinArrowShots = <span class="keyword">function</span>(<span class="params">points</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(points.<span class="property">length</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a[<span class="number">0</span>]-b[<span class="number">0</span>]&#125;) <span class="comment">//按数组起始位置从小到大排序</span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">1</span> <span class="comment">//至少需要一支箭</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;points.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(points[i][<span class="number">0</span>]&gt;points[i-<span class="number">1</span>][<span class="number">1</span>])&#123; <span class="comment">//没有重叠边界</span></span><br><span class="line">            res++</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            points[i][<span class="number">1</span>]=<span class="title class_">Math</span>.<span class="title function_">min</span>(points[i][<span class="number">1</span>],points[i-<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">            <span class="comment">//重叠之后把范围改成交集范围，看之后的气球能否与交集范围重叠</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="无重叠区间"><a href="#无重叠区间" class="headerlink" title="无重叠区间"></a>无重叠区间</h2><blockquote>
<p>题目：给定一个区间的集合 intervals ，其中 intervals[i] &#x3D; [starti, endi] 。返回 需要移除区间的最小数量，使剩余区间互不重叠 。</p>
</blockquote>
<p>本题思路与上题类似，先把区间按起始位置从小到大排序，依次扫描时若有重叠部分，则删除结束位置更靠后的区间(结束位置更靠后就更有可能和别的区间重叠)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">intervals</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> eraseOverlapIntervals = <span class="keyword">function</span>(<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">0</span></span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a[<span class="number">0</span>]-b[<span class="number">0</span>]&#125;)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;intervals.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals[i-<span class="number">1</span>][<span class="number">1</span>]&gt;intervals[i][<span class="number">0</span>])&#123; <span class="comment">//有重叠部分</span></span><br><span class="line">            intervals[i][<span class="number">1</span>]=<span class="title class_">Math</span>.<span class="title function_">min</span>(intervals[i][<span class="number">1</span>],intervals[i-<span class="number">1</span>][<span class="number">1</span>]) <span class="comment">//逻辑删除</span></span><br><span class="line">            res++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="划分字母区间"><a href="#划分字母区间" class="headerlink" title="划分字母区间"></a>划分字母区间</h2><blockquote>
<p>题目：给你一个字符串 s 。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p>
<p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是 s 。</p>
<p>返回一个表示每个字符串片段的长度的列表。</p>
</blockquote>
<h3 id="方法一、遍历"><a href="#方法一、遍历" class="headerlink" title="方法一、遍历"></a>方法一、遍历</h3><p>先遍历字符串，计算每个字母出现的次数。维护一个集合，存储当前片段的字母种类。在遍历时</p>
<ul>
<li>什么时候分段：集合为空，说明当前分段的字母都已经遍历到了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> partitionLabels = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> status=<span class="keyword">new</span> <span class="title class_">Set</span>() <span class="comment">//存储当前段中字母的种类</span></span><br><span class="line">    <span class="keyword">let</span> count=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> res=[]<span class="comment">//存储分段后的字符长度</span></span><br><span class="line">    <span class="keyword">let</span> temp=<span class="string">&quot;&quot;</span> <span class="comment">//存储该段字符</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        count[s[i].<span class="title function_">charCodeAt</span>()-<span class="number">97</span>]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(status.<span class="property">size</span>==<span class="number">0</span>&amp;&amp;temp.<span class="property">length</span>&gt;<span class="number">0</span>)&#123; <span class="comment">//满足分段条件</span></span><br><span class="line">            res.<span class="title function_">push</span>(temp.<span class="property">length</span>)</span><br><span class="line">            temp=<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!status.<span class="title function_">has</span>(s[i])) status.<span class="title function_">add</span>(s[i])</span><br><span class="line">        <span class="keyword">if</span>(--count[s[i].<span class="title function_">charCodeAt</span>()-<span class="number">97</span>]==<span class="number">0</span>)<span class="comment">//每次都要把当前字符的数量减掉，减到0时在集合中删除</span></span><br><span class="line">            status.<span class="title function_">delete</span>(s[i])</span><br><span class="line">        temp+=s[i]</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">push</span>(temp.<span class="property">length</span>)<span class="comment">//加入最后一个片段</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="方法二、贪心"><a href="#方法二、贪心" class="headerlink" title="方法二、贪心"></a>方法二、贪心</h3><p>首先要明白是什么限制了片段的数量，<strong>当一个片段包含一种字符时，它就要包含字符串中所有的该字符</strong>，在延伸的时候又不得不包含进别的字符……</p>
<p>先统计每个字符<strong>最后出现的位置</strong>，在遍历时找到之前遍历过的所有字母的最远边界，说明这个边界就是分割点了。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201222191924417.png" alt="763.划分字母区间"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> partitionLabels = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> hash=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>) <span class="comment">//最后出现的位置</span></span><br><span class="line">    <span class="keyword">let</span> res=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        hash[s[i].<span class="title function_">charCodeAt</span>()-<span class="number">97</span>]=i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> right=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;s.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        right=<span class="title class_">Math</span>.<span class="title function_">max</span>(right,hash[s[i].<span class="title function_">charCodeAt</span>()-<span class="number">97</span>])</span><br><span class="line">        <span class="keyword">if</span>(right===i)&#123;</span><br><span class="line">            res.<span class="title function_">push</span>(right-left+<span class="number">1</span>)</span><br><span class="line">            left=right+<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a>合并区间</h2><blockquote>
<p>题目：以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] &#x3D; [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[][]</span>&#125; <span class="variable">intervals</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="keyword">function</span>(<span class="params">intervals</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = intervals.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> ( n &lt; <span class="number">2</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">    intervals.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>]- b[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">let</span> res = [],</span><br><span class="line">        left = intervals[<span class="number">0</span>][<span class="number">0</span>],</span><br><span class="line">        right = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt; right) &#123; </span><br><span class="line">            <span class="comment">//i与前面的区间不重叠，改左右区间的范围</span></span><br><span class="line">            res.<span class="title function_">push</span>([left, right]);</span><br><span class="line">            left = intervals[i][<span class="number">0</span>];</span><br><span class="line">            right = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//重叠时只改右区间范围</span></span><br><span class="line">            right = <span class="title class_">Math</span>.<span class="title function_">max</span>(intervals[i][<span class="number">1</span>], right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">push</span>([left, right]); <span class="comment">//加入最后一个区间</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="单调递增的数字"><a href="#单调递增的数字" class="headerlink" title="单调递增的数字"></a>单调递增的数字</h2><blockquote>
<p>题目：当且仅当每个相邻位数上的数字 x 和 y 满足 x &lt;&#x3D; y 时，我们称这个整数是单调递增的。</p>
<p>给定一个整数 n ，返回 小于或等于 n 的最大数字，且数字呈 单调递增 。</p>
</blockquote>
<p>思路不难想，从后向前遍历数字，不是单调递增则把该位数字变为9，前一位数字-1。但是还需要一些特殊处理，不然碰到6878、1000这样的数字会错误。</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> monotoneIncreasingDigits = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> num=<span class="title class_">Array</span>.<span class="title function_">from</span>(n.<span class="title function_">toString</span>())</span><br><span class="line">    <span class="keyword">let</span> flag=num.<span class="property">length</span> <span class="comment">//记录从哪一位开始后面全变成9</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=num.<span class="property">length</span>-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123; <span class="comment">//从后往前遍历</span></span><br><span class="line">        <span class="keyword">if</span>(num[i]&lt;num[i-<span class="number">1</span>])&#123;</span><br><span class="line">            num[i-<span class="number">1</span>]--</span><br><span class="line">            flag=i <span class="comment">//不是直接变成9，而是记录下该变成9的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=flag;i&lt;num.<span class="property">length</span>;i++) num[i]=<span class="string">&#x27;9&#x27;</span></span><br><span class="line">    <span class="comment">//从flag开始往后全都变成9</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(num.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="监控二叉树"><a href="#监控二叉树" class="headerlink" title="监控二叉树"></a>监控二叉树</h2><blockquote>
<p>题目：给定一个二叉树，我们在树的节点上安装摄像头。节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象。</strong>计算监控树的所有节点所需的最小摄像头数量。</p>
</blockquote>
<p>这道题要充分利用摄像头的覆盖面积，</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/2023/06/26/09-00-00/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>不同于数组在内存中的连续分布，链表中的结点<strong>散乱分布</strong>在内存中，通过指针域的指针链接各个结点。</p>
<h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">	val;</span><br><span class="line">	next=<span class="literal">null</span>;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">value</span>)&#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">val</span>=value;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">next</span>=<span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="链表对比数组"><a href="#链表对比数组" class="headerlink" title="链表对比数组"></a>链表对比数组</h3><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195200276.png" alt="链表-链表与数据性能对比"></p>
<span id="more"></span>

<h2 id="移除链表元素"><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h2><blockquote>
<p>题目：删除链表中等于给定值 val 的所有结点。</p>
</blockquote>
<p>题目本身并不难，可以在链表中直接删除。但是如果头指针也要删除就需要特殊处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>&amp;&amp;head.<span class="property">val</span>==val)&#123; </span><br><span class="line">        <span class="comment">//确保head不为null，否则head.val报错</span></span><br><span class="line">        <span class="comment">// 对需要删除的头结点单独处理</span></span><br><span class="line">        head=head.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">null</span>) <span class="keyword">return</span> head; <span class="comment">// 如果本身为空或全删完了</span></span><br><span class="line">    <span class="keyword">var</span> ret=head;</span><br><span class="line">    <span class="keyword">while</span>(head.<span class="property">next</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(head.<span class="property">next</span>.<span class="property">val</span>==val) head.<span class="property">next</span>=head.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">else</span> head=head.<span class="property">next</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(1)</li>
</ul>
<p>有没有对所有结点一视同仁的方法呢？答案是在头结点之前添加一个<strong>虚拟头结点</strong>，这是处理链表常用的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElements = <span class="keyword">function</span>(<span class="params">head, val</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> list=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    list.<span class="property">next</span>=head; <span class="comment">// 设立虚头结点</span></span><br><span class="line">    <span class="keyword">var</span> ret=list;</span><br><span class="line">    <span class="keyword">while</span>(ret.<span class="property">next</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ret.<span class="property">next</span>.<span class="property">val</span>==val)&#123;</span><br><span class="line">            ret.<span class="property">next</span>=ret.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> ret=ret.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(1)</li>
</ul>
<h2 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h2><blockquote>
<p>题目：实现链表的增删改查函数</p>
</blockquote>
<p>注意：头指针不能动</p>
<p><strong>在尾插时，不能遍历到null后直接将temp设为新结点，因为在js中变量存储的是对象的引用而不是对象本身。如果直接在 temp 为 null 时将其赋值为新节点,那么只是改变了 temp 变量的值，而没有影响到原来链表中任何一个节点的 next 引用。原链表的结构没有任何变化,新节点并没有插入到链表中。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">val, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = val;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyLinkedList</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">head</span>);<span class="comment">//虚头结点</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    list = list.<span class="property">next</span>;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="property">val</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtHead</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="title class_">Node</span>(val, <span class="variable language_">this</span>.<span class="property">head</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = list;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtTail</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(val, <span class="literal">null</span>); <span class="comment">// 定义待插入结点</span></span><br><span class="line">  <span class="keyword">var</span> temp = <span class="variable language_">this</span>.<span class="property">head</span>; <span class="comment">// 遍历指针</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = node; <span class="variable language_">this</span>.<span class="property">size</span>++; <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (temp.<span class="property">next</span> != <span class="literal">null</span>) temp = temp.<span class="property">next</span>;</span><br><span class="line">  temp.<span class="property">next</span> = node;</span><br><span class="line">  <span class="comment">//不能像下面这样写</span></span><br><span class="line">  <span class="comment">//while (temp != null) temp = temp.next;</span></span><br><span class="line">  <span class="comment">//temp = node;</span></span><br><span class="line">  <span class="comment">//temp为null后赋值加不到原队列中去</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; index </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">val</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addAtIndex</span> = <span class="keyword">function</span> (<span class="params">index, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(val, <span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">head</span>);</span><br><span class="line">  <span class="keyword">var</span> result=list;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> == <span class="literal">null</span>) &#123; <span class="variable language_">this</span>.<span class="property">head</span> = node;<span class="variable language_">this</span>.<span class="property">size</span>++; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    index--; list = list.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>++;</span><br><span class="line">  node.<span class="property">next</span> = list.<span class="property">next</span>;</span><br><span class="line">  list.<span class="property">next</span> = node;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span>=result.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">index</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">void</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">MyLinkedList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">deleteAtIndex</span> = <span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="variable language_">this</span>.<span class="property">size</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = index;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span>--;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">head</span>);</span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    index--; list = list.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  list.<span class="property">next</span> = list.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">  <span class="keyword">if</span> (temp == <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">head</span> = list.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><blockquote>
<p>题目：反转一个单链表。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,<span class="literal">null</span>); <span class="comment">// 构造带虚头结点的链表</span></span><br><span class="line">    <span class="keyword">var</span> new_node;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123; <span class="comment">// 遍历原链表</span></span><br><span class="line">        new_node=<span class="keyword">new</span> <span class="title class_">ListNode</span>(head.<span class="property">val</span>,<span class="literal">null</span>);</span><br><span class="line">        new_node.<span class="property">next</span>=ret.<span class="property">next</span>; <span class="comment">// 头插法</span></span><br><span class="line">        ret.<span class="property">next</span>=new_node;</span><br><span class="line">        head=head.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(n)</li>
</ul>
<h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>可以实现原地翻转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cur=head;</span><br><span class="line">    <span class="keyword">var</span> pre=<span class="literal">null</span>;<span class="comment">// pre始终在cur左边，即反转以后cur.next=pre</span></span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">        head=head.<span class="property">next</span>;</span><br><span class="line">        cur.<span class="property">next</span>=pre;</span><br><span class="line">        <span class="comment">// 把pre和cur都向右移动一个元素</span></span><br><span class="line">        pre=cur;</span><br><span class="line">        cur=head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre; <span class="comment">// 最终head和cur都为null，pre是反转之后的head</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(1)</li>
</ul>
<h3 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverse = <span class="keyword">function</span>(<span class="params">pre,cur</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>) <span class="keyword">return</span> pre;</span><br><span class="line">    <span class="keyword">var</span> temp=cur.<span class="property">next</span>;</span><br><span class="line">    cur.<span class="property">next</span>=pre;</span><br><span class="line">    pre=cur;</span><br><span class="line">    cur=temp;<span class="comment">//一次反转操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(pre,cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reverse</span>(<span class="literal">null</span>,head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n), 要递归处理链表的每个结点</li>
<li>空间复杂度: O(n), 递归调用了 n 层栈空间</li>
</ul>
<h2 id="交换结点"><a href="#交换结点" class="headerlink" title="交换结点"></a>交换结点</h2><blockquote>
<p>题目：给定一个链表，两两交换其中相邻的结点，并返回交换后的链表。不能只是单纯的改变结点内部的值，而是需要实际的进行结点交换。</p>
</blockquote>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp=head;</span><br><span class="line">    <span class="keyword">var</span> pre=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">    <span class="title function_">swap</span>(temp,pre);</span><br><span class="line">    <span class="keyword">return</span> pre.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> swap = <span class="keyword">function</span>(<span class="params">cur,pre</span>) &#123; </span><br><span class="line">    <span class="comment">// 交换cur和cur.next,pre.next=cur;</span></span><br><span class="line">    <span class="keyword">if</span>(cur==<span class="literal">null</span>||cur.<span class="property">next</span>==<span class="literal">null</span>) <span class="keyword">return</span>; <span class="comment">// 剩余结点不足两个，无法交换</span></span><br><span class="line">    <span class="keyword">var</span> temp=cur.<span class="property">next</span>;</span><br><span class="line">    <span class="comment">// 交换开始</span></span><br><span class="line">    cur.<span class="property">next</span>=cur.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    temp.<span class="property">next</span>=cur;</span><br><span class="line">    pre.<span class="property">next</span>=temp;</span><br><span class="line">    <span class="comment">// 交换结束</span></span><br><span class="line">    <span class="comment">// 指针扫过已交换的元素，为下次交换准备</span></span><br><span class="line">    pre=cur;</span><br><span class="line">    cur=cur.<span class="property">next</span></span><br><span class="line">    <span class="title function_">swap</span>(cur,pre); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> swapPairs = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ret=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head) <span class="comment">//虚拟头结点</span></span><br><span class="line">    <span class="keyword">let</span> temp=ret</span><br><span class="line">    <span class="keyword">while</span>(temp.<span class="property">next</span>&amp;&amp;temp.<span class="property">next</span>.<span class="property">next</span>)&#123; <span class="comment">///每次交换temp后面的两个结点</span></span><br><span class="line">        <span class="keyword">let</span> cur=temp.<span class="property">next</span>.<span class="property">next</span></span><br><span class="line">        <span class="keyword">let</span> pre=temp.<span class="property">next</span></span><br><span class="line">        temp.<span class="property">next</span>=cur</span><br><span class="line">        pre.<span class="property">next</span>=cur.<span class="property">next</span></span><br><span class="line">        cur.<span class="property">next</span>=pre</span><br><span class="line">        temp=pre</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret.<span class="property">next</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="删除倒数第N个结点"><a href="#删除倒数第N个结点" class="headerlink" title="删除倒数第N个结点"></a>删除倒数第N个结点</h2><blockquote>
<p>题目：删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 设两个指针，让他们相隔n位，同时后移</span></span><br><span class="line"><span class="comment">// 右边的指针到尾巴时，左边的指针刚好到待删元素的前一位</span></span><br><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="keyword">function</span>(<span class="params">head, n</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> list=<span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>,head);</span><br><span class="line">    <span class="keyword">var</span> pre=list;</span><br><span class="line">    <span class="keyword">var</span> behind=list;</span><br><span class="line">    <span class="keyword">if</span>(head.<span class="property">next</span>==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        pre=pre.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pre!=<span class="literal">null</span>&amp;&amp;pre.<span class="property">next</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">        pre=pre.<span class="property">next</span>;</span><br><span class="line">        behind=behind.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    behind.<span class="property">next</span>=behind.<span class="property">next</span>.<span class="property">next</span>;</span><br><span class="line">    <span class="keyword">return</span> list.<span class="property">next</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(1)</li>
</ul>
<h2 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h2><blockquote>
<p>题目：给你两个单链表的头结点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始结点。如果两个链表没有交点，返回 <code>null</code> 。</p>
</blockquote>
<p>很容易想到暴力的方法，遍历headA和headB</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headA</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headB</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(headA==<span class="literal">null</span>||headB==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(headA!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> head=headB</span><br><span class="line">        <span class="keyword">while</span>(headB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headA;</span><br><span class="line">            headB=headB.<span class="property">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        headA=headA.<span class="property">next</span>;</span><br><span class="line">        headB=head; <span class="comment">// headB每次从头开始</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n^2)</li>
<li>空间复杂度: O(1)</li>
</ul>
<p>换一种思路，如果能让headA和headB在平行位置上一起移动，遍历一遍之后很容易得到结果。而headA和headB在长度上不一样，抓住这个<strong>长度差</strong>，让更长的率先移动直到长度相同即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headA</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">headB</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="keyword">function</span>(<span class="params">headA, headB</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> lenA=<span class="number">0</span>,lenB=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> tempA=headA,tempB=headB;</span><br><span class="line">    <span class="keyword">while</span>(tempA!=<span class="literal">null</span>)&#123;</span><br><span class="line">        lenA++;</span><br><span class="line">        tempA=tempA.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(tempB!=<span class="literal">null</span>)&#123;</span><br><span class="line">        lenB++;</span><br><span class="line">        tempB=tempB.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="comment">// 先得到headA和headB的长度</span></span><br><span class="line">    <span class="keyword">if</span>(lenA&gt;lenB)&#123;</span><br><span class="line">        <span class="keyword">var</span> len=lenA-lenB;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) headA=headA.<span class="property">next</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lenB&gt;lenA)&#123;</span><br><span class="line">        <span class="keyword">var</span> len=lenB-lenA;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) headB=headB.<span class="property">next</span>;</span><br><span class="line">    &#125; <span class="comment">// 消耗更长的一方的多余长度</span></span><br><span class="line">    <span class="keyword">while</span>(headA!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA==headB) <span class="keyword">return</span> headA;</span><br><span class="line">        headA=headA.<span class="property">next</span>;</span><br><span class="line">        headB=headB.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//没有交点</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)</li>
<li>空间复杂度: O(1)</li>
</ul>
<h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><blockquote>
<p>题目：给定一个链表的头结点  <code>head</code> ，返回链表开始入环的第一个结点。 如果链表无环，则返回 <code>null</code>。</p>
</blockquote>
<p>这道题目其实包含了两个问题：</p>
<ul>
<li>判断有没有环<ul>
<li>环的特点就是无论后移多少次，始终在环里转圈。根据这个特点可以定义快慢指针，快指针每次前进两格，慢指针每次前进一格。若两指针能相遇，则说明有环。</li>
</ul>
</li>
<li>找到环的入口<ul>
<li>设头结点到环的入口结点距离为x，由于快指针每次比慢指针多走1格，因此他们一定在<strong>慢指针没走满一圈环的时候相遇</strong>，设入口结点到相遇结点的距离为y，环中剩下的距离为z</li>
<li><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220925103433.png" alt="img"></li>
<li>则fast指针走过的结点数&#x3D;slow指针走过的结点数*2：<code>(x + y) * 2 = x + y + n (y + z)</code>（假设fast指针在环内走了n圈遇到慢指针，必定有n&gt;&#x3D;1）</li>
<li>最后是要求x，把x放一边：<code>x = (n - 1) (y + z) + z</code></li>
<li><strong>在头结点定义index1指针，相遇结点定义index2指针，让他们同时同速移动，他们第一次相遇的结点就是环的入口结点</strong>。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">ListNode</span>&#125; <span class="variable">head</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">ListNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">    <span class="comment">// 找到相遇结点</span></span><br><span class="line">    <span class="keyword">var</span> fast=head,slow=head;</span><br><span class="line">    <span class="keyword">while</span>(fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">        fast=fast.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span>(fast==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// fast为空说明没有环</span></span><br><span class="line">        fast=fast.<span class="property">next</span>; <span class="comment">// fast要连移两步,中间要判断一下是否为空，否则有可能空指针</span></span><br><span class="line">        slow=slow.<span class="property">next</span>;</span><br><span class="line">        <span class="keyword">if</span>(fast==slow)&#123; <span class="comment">// 相遇结点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fast==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 求结点入口</span></span><br><span class="line">    <span class="keyword">var</span> index1=head,index2=fast;</span><br><span class="line">    <span class="keyword">while</span>(index1!=index2)&#123; <span class="comment">// index1和index2首次相遇的地方就是结点入口</span></span><br><span class="line">        index1=index1.<span class="property">next</span>;</span><br><span class="line">        index2=index2.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n)<ul>
<li>快慢指针相遇前，指针走的次数小于链表长度，快慢指针相遇后，两个index指针走的次数也小于链表长度，总体为走的次数小于 2n</li>
</ul>
</li>
<li>空间复杂度: O(1)</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>很多时候对链表头结点的处理要单独考虑，为链表设立<strong>虚拟头结点</strong>可以更方便。</p>
<p>双指针法在链表的应用也很广泛，特别是涉及到距离时。</p>
<p>7.26二刷结束</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希表</title>
    <url>/2023/06/27/12-00-00/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p> 哈希表也叫散列表，是根据<strong>关键码</strong>的值而<strong>直接进行访问</strong>的数据结构。</p>
</blockquote>
<p>其实数组就是一张哈希表，数组的索引下标就是关键码，通过下标可以直接访问数组中的元素。</p>
<p>一般哈希表用于<strong>快速判断一个元素是否出现在集合中</strong>，是一种空间换时间的策略。</p>
<span id="more"></span>

<h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><p>假如要查询一个名字是否在学校里，只需要初始化把这所学校里学生的名字都存在哈希表里，将学生姓名<strong>映射到哈希表</strong>上就涉及到了hash function ，也就是哈希函数。</p>
<img src="https://code-thinking-1253855093.file.myqcloud.com/pics/2021010423484818.png" alt="哈希表2" style="zoom: 67%;" />



<h3 id="哈希碰撞"><a href="#哈希碰撞" class="headerlink" title="哈希碰撞"></a>哈希碰撞</h3><p>即不同的名字映射到了同一个索引上。</p>
<h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h4><p>发生碰撞的元素都被存储在以该索引为头结点的链表中。</p>
<p>这种方法要选择适当的哈希表的大小，既不会因为哈希表数组空而浪费内存，也不会因为链表长而在查找上浪费时间。</p>
<h4 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h4><p>首先要确保tableSize大于dataSize。这种方法就是给产生碰撞的元素再找一个空位放置，根据不同的找空位方法还可细分。</p>
<h3 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h3><ol>
<li><p>数组</p>
</li>
<li><p>set(集合)</p>
</li>
<li><p>map(映射)</p>
</li>
</ol>
<h2 id="字母异位词"><a href="#字母异位词" class="headerlink" title="字母异位词"></a>字母异位词</h2><blockquote>
<p>题目：给定两个字符串 s 和 t ，判断s 和 t 中每个字符出现的次数是否相同。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// charCodeAt()方法，返回字符串第一个字符的Unicode编码值</span></span><br><span class="line"><span class="comment">// for..in可遍历Array, Object对象，且会遍历到新添加的成员属性。(历史遗留)</span></span><br><span class="line"><span class="comment">// for..of可遍历iterable可被迭代的对象(不包括Object)。且只遍历属于对象本身的属性。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">s</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">t</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用数组的解法</span></span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span>!=t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> base=<span class="string">&quot;a&quot;</span>.<span class="title function_">charCodeAt</span>();<span class="comment">//获取a的unicode编码值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        arr[i.<span class="title function_">charCodeAt</span>()-base]++;<span class="comment">//统计s串中各字符的个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> t)&#123;</span><br><span class="line">        arr[i.<span class="title function_">charCodeAt</span>()-base]--;</span><br><span class="line">        <span class="keyword">if</span>(arr[i.<span class="title function_">charCodeAt</span>()-base]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isAnagram = <span class="keyword">function</span>(<span class="params">s, t</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用map的解法</span></span><br><span class="line">    <span class="keyword">if</span>(s.<span class="property">length</span>!=t.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">var</span> temp=arr.<span class="title function_">get</span>(i)||<span class="number">0</span>;</span><br><span class="line">        arr.<span class="title function_">set</span>(i,temp+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> t)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!arr.<span class="title function_">get</span>(i)) <span class="comment">// 这里包含了两种情况，一是为0，二是undefined </span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        arr.<span class="title function_">set</span>(i, arr.<span class="title function_">get</span>(i)-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li>383</li>
<li>49</li>
</ul>
<h2 id="数组交集"><a href="#数组交集" class="headerlink" title="数组交集"></a>数组交集</h2><blockquote>
<p>题目：给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回它们的交集 。输出结果中的每个元素一定是唯一的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> intersection = <span class="keyword">function</span>(<span class="params">nums1, nums2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1=<span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">var</span> ret=[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> nums1)&#123;</span><br><span class="line">        num1.<span class="title function_">add</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">of</span> nums2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num1.<span class="title function_">has</span>(i)&amp;&amp;!ret.<span class="title function_">includes</span>(i)) ret.<span class="title function_">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><ul>
<li>350</li>
</ul>
<h2 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h2><blockquote>
<p>题目：判断一个数 <code>n</code> 是不是快乐数</p>
<p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数。</p>
</blockquote>
<p>本题的重点在于无限循环，如果不是快乐数，计算出来的平方和一定会出现重复</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> num=<span class="title function_">mySum</span>(n);</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.<span class="title function_">has</span>(num)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        list.<span class="title function_">add</span>(num);</span><br><span class="line">        num=<span class="title function_">mySum</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 计算一个数字各数位的平方和</span></span><br><span class="line"><span class="keyword">var</span> mySum = <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> n*n;</span><br><span class="line">    <span class="keyword">let</span> str=n+<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">0</span>;</span><br><span class="line">    str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="function"><span class="params">i</span>=&gt;</span>&#123;res+=<span class="title class_">Number</span>(i)*<span class="title class_">Number</span>(i)&#125;)</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><blockquote>
<p>题目：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>
</blockquote>
<p>本题的思路是在遍历时寻找元素匹配的另一半是否出现过，很自然想到用哈希表。常用的哈希表中，如果用数组会造成大量空间浪费；用set会出错（3+3&#x3D;6）,所以map比较合适</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> minus=target-nums[i] <span class="comment">// 差值</span></span><br><span class="line">        <span class="keyword">if</span>(list.<span class="title function_">has</span>(minus))&#123;</span><br><span class="line">            <span class="keyword">return</span> [list.<span class="title function_">get</span>(minus),i]</span><br><span class="line">        &#125;</span><br><span class="line">        list.<span class="title function_">set</span>(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="四数相加"><a href="#四数相加" class="headerlink" title="四数相加"></a>四数相加</h2><blockquote>
<p>题目：给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：</p>
<ul>
<li>0 &lt;&#x3D; i, j, k, l &lt; n</li>
<li>nums1[i] + nums2[j] + nums3[k] + nums4[l] &#x3D;&#x3D; 0</li>
</ul>
</blockquote>
<p>将四个数组两两一组，分别遍历两个数组中不同元素之和的所有情况，得到一个数组和一个map。之后遍历该数组，在map查找有无与之匹配的解，map中的value存放的是出现这个和的次数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums1</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums2</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums3</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums4</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="keyword">function</span>(<span class="params">nums1, nums2, nums3, nums4</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> list1=<span class="keyword">new</span> <span class="title class_">Map</span>(); <span class="comment">// nums1和nums2的遍历组合</span></span><br><span class="line">    <span class="keyword">let</span> list2=[] <span class="comment">// nums3和nums4的遍历组合</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums1.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums2.<span class="property">length</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">let</span> temp=nums1[i]+nums2[j]</span><br><span class="line">            <span class="keyword">let</span> num=list1.<span class="title function_">get</span>(temp)</span><br><span class="line">            list1.<span class="title function_">set</span>(temp,num==<span class="literal">undefined</span>?<span class="number">1</span>:num+<span class="number">1</span>) <span class="comment">// 构造list1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums3.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;nums4.<span class="property">length</span>;j++)&#123;</span><br><span class="line">            list2.<span class="title function_">push</span>(nums3[i]+nums4[j]); <span class="comment">// 构造list2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;list2.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> val=<span class="number">0</span>-list2[i];</span><br><span class="line">        <span class="keyword">if</span>(list1.<span class="title function_">get</span>(val)!=<span class="literal">undefined</span>) res+=list1.<span class="title function_">get</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>时间复杂度: O(n^2)</li>
<li>空间复杂度: O(n^2)，最坏情况下A和B的值各不相同，相加产生的数字个数为 n^2</li>
</ul>
<h2 id="三数之和"><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h2><blockquote>
<p>题目：给定一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i !&#x3D; j、i !&#x3D; k 且 j !&#x3D; k ，同时还满足 nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0 。返回所有和为 0 且不重复的三元组。</p>
<p><strong>答案中不可以包含重复的三元组</strong></p>
</blockquote>
<p>注意题目条件：<strong>答案中不可以包含重复的三元组</strong>，即使有两组三元组均满足条件，但若内部元素值一样，则违反了这个条件</p>
<p>这道题用哈希法来做会遇到一个很棘手的问题，就是题目里说的不能包含重复的三元组。对重复的三元组去重很麻烦，也很费时。所以<strong>哈希法并不合适</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="title class_">Set</span>() <span class="comment">// 用于去除重复数组，但set不能去除重复数组</span></span><br><span class="line">  <span class="keyword">let</span> ans=[]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = list.<span class="title function_">get</span>(nums[i])</span><br><span class="line">    list.<span class="title function_">set</span>(nums[i], num == <span class="literal">undefined</span> ? <span class="number">1</span> : num + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> num = list.<span class="title function_">get</span>(nums[i])</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="literal">undefined</span>) <span class="keyword">continue</span></span><br><span class="line">    list.<span class="title function_">set</span>(nums[i], num - <span class="number">1</span> == <span class="number">0</span> ? <span class="literal">undefined</span> : num - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> numm = list.<span class="title function_">get</span>(nums[j])</span><br><span class="line">      <span class="keyword">if</span>(numm==<span class="literal">undefined</span>) <span class="keyword">continue</span></span><br><span class="line">      list.<span class="title function_">set</span>(nums[j], numm - <span class="number">1</span> == <span class="number">0</span> ? <span class="literal">undefined</span> : numm - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">let</span> tar = <span class="number">0</span> - nums[i] - nums[j];</span><br><span class="line">      <span class="keyword">if</span> (list.<span class="title function_">get</span>(tar) != <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp=<span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">        res.<span class="title function_">add</span>([nums[i], nums[j], tar].<span class="title function_">sort</span>())</span><br><span class="line">        list.<span class="title function_">set</span>(tar, list.<span class="title function_">get</span>(tar) - <span class="number">1</span> == <span class="number">0</span> ? <span class="literal">undefined</span> : list.<span class="title function_">get</span>(tar) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">//list.set(nums[j], list.get(nums[j]) == undefined ? 1 : list.get(nums[j]) + 1)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//list.set(nums[i], list.get(nums[i]) == undefined ? 1 : list.get(nums[i]) + 1)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> res) ans.<span class="title function_">push</span>(i)</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h3><p>本题使用双指针法的重要前置操作是<strong>数组排序</strong>。整体思路比较简单，但<strong>如何去重是关键</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b) <span class="comment">//从小到大排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="comment">// 对i指针去重</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>; </span><br><span class="line">        <span class="keyword">let</span> left=i+<span class="number">1</span>,right=nums.<span class="property">length</span>-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&gt;<span class="number">0</span>) right--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[left]+nums[right]&lt;<span class="number">0</span>) left++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans.<span class="title function_">push</span>([nums[i],nums[left],nums[right]])</span><br><span class="line">                <span class="comment">// 对right去重</span></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                <span class="comment">// 对left去重</span></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                left++;right--</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h2><blockquote>
<p>题目：给定一个整数数组 nums ，返回所有和为 0 且不重复的四元组。</p>
</blockquote>
<p>四数之和与三数之和本质上都是一个做法，套两个循环，<code>nums[i]</code>和<code>nums[j]</code>为定值，设头尾指针移动。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = nums.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">4</span>) <span class="keyword">return</span> [];</span><br><span class="line">    nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 去重i</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len - <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 去重j</span></span><br><span class="line">            <span class="keyword">if</span>(j &gt; i + <span class="number">1</span> &amp;&amp; nums[j] === nums[j - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">let</span> l = j + <span class="number">1</span>, r = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="keyword">const</span> sum = nums[i] + nums[j] + nums[l] + nums[r];</span><br><span class="line">                <span class="keyword">if</span>(sum &lt; target) &#123; l++; <span class="keyword">continue</span>&#125;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; target) &#123; r--; <span class="keyword">continue</span>&#125;</span><br><span class="line">                res.<span class="title function_">push</span>([nums[i], nums[j], nums[l], nums[r]]);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 对nums[left]和nums[right]去重</span></span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[l] === nums[++l]);</span><br><span class="line">                <span class="keyword">while</span>(l &lt; r &amp;&amp; nums[r] === nums[--r]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="数组的缺陷"><a href="#数组的缺陷" class="headerlink" title="数组的缺陷"></a>数组的缺陷</h3><ul>
<li>数组的大小是有限的，受到系统栈空间（不是数据结构的栈）的限制。</li>
<li>如果数组空间够大，但哈希值比较少、特别分散、跨度非常大，使用数组就造成空间的极大浪费。</li>
</ul>
<h3 id="set的缺陷"><a href="#set的缺陷" class="headerlink" title="set的缺陷"></a>set的缺陷</h3><ul>
<li>set是一个集合，里面放的元素只能是一个key</li>
</ul>
<h3 id="map的缺陷"><a href="#map的缺陷" class="headerlink" title="map的缺陷"></a>map的缺陷</h3><ul>
<li>map可以算是万能的哈希表，但<strong>map要维护红黑树或者符号表，而且还要做哈希函数的运算</strong>，效率不高</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树</title>
    <url>/2023/07/10/15-00-00/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。</p>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200920221638903.png" alt="img"></p>
<span id="more"></span>

<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉搜索树是有数值的，<strong>二叉搜索树是一个有序树</strong>。</p>
<ul>
<li>若它的左子树不空，则<strong>左子树上所有结点的值均小于它的根结点的值</strong>；</li>
<li>若它的右子树不空，则<strong>右子树上所有结点的值均大于它的根结点的值</strong>；</li>
<li>它的左、右子树也分别为二叉排序树</li>
</ul>
<p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806190304693.png" alt="img"></p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul>
<li>深度优先遍历(可以借助栈使用非递归方式实现)<ul>
<li>前序遍历（递归法，迭代法）</li>
<li>中序遍历（递归法，迭代法）</li>
<li>后序遍历（递归法，迭代法）</li>
</ul>
</li>
<li>广度优先遍历(通常使用队列实现)<ul>
<li>层次遍历（迭代法）</li>
</ul>
</li>
</ul>
<h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TreeNode</span>(<span class="params">val, left, right</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">val</span> = (val===<span class="literal">undefined</span> ? <span class="number">0</span> : val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = (left===<span class="literal">undefined</span> ? <span class="literal">null</span> : left)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = (right===<span class="literal">undefined</span> ? <span class="literal">null</span> : right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><h3 id="如何写递归程序"><a href="#如何写递归程序" class="headerlink" title="如何写递归程序"></a>如何写递归程序</h3><ol>
<li><strong>确定递归函数的参数和返回值</strong>： 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</li>
<li><strong>确定终止条件</strong>：写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</li>
<li><strong>确定单层递归的逻辑</strong>：确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</li>
</ol>
<h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">const</span> df = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        ans.<span class="title function_">push</span>(root.<span class="property">val</span>)</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">left</span>)</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">df</span>(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">const</span> df = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">left</span>)</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">right</span>)</span><br><span class="line">        ans.<span class="title function_">push</span>(root.<span class="property">val</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">df</span>(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">const</span> df = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">left</span>)</span><br><span class="line">        ans.<span class="title function_">push</span>(root.<span class="property">val</span>)</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">df</span>(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h2><h3 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(root)</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp=stack.<span class="title function_">pop</span>()</span><br><span class="line">        ans.<span class="title function_">push</span>(temp.<span class="property">val</span>)</span><br><span class="line">        <span class="comment">// 这里注意，前序遍历的顺序是根-&gt;左孩子-&gt;右孩子</span></span><br><span class="line">        <span class="comment">// 但栈是先入后出的数据结构，因此要先入栈右孩子</span></span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">right</span>!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(temp.<span class="property">right</span>)</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">left</span>!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(temp.<span class="property">left</span>)  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    <span class="keyword">let</span> cur=root <span class="comment">// 处理以cur为根的子树</span></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="literal">null</span>||stack.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            stack.<span class="title function_">push</span>(cur)</span><br><span class="line">            cur=cur.<span class="property">left</span> <span class="comment">//处理cur的左子树</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur=stack.<span class="title function_">pop</span>()</span><br><span class="line">            ans.<span class="title function_">push</span>(cur.<span class="property">val</span>)</span><br><span class="line">            cur=cur.<span class="property">right</span> <span class="comment">//处理cur的右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">let</span> stack=[]</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(root)</span><br><span class="line">    <span class="keyword">while</span>(stack.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp=stack.<span class="title function_">pop</span>()</span><br><span class="line">        ans.<span class="title function_">push</span>(temp.<span class="property">val</span>)</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">left</span>!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(temp.<span class="property">left</span>)</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">right</span>!=<span class="literal">null</span>) stack.<span class="title function_">push</span>(temp.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.<span class="title function_">reverse</span>() <span class="comment">//最后把数组反转</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>该题与普通的层序遍历的区别的在于：需要把一层的元素单独放在一个数组中，最后返回一个二维数组。</p>
<p>因此要记录下每一层元素的数量，<strong>当一层的元素全部出队时，队列的长度就是下一层元素的数量</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> queue=[]</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">let</span> count=<span class="number">1</span> <span class="comment">//记录每一层元素的个数</span></span><br><span class="line">    <span class="keyword">let</span> ans_temp=[] <span class="comment">//存储每层元素</span></span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">null</span>) queue.<span class="title function_">push</span>(root)</span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp=queue.<span class="title function_">shift</span>()</span><br><span class="line">        count-- <span class="comment">//每弹出一个元素，该层数量-1</span></span><br><span class="line">        ans_temp.<span class="title function_">push</span>(temp.<span class="property">val</span>)</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">left</span>!=<span class="literal">null</span>) queue.<span class="title function_">push</span>(temp.<span class="property">left</span>)</span><br><span class="line">        <span class="keyword">if</span>(temp.<span class="property">right</span>!=<span class="literal">null</span>) queue.<span class="title function_">push</span>(temp.<span class="property">right</span>)</span><br><span class="line">        <span class="keyword">if</span>(count==<span class="number">0</span>)&#123; <span class="comment">//该层元素全部弹出</span></span><br><span class="line">            ans.<span class="title function_">push</span>(ans_temp)</span><br><span class="line">            ans_temp=[]</span><br><span class="line">            count=queue.<span class="property">length</span> <span class="comment">//此时下一层结点已全部入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>相关题目：102、107、199、637、429、515、116、117</p>
<h2 id="翻转二叉树"><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h2><blockquote>
<p>题目：给一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>
</blockquote>
<p>这道题思想上并不复杂，就是遍历二叉树，在遍历的时候两两交换其子结点。重点在于用什么遍历方式。是选递归还是非递归，递归中又有前中后序。不能稀里糊涂accpet就算了事</p>
<p>其实前序和后序都很合适，但如果用中序遍历则会比较绕，因为中序的顺序是左中右，先处理左子树，再把左右子树翻转，然后去处理右子树，此时右子树就是已经被处理过的原本的左子树。也就是说有的结点被翻转两次，有的结点没被翻转。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">TreeNode</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="title function_">invert</span>(root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> invert = <span class="keyword">function</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="comment">// 翻转以node为根的子树</span></span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    [node.<span class="property">left</span>,node.<span class="property">right</span>]=[node.<span class="property">right</span>,node.<span class="property">left</span>]</span><br><span class="line">    <span class="title function_">invert</span>(node.<span class="property">left</span>)</span><br><span class="line">    <span class="comment">// 如果是中序，交换就要写在这里</span></span><br><span class="line">    <span class="title function_">invert</span>(node.<span class="property">right</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h2><blockquote>
<p>题目：检查一个二叉树是否轴对称</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t1=<span class="title function_">postorder1</span>(root.<span class="property">left</span>)</span><br><span class="line">    <span class="keyword">let</span> t2=<span class="title function_">postorder2</span>(root.<span class="property">right</span>)</span><br><span class="line">    <span class="keyword">return</span> t1.<span class="title function_">join</span>()==t2.<span class="title function_">join</span>() <span class="comment">// 数组不能直接比较，可先转成字符串</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorder1 = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">const</span> df = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123; <span class="comment">//这里不能直接return，否则当只有一个孩子的时候，左孩子和右孩子的遍历结果是一样的</span></span><br><span class="line">            ans.<span class="title function_">push</span>(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">left</span>) <span class="comment">//先左再右</span></span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">right</span>)</span><br><span class="line">        ans.<span class="title function_">push</span>(root.<span class="property">val</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">df</span>(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> postorder2 = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ans=[]</span><br><span class="line">    <span class="keyword">const</span> df = <span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            ans.<span class="title function_">push</span>(-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">right</span>) <span class="comment">//先右再左</span></span><br><span class="line">        <span class="title function_">df</span>(root.<span class="property">left</span>)</span><br><span class="line">        ans.<span class="title function_">push</span>(root.<span class="property">val</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">df</span>(root)</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h2><blockquote>
<p>题目：给定一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p>
</blockquote>
<h3 id="普通二叉树"><a href="#普通二叉树" class="headerlink" title="普通二叉树"></a>普通二叉树</h3><p>遍历结点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> df=<span class="keyword">function</span>(<span class="params">root</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> leftNum=<span class="title function_">df</span>(root.<span class="property">left</span>)</span><br><span class="line">        <span class="keyword">let</span> rightNum=<span class="title function_">df</span>(root.<span class="property">right</span>)</span><br><span class="line">        <span class="keyword">return</span> leftNum+rightNum+<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">df</span>(root)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="完全二叉树-1"><a href="#完全二叉树-1" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>完全二叉树有两种情况，一是满二叉树；二是最后一层叶子结点没满。对于满二叉树而言，得到深度之后可以用公式快速计算，那么可以考虑<strong>把一个完全二叉树分为若干满二叉树分别计算</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="keyword">function</span>(<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> left=root.<span class="property">left</span></span><br><span class="line">    <span class="keyword">let</span> right=root.<span class="property">right</span></span><br><span class="line">    <span class="keyword">let</span> leftDepth=<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> rightDepth=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(left)&#123;</span><br><span class="line">        leftDepth++</span><br><span class="line">        left=left.<span class="property">left</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(right)&#123;</span><br><span class="line">        rightDepth++</span><br><span class="line">        right=right.<span class="property">right</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(leftDepth===rightDepth) <span class="keyword">return</span> <span class="number">2</span>**leftDepth-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">countNodes</span>(root.<span class="property">left</span>)+<span class="title function_">countNodes</span>(root.<span class="property">right</span>)+<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><blockquote>
<p>题目：给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
</blockquote>
<p>本题要求二叉树的<strong>高度</strong>，与之前求的二叉树的<strong>深度</strong>要区分开。对于一个高为h 的二叉树，其根节点的高度就是h，而深度则为1</p>
<p>求高度用后序遍历，求深度用前序遍历。因此后序遍历的顺序是左右中，先处理孩子，再处理根，这样就可以把孩子的高度返回给根，根在孩子的基础上+1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">TreeNode</span>&#125; <span class="variable">root</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="keyword">function</span> (<span class="params">root</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getHeight</span>(root) == -<span class="number">1</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getHeight=<span class="keyword">function</span>(<span class="params">node</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(node==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> left=<span class="title function_">getHeight</span>(node.<span class="property">left</span>)</span><br><span class="line">    <span class="keyword">if</span>(left==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right=<span class="title function_">getHeight</span>(node.<span class="property">right</span>)</span><br><span class="line">    <span class="keyword">if</span>(right==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(left-right)&gt;<span class="number">1</span>?-<span class="number">1</span>:<span class="number">1</span>+<span class="title class_">Math</span>.<span class="title function_">max</span>(left,right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>java中间件</title>
    <url>/2024/02/25/21-57-37/</url>
    <content><![CDATA[<h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ 是一款功能强大的<strong>分布式消息系统</strong>，主要的使用场景有异步解耦、削峰填谷、顺序消息、分布式模式缓存同步、分布式定时&#x2F;延时调度。</p>
<span id="more"></span>

<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题是消息传输和存储的顶层容器，用于标识同一类业务逻辑的消息。</p>
<ul>
<li><strong>定义数据的分类隔离：</strong> 将不同业务类型的数据拆分到不同的主题中管理，通过主题实现存储的隔离性和订阅隔离性。</li>
<li><strong>定义数据的身份和权限：</strong> 消息本身是匿名无身份的，同一分类的消息使用相同的主题来做身份识别和权限管理。</li>
</ul>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>队列是消息存储和传输的实际容器，也是<strong>消息的最小存储单元</strong>。主题都是由多个队列组成，以此实现队列数量的水平拆分和队列内部的流式存储。</p>
<img src="/pic/rocketMQ.png" style="zoom: 50%;" />

<h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p>消息是<strong>最小数据传输单元</strong>。生产者将业务数据的负载和拓展属性包装成消息发送到服务端，服务端按照相关语义将消息投递到消费端进行消费。</p>
<h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>发布消息的角色。Producer 通过 MQ 的负载均衡模块选择相应的 Broker 集群队列进行消息投递，投递的过程支持快速失败和重试。</p>
<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><ul>
<li>支持以推（push），拉（pull）两种模式对消息进行消费。</li>
<li>同时也支持<strong>集群方式</strong>和广播方式的消费。</li>
<li>提供实时消息订阅机制，可以满足大多数用户的需求。</li>
</ul>
<h4 id="名字服务器"><a href="#名字服务器" class="headerlink" title="名字服务器"></a>名字服务器</h4><p>NameServer 是一个简单的 Topic 路由注册中心，支持 Topic、Broker 的动态注册与发现。</p>
<ul>
<li><strong>Broker管理</strong>，NameServer 接受 Broker 集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查 Broker 是否还存活；</li>
<li><strong>路由信息管理</strong>，每个 NameServer 将保存关于 Broker 集群的整个路由信息和用于客户端查询的队列信息。Producer 和 Consumer 通过 NameServer 就可以知道整个 Broker 集群的路由信息，从而进行消息的投递和消费。</li>
</ul>
<h4 id="代理服务器-Broker"><a href="#代理服务器-Broker" class="headerlink" title="代理服务器 Broker"></a>代理服务器 Broker</h4><p>Broker主要负责消息的存储、投递和查询以及服务高可用保证。</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><img src="/pic/rocketMQ工作原理.png" style="zoom: 80%;" />

<h4 id="启动NameServer"><a href="#启动NameServer" class="headerlink" title="启动NameServer"></a>启动NameServer</h4><p>启动 NameServer。NameServer 启动后监听端口，等待 Broker、Producer、Consumer 连接，相当于一个路由控制中心。</p>
<h4 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h4><p>启动 Broker。与所有 NameServer 保持长连接，定时发送心跳包。心跳包中包含当前 Broker 信息以及存储所有 Topic 信息。注册成功后，NameServer 集群中就有 Topic 跟 Broker 的映射关系。</p>
<h4 id="创建-Topic"><a href="#创建-Topic" class="headerlink" title="创建 Topic"></a>创建 Topic</h4><p>创建 Topic 时需要指定该 Topic 要存储在哪些 Broker 上，也可以在发送消息时自动创建 Topic。</p>
<h4 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h4><p>生产者发送消息。启动时先跟 NameServer 集群中的其中一台建立长连接，并从 NameServer 中获取当前发送的 Topic 存在于哪些 Broker 上，轮询从队列列表中选择一个队列，然后与队列所在的 Broker 建立长连接从而向 Broker发消息。</p>
<h4 id="消费者接受消息"><a href="#消费者接受消息" class="headerlink" title="消费者接受消息"></a>消费者接受消息</h4><p>消费者接受消息。跟其中一台 NameServer 建立长连接，获取当前订阅 Topic 存在哪些 Broker 上，然后直接跟 Broker 建立连接通道，然后开始消费消息。</p>
<h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><h3 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h3><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。如果某个微服务发生了故障，依赖这个服务的其他服务在请求时会被阻塞，随着时间推移，越来越多服务阻塞。</p>
<p>雪崩就是 <strong>微服务调用链路中的某个服务故障，导致整个链路中所有的微服务都不可用。</strong></p>
<p>常见的处理方式有四种：</p>
<ul>
<li><p>超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p>
</li>
<li><p>舱壁模式：限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。</p>
</li>
<li><p>断路器：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p>
</li>
<li><p><strong>流量控制</strong>：限制业务访问的QPS，避免服务因流量的突增而故障，是预防措施。</p>
</li>
</ul>
<p>Sentinel就是一款微服务流量控制组件，由阿里巴巴开源，可以<strong>实现流量控制，舱壁模式和降级熔断三种方式</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>Sentinel</strong></th>
<th><strong>Hystrix</strong></th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离</td>
<td>线程池隔离&#x2F;信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于慢调用比例或异常比例</td>
<td>基于失败比率</td>
</tr>
<tr>
<td>实时指标实现</td>
<td>滑动窗口</td>
<td>滑动窗口（基于 RxJava）</td>
</tr>
<tr>
<td>规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据源</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持慢启动、匀速排队模式</td>
<td>不支持</td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>
<td>不完善</td>
</tr>
<tr>
<td>常见框架的适配</td>
<td>Servlet、Spring Cloud、Dubbo、gRPC  等</td>
<td>Servlet、Spring Cloud Netflix</td>
</tr>
</tbody></table>
<h3 id="安装与整合"><a href="#安装与整合" class="headerlink" title="安装与整合"></a>安装与整合</h3><h4 id="安装控制台"><a href="#安装控制台" class="headerlink" title="安装控制台"></a>安装控制台</h4><p>sentinel官方提供了UI控制台，方便我们对系统做限流设置。将jar包放到任意非中文目录，执行命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure>

<p>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</p>
<table>
<thead>
<tr>
<th><strong>配置项</strong></th>
<th><strong>默认值</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>server.port</td>
<td>8080</td>
<td>服务端口</td>
</tr>
<tr>
<td>sentinel.dashboard.auth.username</td>
<td>sentinel</td>
<td>默认用户名</td>
</tr>
<tr>
<td>sentinel.dashboard.auth.password</td>
<td>sentinel</td>
<td>默认密码</td>
</tr>
</tbody></table>
<p>例如，修改端口：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080页面，就可以看到sentinel的控制台了，账号和密码默认都是：sentinel">http://localhost:8080页面，就可以看到sentinel的控制台了，账号和密码默认都是：sentinel</a></p>
<h4 id="项目整合Sentinel"><a href="#项目整合Sentinel" class="headerlink" title="项目整合Sentinel"></a>项目整合Sentinel</h4><p>引入sentinel依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置控制台</p>
<p>修改application.yaml文件，添加下面内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure>

<p>访问order-service的任意端点，触发sentinel的监控。</p>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><h4 id="簇点链路"><a href="#簇点链路" class="headerlink" title="簇点链路"></a>簇点链路</h4><p>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p>
<p>默认情况下sentinel会监控SpringMVC的每一个<strong>端点</strong>（Endpoint，也就是controller中的方法），因此SpringMVC的<strong>每一个端点就是调用链路中的一个资源</strong>。</p>
<img src="/pic/Sentinel控制台.png" style="zoom: 80%;" />

<p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p>
<ul>
<li>流控：流量控制</li>
<li>降级：降级熔断</li>
<li>热点：热点参数限流，是限流的一种</li>
<li>授权：请求的权限控制</li>
</ul>
<h4 id="流控选项"><a href="#流控选项" class="headerlink" title="流控选项"></a>流控选项</h4><p>流控表单如下：</p>
<img src="/pic/流控表单.png" style="zoom:80%;" />

<p>其含义是限制 &#x2F;order&#x2F;{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。QPS的具体值可由压测得出。</p>
<p>在高级选项中还有两个选项：流控模式和流控效果。</p>
<h5 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h5><ul>
<li><p>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</p>
</li>
<li><p>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流 (A触法阈值，对B限流)</p>
<ul>
<li>比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</li>
</ul>
</li>
<li><p>链路：统计从<strong>指定链路</strong>访问到本资源的请求，触发阈值时，对指定链路限流</p>
<ul>
<li><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p>
<p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure>

<p>重启服务，访问&#x2F;order&#x2F;query和&#x2F;order&#x2F;save，可以查看到sentinel的簇点链路规则中，出现了新的资源</p>
</li>
</ul>
</li>
</ul>
<h5 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h5><ul>
<li>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</li>
<li>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。<ul>
<li>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</li>
<li>请求阈值初始值是 maxThreshold &#x2F; coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</li>
</ul>
</li>
<li>排队等待：让所有的请求按照先后次序排队执行，如果请求预期的等待时间超出最大时长，则会被拒绝。<ul>
<li>根据QPS计算出每个请求的处理时间，严格按照这个时间释放请求，可以得到排队中的请求的等待时间，设立timeout，当等待时间超过timeout就直接拒接。</li>
</ul>
</li>
</ul>
<h4 id="Jmeter并发模拟"><a href="#Jmeter并发模拟" class="headerlink" title="Jmeter并发模拟"></a>Jmeter并发模拟</h4><p>可以使用Jmeter工具来做并发模拟，在规定时间内多次发起请求，</p>
<h4 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h4><p>以商品查询接口为例，请求路径是<code>/goods/&#123;id&#125;</code>，上面的限流方法对这个接口的所有商品一视同仁，也就是不考虑id。但在实际开发中，部分热门商品的请求数量肯定比冷门商品高，我们希望这部分商品分配到的QPS能高一些，这就需要热点参数限流了。</p>
<p>热点参数限流会<strong>根据参数值分组，分别统计QPS</strong></p>
<img src="/pic/热点参数限流.png" style="zoom: 67%;" />

<p><strong>热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源</strong></p>
<img src="/pic/标记资源.png" style="zoom:67%;" />

<p>接下来就可以在控制台进行配置，在控制台左侧边栏 热点规则中找到新增热点规则，</p>
<img src="/pic/热点参数限流面板.png" style="zoom: 67%;" />

<p>上面的选项就是给&#x2F;order&#x2F;{orderId}这个资源添加热点参数限流，规则如下：</p>
<ul>
<li>默认的热点参数规则是每1秒请求量不超过2</li>
<li>给102这个参数设置例外：每1秒请求量不超过4</li>
<li>给103这个参数设置例外：每1秒请求量不超过10</li>
</ul>
<p>另外，支持的参数类型只有基本数据类型和字符串，如果参数是其他类型就无法做热点参数限流。</p>
<h2 id="ShardingSphere"><a href="#ShardingSphere" class="headerlink" title="ShardingSphere"></a>ShardingSphere</h2><h3 id="分库分表介绍"><a href="#分库分表介绍" class="headerlink" title="分库分表介绍"></a>分库分表介绍</h3><p>分库分表是一种数据库分片技术，用于解决大规模应用中单一数据库容量不足以支持高并发和大数据量的问题。它将一个大型的数据库拆分成多个小型数据库，每个小型数据库称为一个分片。每个分片存储部分数据，从而降低了单个数据库的负担。</p>
<h4 id="分表时机"><a href="#分表时机" class="headerlink" title="分表时机"></a>分表时机</h4><p>数据量过大或者数据库表对应的磁盘文件过大。</p>
<h4 id="分库时机"><a href="#分库时机" class="headerlink" title="分库时机"></a>分库时机</h4><p>当数据库的连接不够客户端使用时，可以考虑分库或读写分离。</p>
<p>如果说当数据库的 QPS 越来越高以及数据量越来越大的时候，就需要考虑分库分表。</p>
<h3 id="ShardingSphere介绍"><a href="#ShardingSphere介绍" class="headerlink" title="ShardingSphere介绍"></a>ShardingSphere介绍</h3><p><code>Apache ShardingSphere</code> 是一款分布式的数据库生态系统， 可以将任意数据库转换为分布式数据库，并通过数据分片、弹性伸缩、加密等能力对原有数据库进行增强。它关注如何充分合理地<strong>利用数据库的计算和存储能力</strong>，而并非实现一个全新的数据库。 它站在数据库的上层视角，<strong>关注数据库之间的协作</strong>多于数据库自身。</p>
<p><code>ShardingSphere</code> 有两个产品在企业中广泛使用，分别是 <code>ShardingSphere-JDBC</code> 以及 <code>ShardingSphere-Proxy</code>。</p>
<h4 id="ShardingSphere-JDBC"><a href="#ShardingSphere-JDBC" class="headerlink" title="ShardingSphere-JDBC"></a>ShardingSphere-JDBC</h4><p>轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务。 它使用客户端直连数据库，<strong>以 Jar 包形式提供服务</strong>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p>
<p>采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用</p>
<h4 id="ShardingSphere-Proxy"><a href="#ShardingSphere-Proxy" class="headerlink" title="ShardingSphere-Proxy"></a>ShardingSphere-Proxy</h4><p>透明化的数据库代理端，通过实现数据库二进制协议，对异构语言提供支持。</p>
<p>通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。</p>
<h4 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h4><table>
<thead>
<tr>
<th>特性</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td>数据分片</td>
<td>数据分片，是应对海量数据存储与计算的有效手段。ShardingSphere 基于底层数据库提供分布式数据库解决方案，可以水平扩展计算和存储。</td>
</tr>
<tr>
<td>读写分离</td>
<td>读写分离，是应对高压力业务访问的手段。基于对 SQL 语义理解及对底层数据库拓扑感知能力，ShardingSphere 提供灵活的读写流量拆分和读流量负载均衡</td>
</tr>
<tr>
<td>数据加密</td>
<td>数据加密，是保证数据安全的基本手段。ShardingSphere 提供完整、透明、安全、低成本的数据加密解决方案。</td>
</tr>
<tr>
<td>影子库</td>
<td>在全链路压测场景下，ShardingSphere 支持不同工作负载下的数据隔离，避免测试数据污染生产环境。</td>
</tr>
</tbody></table>
<h3 id="数据分库核心概念"><a href="#数据分库核心概念" class="headerlink" title="数据分库核心概念"></a>数据分库核心概念</h3><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><h5 id="逻辑表"><a href="#逻辑表" class="headerlink" title="逻辑表"></a>逻辑表</h5><p>相同结构的水平拆分数据库（表）的逻辑名称，是 SQL 中表的逻辑标识。 例：订单数据根据主键尾数拆分为 10 张表，分别是 <code>t_order_0</code> 到 <code>t_order_9</code>，他们的逻辑表名为 <code>t_order</code>。</p>
<h5 id="真实表"><a href="#真实表" class="headerlink" title="真实表"></a>真实表</h5><p>在水平拆分的数据库中真实存在的物理表。 即上个示例中的 <code>t_order_0</code> 到 <code>t_order_9</code>。</p>
<h5 id="广播表"><a href="#广播表" class="headerlink" title="广播表"></a>广播表</h5><p>指所有的数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。</p>
<h5 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h5><p>指所有的分片数据源中仅唯一存在的表。 适用于数据量不大且无需分片的表。</p>
<h4 id="数据节点"><a href="#数据节点" class="headerlink" title="数据节点"></a>数据节点</h4><p>数据分片的最小单元，由数据源名称和真实表组成。 例：ds_0.t_order_0。 逻辑表与真实表的映射关系，可分为均匀分布和自定义分布两种形式。</p>
<h5 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h5><p>数据表在每个数据源内呈现均匀分布的态势， 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db0</span><br><span class="line">  ├── t_order0</span><br><span class="line">  └── t_order1</span><br><span class="line">db1</span><br><span class="line">  ├── t_order0</span><br><span class="line">  └── t_order1</span><br></pre></td></tr></table></figure>

<h5 id="自定义分布"><a href="#自定义分布" class="headerlink" title="自定义分布"></a>自定义分布</h5><p>指数据表呈现有特定规则的分布</p>
<h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><h5 id="分片键"><a href="#分片键" class="headerlink" title="分片键"></a>分片键</h5><p>分片键是用于<strong>决定数据会被分布在哪个分片中</strong>的字段，原理就是根据分片键的值计算出数据所分布的分片 ID。计算过程就是分片键算法，常见的算法有三种：Range、Hash和Lookup。</p>
<h5 id="自动化分片算法"><a href="#自动化分片算法" class="headerlink" title="自动化分片算法"></a>自动化分片算法</h5><p>分片算法语法糖，用于便捷的托管所有数据节点，使用者无需关注真实表的物理分布。 包括取模、哈希、范围、时间等常用分片算法的实现。</p>
<h5 id="自定义分片算法"><a href="#自定义分片算法" class="headerlink" title="自定义分片算法"></a>自定义分片算法</h5><p>提供接口让应用开发者自行实现与业务实现紧密相关的分片算法，并允许使用者自行管理真实表的物理分布。</p>
<h4 id="分布式主键"><a href="#分布式主键" class="headerlink" title="分布式主键"></a>分布式主键</h4><p>数据分片后，不同数据节点生成<strong>全局唯一主键</strong>是非常棘手的问题。为了方便用户使用、满足不同用户不同使用场景的需求， Apache ShardingSphere 不仅提供了内置的分布式主键生成器，例如 UUID、SNOWFLAKE，还抽离出分布式主键生成器的接口，方便用户自行实现自定义的自增主键生成器。</p>
<h2 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在多线程环境中，如果多个线程同时访问共享资源，会发生数据竞争，可能会导致出现脏数据或者系统问题，威胁到程序的正常运行。</p>
<p>为了保证共享资源被安全地访问，我们需要使用互斥操作对共享资源进行保护，即同一时刻只允许一个线程访问共享资源，其他线程需要等待当前线程释放后才能访问。这样可以避免数据竞争和脏数据问题，保证程序的正确性和稳定性。</p>
<p>分布式系统下，不同的服务&#x2F;客户端通常运行在独立的 JVM 进程上。如果多个 JVM 进程共享同一份资源的话，使用本地锁就没办法实现资源的互斥访问了。于是，<strong>分布式锁</strong> 就诞生了。常见的实现方案有：</p>
<ul>
<li>基于分布式协调服务 ZooKeeper 实现分布式锁。</li>
<li>基于分布式键值存储系统比如 Redis 、Etcd 实现分布式锁。</li>
</ul>
<h3 id="Redission介绍"><a href="#Redission介绍" class="headerlink" title="Redission介绍"></a>Redission介绍</h3><p>Redisson 是一个开源的 Java 语言 Redis 客户端，提供了很多开箱即用的功能，不仅仅包括多种分布式锁的实现。并且，Redisson 还支持 Redis 单机、Redis Sentinel、Redis Cluster 等多种部署架构。</p>
<p>Redisson 中的分布式锁自带自动续期机制，使用起来非常简单，原理也比较简单，其提供了一个专门用来监控和续期锁的 <strong>Watch Dog（ 看门狗）</strong>，如果操作共享资源的线程还未执行完成的话，Watch Dog 会不断地延长锁的过期时间，进而保证锁不会因为超时而被释放。</p>
<h2 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h2><p>随着业务量增大，数据量变多以及各种复杂场景下的分库分表的实现，使数据同步变得越来越困难。</p>
<p>Canal的主要用途是基于 MySQL 数据库的增量日志 Binlog 解析，提供增量数据订阅和消费，支持将增量数据投递到下游消费者(如Kafka、MQ等)或存储(ES)的组件，简单说就是<strong>数据同步</strong>。当然也不止数据同步</p>
<ul>
<li>数据同步</li>
<li>数据库实时监控</li>
<li>数据分析和挖掘</li>
<li>数据库备份</li>
<li>数据集成</li>
<li>数据库迁移</li>
</ul>
<h3 id="Binlog日志"><a href="#Binlog日志" class="headerlink" title="Binlog日志"></a>Binlog日志</h3><p>MySQL记录了所有DDL和DML语句，默认不开启，因为记录日志需要消耗时间，有性能损耗。</p>
<p>一般来说，在下面两场景下会开启Binlog日志: </p>
<ul>
<li><p>MySQL 主从集群部署时，需要将在 Master 端开启 Binlog，方便将数据同步到Slaves中。</p>
</li>
<li><p>数据恢复了，通过使用 MySQL Binlog 工具来使恢复数据。</p>
</li>
</ul>
<p>Binlog 的格式有三种，分别是 STATEMENT,MIXED,ROW。在配置文件中可以选择配置 <code>binlog_format= statement</code>。</p>
<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="left">介绍</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">STATEMENT</td>
<td align="left"><strong>语句级别</strong>，记录每一次执行<strong>写操作</strong>的<strong>SQL语句</strong></td>
<td align="center">节省空间</td>
<td align="center">可能造成数据不一致如<code>update table set create_date=now()</code>，由于执行时间不同产生的数据就不同</td>
</tr>
<tr>
<td align="center">ROW</td>
<td align="left"><strong>行级</strong>，记录每次<strong>操作后每行记录的变化</strong>。</td>
<td align="center">保持数据的绝对一致性。因为不管sql是什么，引用了什么函数，他只记录执行后的效果</td>
<td align="center">占用较大空间</td>
</tr>
<tr>
<td align="center">MIXED</td>
<td align="left">是对statement的升级，如当函数中包含 UUID() 时，包含 AUTO_INCREMENT 字段的表被更新时，执行 INSERT DELAYED 语句时，用 UDF 时，会按照 ROW的方式进行处理</td>
<td align="center">节省空间，同时兼顾了一定的一致性</td>
<td align="center">还有些极个别情况依旧会造成不一致，另外statement和mixed对于需要对binlog的监控的情况都不方便</td>
</tr>
</tbody></table>
<p><strong>综合上面对比，Canal 想做监控分析，选择 row 格式比较合适。</strong></p>
<h3 id="Canal原理"><a href="#Canal原理" class="headerlink" title="Canal原理"></a>Canal原理</h3><ul>
<li>Canal 将自己伪装为 MySQL slave(从库) ，向 MySQL master (主库)发送dump 协议</li>
<li>MySQL master(主库) 收到 dump 请求，开始推送 binary log 给 slave (即 canal )</li>
<li>Canal 接收并解析 Binlog 日志，得到变更的数据，执行后续逻辑</li>
</ul>
<img src="/pic/Canal原理.jpg" style="zoom: 67%;" />

<h3 id="Canal安装与配置"><a href="#Canal安装与配置" class="headerlink" title="Canal安装与配置"></a>Canal安装与配置</h3><p>Canal发行版地址：<a href="https://github.com/alibaba/canal/releases%EF%BC%8C%E8%A7%A3%E5%8E%8B%E5%8D%B3%E7%94%A8%E3%80%82">https://github.com/alibaba/canal/releases，解压即用。</a></p>
<p>修改<code>conf/canal.properties</code>配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认端口</span></span><br><span class="line"><span class="attr">canal.port</span> = <span class="string">11111</span></span><br><span class="line"><span class="comment"># tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ</span></span><br><span class="line"><span class="comment"># 服务模式，tcp 表示输入客户端，xxMQ输出到各类消息中间件</span></span><br><span class="line"><span class="attr">canal.serverMode</span> = <span class="string">tcp</span></span><br><span class="line"><span class="comment"># 配置需要监控数据的数据库,每个数据库都有独立的配置文件控制，放在conf目录的各自文件夹下，以数据库名字命名。</span></span><br><span class="line"><span class="attr">canal.destinations</span> = <span class="string">databaseA, databaseB</span></span><br></pre></td></tr></table></figure>

<p>对于每个数据库的配置文件，在<code>conf/&#123;databaseA&#125;</code>下创建<code>instance.properties</code>文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把Canal作为第几个从库</span></span><br><span class="line"><span class="attr">canal.instance.mysql.slaveId</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"># 数据库地址</span></span><br><span class="line"><span class="attr">canal.instance.master.address</span>=<span class="string">127.0.0.1:3306</span></span><br><span class="line"></span><br><span class="line"><span class="attr">canal.instance.dbUsername</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">canal.instance.dbPassword</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>

<p>双击<code>bin/startup.bat</code>启动服务</p>
<h3 id="Canal编程"><a href="#Canal编程" class="headerlink" title="Canal编程"></a>Canal编程</h3><p>Canal配置好后，MySQL的改动会自动同步给Canal，但Canal并不知道要把这些改动发送给谁，就需要代码进行接管。</p>
<img src="/pic/Canal API.png" style="zoom:67%;" />

<h4 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--非官方封装的起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.javatool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.21.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">canal</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">server</span>: <span class="string">127.0.0.1:11111 #canal 默认端口11111</span></span><br><span class="line">  <span class="attr">destination</span>: <span class="string">databaseA</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">canal-demo</span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://127.0.0.1:3306/canal-demo?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">admin</span></span><br></pre></td></tr></table></figure>

<p>编写数据库实体对象</p>
<p>编写监控处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@CanalTable(value = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHandler</span> <span class="keyword">implements</span> <span class="title class_">EntryHandler</span>&lt;User&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;添加：&quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User before, User after)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;改前：&quot;</span> + before);</span><br><span class="line">        System.err.println(<span class="string">&quot;改后：&quot;</span> + after);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;删除：&quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><p>在多线程环境下，ThreadLocal可以避免线程安全问题，但是在使用线程池等多线程环境时，ThreadLocal可能会出现一些问题。例如，当使用线程池时，线程池中的线程可能会被多个任务共享，如果使用ThreadLocal存储数据，可能会导致<strong>数据共享错误</strong>，不同线程的数据不一致。</p>
<p><code>TransmittableThreadLocal</code>是ThreadLocal的增强版，可以在线程池等多线程环境下使用，解决了ThreadLocal在多线程环境下的一些问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransmittableThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">TransmittableThreadLocal</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 在主线程中设置TransmittableThreadLocal的值</span></span><br><span class="line">        threadLocal.set(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 在线程池中执行任务</span></span><br><span class="line">        executorService.execute(TtlRunnable.get(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;TransmittableThreadLocal value in new thread: &quot;</span> + value);</span><br><span class="line">        &#125;));</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 等待任务执行完成</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        executorService.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在执行任务时，TtlRunnable会自动传递ThreadLocal的值，从而保证了数据的正确性</p>
<h3 id="使用TtlExecutors"><a href="#使用TtlExecutors" class="headerlink" title="使用TtlExecutors"></a>使用<code>TtlExecutors</code></h3><p>TtlExecutors是阿里巴巴开源的一个工具类，用于在使用线程池的情况下使用TransmittableThreadLocal。具体来说，TtlExecutors提供了一些工具方法，可以方便地将线程池和TransmittableThreadLocal结合起来使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlExecutorsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransmittableThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">TransmittableThreadLocal</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个固定大小的线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 在主线程中设置TransmittableThreadLocal的值</span></span><br><span class="line">        threadLocal.set(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 使用TtlExecutors包装线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">ttlExecutorService</span> <span class="operator">=</span> TtlExecutors.getTtlExecutorService(executorService);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 提交任务到线程池中</span></span><br><span class="line">        ttlExecutorService.submit(() -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> threadLocal.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;Task is running in thread: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;, TransmittableThreadLocal value: &quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        ttlExecutorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Fast-Json2"><a href="#Fast-Json2" class="headerlink" title="Fast Json2"></a>Fast Json2</h2><p>fastjson 是一个java语言编写的高性能且功能完善的JSON库，用于对JSON格式的数据进行解析和打包。它采用一种“假定有序快速匹配”的算法，把<strong>JSON Parse</strong> 的性能提升到了极致。</p>
<p>fastjson2 是FAST JSON项目的重要升级，目标是为下一个十年提供一个高性能的JSON库， fastjson2 性能相比原先旧的 fastjson 有了很大提升,并且 fastjson2 更安全，完全删除autoType白名单，提升了安全性。</p>
<h3 id="json与字符串"><a href="#json与字符串" class="headerlink" title="json与字符串"></a>json与字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JSON对象转字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> JSON.toJSONString(json);</span><br><span class="line"><span class="comment">//JSON字符串转JSON对象</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.parseObject(str);</span><br></pre></td></tr></table></figure>
<h3 id="json数组与字符串"><a href="#json数组与字符串" class="headerlink" title="json数组与字符串"></a>json数组与字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;张三\&quot;,\&quot;李四\&quot;,\&quot;王五\&quot;]&quot;</span>;</span><br><span class="line"><span class="comment">//json字符串转json数组</span></span><br><span class="line"><span class="type">JSONArray</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseArray(text);</span><br><span class="line"><span class="comment">//json数组转json字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> JSONArray.toJSONString(data);</span><br></pre></td></tr></table></figure>
<h3 id="json与对象"><a href="#json与对象" class="headerlink" title="json与对象"></a>json与对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Student对象转JSON字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">studentStr</span> <span class="operator">=</span> JSON.toJSONString(student);</span><br><span class="line"><span class="comment">//JSON字符串转Student对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(studentStr, Student.class);</span><br></pre></td></tr></table></figure>



<h2 id="XXL-job"><a href="#XXL-job" class="headerlink" title="XXL-job"></a>XXL-job</h2><p>XXL-job是一个分布式任务调度平台，所谓分布式任务调度平台，其实就是一个定时任务实现方案。</p>
<p>传统的定时任务实现方案，比如Timer，Quartz等都或多或少存在一些问题：</p>
<ul>
<li>不支持集群、不支持统计、没有管理平台、没有失败报警、没有监控等等而且在现在分布式的架构中，有一些场景需要分布式任务调度：</li>
<li>同一个服务多个实例的任务存在互斥时，需要统一的调度。</li>
<li>任务调度需要支持高可用、监控、故障告警。</li>
<li>需要统一管理和追踪各个服务节点任务调度的结果，需要记录保存任务属性信息等。</li>
</ul>
<p>目前比较主流的分布式任务调度平台是elasticjob和xxl-job。</p>
<ul>
<li><p>xxl-job环境依赖于mysql，elasticjob依赖于ZooKeeper</p>
</li>
<li><p>elasticjob是无中心化的，通过ZooKeeper的选举机制选举出主服务器，如果主服务器挂了，会重新选举新的主服务器。因此elasticjob具有良好的扩展性和可用性，但是使用和运维有一定的复杂</p>
</li>
<li><p>xxl-job则相反，是通过一个中心式的调度平台，调度多个执行器执行任务，调度中心通过DB锁保证集群分布式调度的一致性，这样扩展执行器会增大DB的压力，但是如果实际上这里数据库只是负责任务的调度执行。但是如果没有大量的执行器的话和任务的情况，是不会造成数据库压力的。实际上大部分公司任务数，执行器并不多。</p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>XXL-job使用源码安装，先拉取源码，源码结构如下</p>
<img src="/pic/XXL源码结构.png" style="zoom:67%;" />

<p>XXL依赖于MySQL，因此要先初始化数据库，执行上图中的<code>tables_xxl_job.sql</code>。</p>
<p>启动项目后访问<code>http://localhost:8080/xxl-job-admin/toLogin</code> 控制台，默认账号&#x2F;密码：admin&#x2F;123456</p>
<h2 id="Hippo4j线程池"><a href="#Hippo4j线程池" class="headerlink" title="Hippo4j线程池"></a>Hippo4j线程池</h2><p>传统线程池存在以下问题：</p>
<ul>
<li><p>创建线程池核心参数不好评估，随着业务流量的波动，极有可能出现生产故障。</p>
</li>
<li><p>不支持优雅关闭，当项目关闭时，大量正在运行的线程池任务被丢弃。</p>
</li>
<li><p>不支持运行时监控，使用过程中业务无响应，不知道是不是线程池引起。</p>
</li>
<li><p>三方框架 RocketMQ、Dubbo 等线程池无法动态修改参数，修改后只能重启应用。</p>
</li>
</ul>
<p>Hippo4j 框架提供以下功能支持：</p>
<ul>
<li>动态调参</li>
<li>告警策略</li>
<li>线程池监控</li>
<li>框架适配</li>
</ul>
<h2 id="Skywalking"><a href="#Skywalking" class="headerlink" title="Skywalking"></a>Skywalking</h2><h3 id="ARP系统"><a href="#ARP系统" class="headerlink" title="ARP系统"></a>ARP系统</h3><p>即应用性能管理系统，是对企业系统即时监控以实现对应用程序性能管理和故障管理的系统化的解决方案，ARP系统是可以帮助理解系统行为，用于分析性能问题的工具，以便发送故障的时候能够快速定位和解决问题。</p>
<p>ARP系统主要有三个方面的业务：</p>
<ul>
<li>日志 (ELK Stack)</li>
<li>指标 (Prometheus)</li>
<li>链路追踪 (Skywalking)</li>
</ul>
<p>市面上的各种实现方案都需要遵循OpenTracing标准。</p>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>Skywalking分为Agent和OAP</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马点评</title>
    <url>/2024/03/02/11-00-37/</url>
    <content><![CDATA[<h2 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h2><span id="more"></span>

<h3 id="基于Session"><a href="#基于Session" class="headerlink" title="基于Session"></a>基于Session</h3><img src="/pic/点评-短信登录业务.png" style="zoom: 67%;" />

<p>每次请求都要校验登录状态，所以这个业务逻辑要写在拦截器或过滤器里，通过threadLocal保存用户信息，供后续请求使用。</p>
<p>基于session会存在很多问题，比如集群的session共享问题。为了解决这个问题，tomcat早期提供了session拷贝的功能，但是这样造成空间浪费，并且数据拷贝存在延时，在这段时间里问题依然存在。</p>
<p>因此要找到一个替代方案，能满足</p>
<ul>
<li>数据共享</li>
<li>内存存储 (读写效率高)</li>
<li>key  value结构</li>
</ul>
<h3 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h3><p>用redis替代session</p>
<img src="/pic/基于redis登录1.png" alt="image-20240303140002696" style="zoom: 67%;" />

<p>首先要注意Session是<strong>独立</strong>的，不同浏览器发请求是不同的Session，天然就把不同用户隔离开了。因此Session中的key可以取通用字符串，比如code等。</p>
<p>但是redis的空间是<strong>共享</strong>的，不同用户的信息存储在一个地方，如果每个用户都取一样的key，会存在覆盖问题导致信息丢失。因此在<strong>存储验证码</strong>时，可以取手机号作为key。这样设计将来要验证手机号和验证码时，也无需传入额外的信息，把手机号作为key就可以直接取到验证码。</p>
<ul>
<li>存储时key的唯一性</li>
<li>取用时，携带key的方便性</li>
</ul>
<img src="/pic/基于redis登录2.png" alt="image-20240303140141609" style="zoom:67%;" />

<p>用Hash数据结构存储用户信息</p>
<img src="/pic/redis存储用户信息.png" alt="image-20240303135544679" style="zoom:67%;" />

<p>为什么用户信息的key不用手机号呢？</p>
<ul>
<li>因为后面大部分请求需要登录校验，如果用手机号作为key，每次都要传递手机号参数，增加信息泄露的风险。</li>
</ul>
<h3 id="业务相关问题"><a href="#业务相关问题" class="headerlink" title="业务相关问题"></a>业务相关问题</h3><p>现在的请求架构如下图：</p>
<img src="/pic/黑马点评1.png" alt="image-20240303152021924" style="zoom: 80%;" />

<p>拦截器拦截用户请求完成登录校验，并且刷新token有效期，实现只要用户一直有请求，登陆状态就不会过期。但是拦截器会放行一些不需要登录的请求，比如商户信息。如果用户一直在请求这些信息，是不会被拦截器拦截的，时间一到登陆状态还是会过期。</p>
<img src="/pic/黑马点评2.png" alt="image-20240303152432853" style="zoom: 80%;" />

<p>解决方法是再加一个全局拦截器，拦截一切路径，作用是刷新token有效期。这个拦截器不做拦截，不管能否查到用户，都会放行，确保非登陆业务的通过。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p> 缓存就是数据交换的缓冲区（称作Cache），是存贮数据的临时地方，一般读写性能较高。</p>
<p><strong>作用</strong></p>
<ul>
<li>降低后端负载</li>
<li>提高读写效率，降低响应时间</li>
</ul>
<p><strong>成本</strong></p>
<ul>
<li>数据一致性成本</li>
<li>代码维护成本</li>
<li>运维成本</li>
</ul>
<h3 id="缓存作用模型"><a href="#缓存作用模型" class="headerlink" title="缓存作用模型"></a>缓存作用模型</h3><p><img src="/pic/%E7%BC%93%E5%AD%98%E4%BD%9C%E7%94%A8%E6%A8%A1%E5%9E%8B.png" alt="image-20240304101359340"></p>
<h3 id="商品查询业务添加缓存"><a href="#商品查询业务添加缓存" class="headerlink" title="商品查询业务添加缓存"></a>商品查询业务添加缓存</h3><p><img src="/pic/%E5%95%86%E5%93%81%E7%BC%93%E5%AD%98.png"></p>
<h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><img src="/pic/redis更新策略.png" style="zoom: 50%;" />

<h4 id="主动更新"><a href="#主动更新" class="headerlink" title="主动更新"></a>主动更新</h4><p>有三种方式</p>
<ul>
<li><p>Cache Aside Pattern <strong>人工编码方式</strong>：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</p>
</li>
<li><p>Read&#x2F;Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</p>
</li>
<li><p>Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</p>
</li>
</ul>
<p>后面两种方案虽然简单，但是要找到或维护一个合适的服务很难。</p>
<p>此外还需要考虑三个问题：</p>
<ul>
<li>删除缓存还是更新缓存？<ul>
<li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li>
<li>⭐<strong>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</strong></li>
</ul>
</li>
<li>如何保证缓存与数据库的操作的同时成功或失败？<ul>
<li>单体系统，将缓存与数据库操作放在一个事务</li>
<li>分布式系统，利用TCC等分布式事务方案</li>
</ul>
</li>
<li>先操作缓存还是先操作数据库？<ul>
<li>先操作数据库，再删除缓存 (数据库操作比redis耗时，先删缓存再操作数据库，中间时间缺口更大)</li>
</ul>
</li>
</ul>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。如果有大量这样的请求，可能造成数据库崩溃。</p>
<h4 id="常见解决方案"><a href="#常见解决方案" class="headerlink" title="常见解决方案"></a>常见解决方案</h4><ul>
<li><strong>缓存空对象</strong><ul>
<li>优点是实现简单，维护方便</li>
<li>缺点是有额外的内存消耗，且会造成短期的不一致 (比如查询一个不存在的id，设置缓存后数据库中立刻插入了该id的数据，此时数据库和缓存内容不一致)</li>
</ul>
</li>
</ul>
<p><img src="/pic/%E7%BC%93%E5%AD%98%E7%A9%BA%E5%AF%B9%E8%B1%A1.png" alt="image-20240304145447117"></p>
<ul>
<li>布隆过滤<ul>
<li>实际上是一个很长的<strong>二进制向量</strong>和一系列<strong>随机映射函数</strong>。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。布隆过滤器可以告诉我们 <strong>“某样东西一定不存在或者可能存在”</strong></li>
<li>优点：内存占用较少，没有多余key</li>
<li>缺点：实现复杂，存在误判可能</li>
</ul>
</li>
</ul>
<p><img src="/pic/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="image-20240304145728065"></p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>
<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ul>
<li>给不同的Key的TTL添加随机值</li>
<li>利用Redis集群提高服务的可用性</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ul>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>也叫<strong>热点Key问题</strong>，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<h4 id="常见解决方案-1"><a href="#常见解决方案-1" class="headerlink" title="常见解决方案"></a>常见解决方案</h4><p>关键在于某个热点的key失效了，导致大并发集中打在数据库上。所以要从两个方面解决，第一可以考虑热点key不设置过期时间，第二可以考虑<strong>降低打在数据库上的请求数量</strong>。</p>
<ul>
<li>互斥锁<ul>
<li>把并行变成串行，保证一致性，但是影响性能。</li>
</ul>
</li>
<li>逻辑过期<ul>
<li>不设置缓存物理过期时间，存储时加入逻辑过期字段expire。查询时若已过期，加锁后开启新线程重建缓存，<strong>返回过期的数据</strong>。性能较好，但不保证一致性。</li>
</ul>
</li>
</ul>
<img src="/pic/逻辑过期.png" style="zoom:67%;" />

<h4 id="利用互斥锁解决"><a href="#利用互斥锁解决" class="headerlink" title="利用互斥锁解决"></a>利用互斥锁解决</h4><img src="/pic/互斥锁解决缓存击穿.png" style="zoom:67%;" />

<p>利用redis的<strong>setnx</strong>方法来实现互斥锁(只有一个线程能使用)，该方法的作用是<strong>仅当key不存在时，设置一对key-value值</strong>。想加锁时，就尝试设置key，如果不成功说明其他线程在用锁；释放锁就直接删除这个key，让其他线程能设置。</p>
<p>关于锁的粒度，就店铺查询而言，每个店铺应该有自己的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 设置过期时间，防止程序异常，锁无法释放</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 释放锁的操作就是把key删除，这样其他线程就可以设置该key</span></span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h2><h3 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h3><p>用户抢购后会生成订单，保存到订单表中，如果订单的id用数据库的自增ID，有几个缺点</p>
<ul>
<li>id规律明显，会暴露一些信息(卖了多少单)</li>
<li>受表单数据量的限制，当数据量过大以后要分库分表，分表后从逻辑上还是同一张表，id不能一样</li>
</ul>
<p>全局ID生成器是一种在分布式系统下用于生成<strong>全局唯一</strong>ID的工具，需要满足：</p>
<ul>
<li>唯一性</li>
<li>高可用</li>
<li>高性能</li>
<li>递增性，有利于数据库创建索引</li>
<li>安全性</li>
</ul>
<p>常用的策略有：</p>
<ul>
<li>UUID</li>
<li>redis自增</li>
<li>雪花算法</li>
</ul>
<p>这里使用redis自增的方法，redis生成自增id也需要传递key值</p>
<ul>
<li><p>不直接使用Redis自增的数值，而是拼接一些其它信息</p>
</li>
<li><p>ID的组成部分：符号位：1bit，永远为0</p>
<p>时间戳：31bit，以<strong>秒</strong>为单位，可以使用69年，自己计算</p>
<p>序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID，使用redis自增，key值为业务+日期。</p>
</li>
</ul>
<img src="/pic/全局唯一ID.png" style="zoom: 80%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.生成序列号</span></span><br><span class="line">        <span class="comment">// 2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="comment">// 这里给keyPrefix拼上日期是为了防止数据过多，32位的序列号不够用</span></span><br><span class="line">        <span class="comment">// 这样每天都是一个新的key，既可以限定自增的值，也方便根据日期统计订单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redis中会存储string类型的数据，key是之前指定的key，value是自增的ID。因此方便根据日期统计每天的订单。</p>
<h3 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h3><img src="/pic/秒杀下单.png" style="zoom: 80%;" />



<h3 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h3><p>超卖问题是典型的多线程安全问题</p>
<img src="/pic/超卖问题.png" style="zoom: 67%;" />

<p>针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案</p>
<h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>在操作数据前先获取锁，保证线程串行执行。</p>
<p>实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</p>
<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>只在<strong>更新数据时</strong>判断有没有其他线程对数据做了修改，如果没有修改则是安全的，去做更新数据操作；如果修改了则发送了安全问题，可以重试或异常。</p>
<p>关键在于<strong>判断数据是否被修改</strong>。</p>
<ul>
<li>版本号法</li>
</ul>
<img src="/pic/版本号法.png" style="zoom: 67%;" />

<ul>
<li><p>CAS (比较与交换)</p>
<ul>
<li>把值取出来修改，在写回去之前比较最新的值和取出来的值，如果一样，说明中间没有别的线程修改，可以安全修改；如果不一样说明被别的线程修改过了，需要重新取最新值比较和修改。</li>
</ul>
<img src="/pic/CAS.png" alt="image-20240304193814818" style="zoom: 80%;" />

<p>按照上面的逻辑修改代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>) <span class="comment">//set stock = stock -1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;stock&quot;</span>,voucher.getStock()).update(); <span class="comment">//where id = ？ and stock = ?</span></span><br></pre></td></tr></table></figure>

<p>但结果是<strong>即使有库存，也会下单失败</strong>。失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时很多线程都会失败。</p>
<p>但其实对于业务而言，我们只关心库存是否&lt;0，只要还有库存就可以下单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="string">&quot;stock&quot;</span>,<span class="number">0</span>); <span class="comment">//where id = ? and stock &gt; 0</span></span><br></pre></td></tr></table></figure>



<h3 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h3><p>同一个优惠券，一个用户只能下一单。</p>
<img src="/pic/一人一单.png" alt="image-20240305103647970" style="zoom:67%;" />

<p>先查询再修改，总会引发<strong>线程安全问题</strong>，需要加锁。这里的业务是新增订单，而不是修改，无法使用CAS，加悲观锁。</p>
<p>在使用锁过程中，控制<strong>锁粒度</strong> 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住。这里应该给用户加锁，不同的用户使用不同的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">	<span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">	<span class="keyword">synchronized</span>(userId.toString().intern())&#123;</span><br><span class="line">        <span class="comment">// 5.1.查询订单</span></span><br><span class="line">        <span class="comment">// 6.扣减库存</span></span><br><span class="line">        <span class="comment">// 7.创建订单</span></span><br><span class="line">        <span class="comment">// 等业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码控制了锁的粒度为<code>userId</code>，但是<code>toString</code>方法每次会new一个新对象返回，那锁就没用了，需要使用<code>intern</code>方法。</p>
<p>但是事务是由Spring提供的，上面的流程是先开启事务，然后创建锁，业务结束后释放锁，再提交事务。释放了锁意味着其他线程也能进来，如果此时事务还没提交，那么其他线程进来以后查询到的仍是<strong>旧数据</strong>，也会造成线程安全问题。所以锁的范围应该包含事务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">	<span class="keyword">synchronized</span>(userId.toString().intern())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createVoucherOrder(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">	<span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 5.1.查询订单</span></span><br><span class="line">    <span class="comment">// 6.扣减库存</span></span><br><span class="line">    <span class="comment">// 7.创建订单</span></span><br><span class="line">    <span class="comment">// 等业务逻辑</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务</p>
<p><img src="/pic/%E4%BB%A3%E7%90%86%E4%BA%8B%E5%8A%A1.png" alt="1653383810643"></p>
<h4 id="intern"><a href="#intern" class="headerlink" title="intern"></a>intern</h4><p>返回字符串的<strong>规范表示</strong>：在字符串常量池中找到值一样的字符串地址返回</p>
<h4 id="集群环境的并发问题"><a href="#集群环境的并发问题" class="headerlink" title="集群环境的并发问题"></a>集群环境的并发问题</h4><p>在<strong>不同集群下，由于JVM不同，内部的锁监视器也不同</strong>，如果同一个用户的不同请求被不同集群处理，都会认为还没加锁，导致锁失效。也就是说每个集群内用户的请求都会成功一次。</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>满足分布式系统或集群模式下多进程可见并且互斥的锁。分布式锁的核心思想就是<strong>让大家都使用同一把锁</strong>。此外需要满足一些条件：</p>
<ul>
<li>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</li>
<li>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</li>
<li>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</li>
<li>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</li>
<li>安全性：安全也是程序中必不可少的一环</li>
</ul>
<p>常见的分布式锁有三种：</p>
<img src="/pic/分布式锁.png" style="zoom: 67%;" />

<h3 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h3><p>实现分布式锁时需要实现的两个基本方法：</p>
<ul>
<li><p>获取锁</p>
<ul>
<li>互斥：确保只能有一个线程获取锁</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">SETNX</span> <span class="string">lock thread1</span></span><br><span class="line"><span class="comment"># 过期时间，避免服务器宕机引起死锁</span></span><br><span class="line"><span class="attr">EXPIRE</span> <span class="string">lock 10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 上面两个操作要保证原子性，否则如果还没设置过期时间就宕机也会死锁</span></span><br><span class="line"><span class="comment"># NX是互斥，EX是超时</span></span><br><span class="line"><span class="attr">SET</span> <span class="string">lock thread1 NX EX 10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>非阻塞：尝试一次，成功返回true，失败返回false</li>
</ul>
</li>
<li><p>释放锁：</p>
<ul>
<li>手动释放</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">DEL</span> <span class="string">lock</span></span><br></pre></td></tr></table></figure>

<ul>
<li>超时释放</li>
</ul>
</li>
</ul>
<p>实现一个redis分布式锁类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">//锁的名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//key前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">	<span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId() + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// SET lock:name id EX timeoutSec NX</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">// 这里最好不要直接返回result, 如果result为null，自动拆箱就是个空指针</span></span><br><span class="line">        <span class="comment">// Boolean.TRUE 是个常量，肯定不是空指针</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行lua脚本</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：<strong>Java的自动拆箱可能会导致空指针问题</strong></p>
<h4 id="误删锁的问题"><a href="#误删锁的问题" class="headerlink" title="误删锁的问题"></a>误删锁的问题</h4><p>如果持有锁的线程1的业务发生了阻塞，导致锁的超时时间到了，被自动释放了。这时线程2拿到了锁，线程1业务完成后<strong>直接释放了锁</strong>，此时锁就不存在了。线程3如果再申请锁也能正常申请，那就有两个线程同时开展业务，容易出问题。</p>
<img src="/pic/redis分布式锁问题.png" style="zoom:67%;" />

<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>释放锁之前要做判断，看是不是自己的锁。</p>
<p>（那线程1和线程2同时进行业务怎么解决？？？）</p>
<h5 id="改进redis分布式锁"><a href="#改进redis分布式锁" class="headerlink" title="改进redis分布式锁"></a>改进redis分布式锁</h5><p>线程标识可以用<strong>UUID</strong>，之前使用的是threadID，在jvm内部，threadID是递增的。如果是集群环境，会产生相同的threadID。</p>
<img src="/pic/改进redis锁.png" alt="image-20240305150449577" style="zoom: 80%;" />

<p>加锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">   <span class="comment">// 获取线程标示</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">   <span class="comment">// 获取锁</span></span><br><span class="line">   <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">   <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>释放锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁中的标示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">// 判断标示是否一致</span></span><br><span class="line">    <span class="keyword">if</span>(threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h4><p>在jvm垃圾回收时，会阻塞所有的代码执行。如果此时刚判断锁是自己的，然后被阻塞直到超时自动释放锁，此时新线程也能获得锁，原线程恢复后直接释放锁，又会导致之前的问题，这是<strong>原子性问题</strong>。</p>
<p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。</p>
<h5 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h5><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span></span><br><span class="line"><span class="comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;GET&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">  <span class="comment">-- 一致，则删除锁</span></span><br><span class="line">  <span class="keyword">return</span> redis.call(<span class="string">&#x27;DEL&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 不一致，则直接返回</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h5 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 调用lua脚本</span></span><br><span class="line">    stringRedisTemplate.execute(</span><br><span class="line">            UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h2><p>基于setnx实现的分布式锁存在以下问题：</p>
<ul>
<li>不<strong>可重入</strong>  <strong>同一个线程</strong>无法多次获取同一把锁</li>
<li>不可重试  获取锁只尝试一次，没有重试机制</li>
<li>超时释放  如果业务执行耗时超过锁释放时间，存在安全隐患</li>
<li>主从一致性  集群环境下，主从同步存在延时，如果从主机获得锁后，主机宕机；此时选出从机作为主机，从机在延时时间内没有锁信息，其他线程可能乘虚而入。</li>
</ul>
<p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>
<h3 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.150.101:6379&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用分布式锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissionClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisson</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//获取锁(可重入)，指定锁的名称</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>,<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span>(isLock)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行业务&quot;</span>);          </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="redission可重入锁原理"><a href="#redission可重入锁原理" class="headerlink" title="redission可重入锁原理"></a>redission可重入锁原理</h3><p>可重入锁是指同一个线程获取到锁之后，没释放锁，也能再次获取该锁，即<strong>反复加锁</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock()</span><br><span class="line">      lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redission分布式锁源码也是使用lua脚本实现，具体原理如下：</p>
<p>在分布式锁中，采用<strong>hash结构</strong>用来存储锁，其中大key表示表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有，value代表有多少线程拥有锁。</p>
<img src="/pic/redission分布式锁原理.png" alt="image-20240305184908041" style="zoom: 50%;" />

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取锁的key，即: KEY_PREFIX + name</span></span><br><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>];</span><br><span class="line"><span class="comment">-- 获取当前线程的标识, 即: ID_PREFIX + Thread.currentThread().getId()</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="comment">-- 锁的有效期</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 判断缓存中是否存在锁</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;EXISTS&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 不存在，获取锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;HSET&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置锁的有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回1表示锁获取成功</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 缓存中已存在锁，判断threadId是否说自己的</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 是自己的锁，获取锁然后重入次数+1</span></span><br><span class="line">    redis.call(<span class="string">&#x27;HINCRBY&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;EXPIRE&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回1表示锁获取成功</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 锁不是自己的，直接返回0，表示锁获取失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="重试机制和watchDog"><a href="#重试机制和watchDog" class="headerlink" title="重试机制和watchDog"></a>重试机制和watchDog</h3><p>设置最大等待时间，获取锁失败时，如果没有超时，就会等待 获取到锁的线程 发布 释放锁的信号，在最大等待时间内若订阅到了这个信号，就会重试，否则失败。</p>
<p><strong>在Redission中想要启动看门狗机制，那么我们就不用获取锁的时候自己定义<code>leaseTime(锁自动释放时间)</code>。</strong>如果自己定义了锁自动释放时间的话，无论是通过<code>lock</code>还是<code>tryLock</code>方法，都无法启用看门狗机制。</p>
<p>分布式锁需要设置过期时间，防止节点过期出现死锁。但在线程获取锁后，业务还没处理完，锁就超时释放了，这样会出问题。看门狗提供了自动续期机制，解决了这个问题。看门狗提供的默认超时时间是30s，并为当前锁添加延迟任务，10s后执行，任务内容就是重置超时时间，并且在任务结束后会递归调用这个任务。</p>
<p>也就是说看门狗每10s将锁的时间刷新为30s，如果<strong>程序出现异常</strong>，看门狗的延迟任务<strong>递归调用停止</strong>，30s后自动释放锁。</p>
<img src="/C:/Users/19742/AppData/Roaming/Typora/typora-user-images/image-20240306105248703.png" alt="image-20240306105248703" style="zoom:67%;" />

<ul>
<li>可重入：利用hash结构记录线程id和重入次数</li>
<li>可重试：利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</li>
<li>超时续约：利用watchDog，每隔一段时间（releaseTime &#x2F; 3），重置超时时间</li>
</ul>
<h3 id="multiLock"><a href="#multiLock" class="headerlink" title="multiLock"></a>multiLock</h3><p> 主从一致性问题通常是由于主从同步延迟导致的。redission提出来了MutiLock锁，在加锁时需要<strong>把加锁逻辑写到每个节点上</strong>。获取锁时，需要所有节点都成功。</p>
<p>节点可以使用主从扩展，如果某个节点宕机，由于其他节点也有锁信息，线程不可能在其他节点获取到锁，就不会加锁成功，保证了锁的可靠性。</p>
<img src="/pic/multiLock.png" style="zoom: 50%;" />

<h2 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h2><p>现在来看秒杀业务，经过压测，1000个请求，平均响应时间为500ms。业务流程很多，而且要经常访问数据库，还是串行执行，导致响应很慢。</p>
<p>首先能想到的优化是把信息放到<strong>redis存储</strong>，需要存储的信息有两个，一是商品库存，二是一人一单信息。</p>
<p>一人一单信息可以用set，存储购买了该优惠券的用户id，也可以快速判断用户id是否存在，即是否重复下单。</p>
<p>此外，可以使用<strong>异步</strong>。从业务上讲，只要库存足够，且满足一人一单，用户即可正常下单。其他的数据库操作是为了数据同步，对用户而言是不关心的。因此只要下单逻辑完成，直接返回订单号给用户，通知其他线程去执行数据库更新操作，用户拿到订单号就可以去付款，至于数据库更新完全可以慢慢做。</p>
<img src="/pic/redis秒杀优化.png" style="zoom: 67%;" />



<p>异步下单需要依托一个容器，能够存放订单信息。</p>
<h2 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h2><p>存放消息的队列。最简单的消息队列模型包括3个角色：</p>
<ul>
<li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li>
<li>生产者：发送消息到消息队列</li>
<li>消费者：从消息队列获取消息并处理消息</li>
</ul>
<img src="/pic/消息队列.png" style="zoom:67%;" />

<p>使用队列的好处在于 <strong>解耦</strong>。用户下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p>
<p>可以使用java中的阻塞队列，出队时，如果队列为空就会阻塞， 直到队列不空。但是阻塞队列使用jvm内存，当消息很多是<strong>对内存压力较大</strong>，而且如果程序异常结束，<strong>信息会丢失</strong>。</p>
<p>redis提供了三种不同的方式来实现消息队列：</p>
<ul>
<li>list结构   基于List结构模拟消息队列</li>
<li>PubSub  基本的点对点消息模型</li>
<li>Stream   比较完善的消息队列模型</li>
</ul>
<h3 id="基于list模型消息队列"><a href="#基于list模型消息队列" class="headerlink" title="基于list模型消息队列"></a>基于list模型消息队列</h3><p>利用LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现队列。不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的<strong>阻塞队列</strong>那样会阻塞并等待消息。因此这里应该使用<strong>BRPOP或者BLPOP</strong>来实现阻塞效果。</p>
<p>其实就是用redis中的list去模拟阻塞队列。但是无法避免消息丢失 (消息取出后没处理就挂了)，且<strong>只支持单消费者</strong>。</p>
<h3 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h3><p>消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p>
<ul>
<li><code>SUBSCRIBE channel [channel]</code> ：订阅一个或多个频道</li>
<li><code>PUBLISH channel msg</code> ：向一个频道发送消息</li>
<li><code>PSUBSCRIBE pattern[pattern]</code> ：订阅与pattern格式匹配的所有频道</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><strong>不支持数据持久化</strong>，发布者没有存储，发布即丢，即使没有订阅。</li>
<li>订阅者消息堆积有上限，超出时数据丢失</li>
</ul>
<h3 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h3><p>Stream是redis5引入的一种新的<strong>消息类型</strong>，可以实现一个功能非常完善的消息队列。每条消息都有id号，会被<strong>持久化存储</strong>，可以反复读取。</p>
<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><img src="/pic/stream发送.png" style="zoom:67%;" />

<p>例如：</p>
<img src="/pic/例子1.png" style="zoom:67%;" />

<h4 id="读取消息"><a href="#读取消息" class="headerlink" title="读取消息"></a>读取消息</h4><img src="/pic/stream读取.png" style="zoom:67%;" />

<p>例如：</p>
<img src="/pic/例子2.png" style="zoom:67%;" />

<p><strong>注意</strong>，使用$读取最新消息，是取队列中<strong>还未读取的最后一条消息</strong>，因此会出现<strong>漏读消息</strong>的问题。</p>
<h4 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h4><p>将多个消费者分到一个组中，监听同一个队列</p>
<ul>
<li>消息分流，队列中的消息会<strong>分流</strong>给组内的不同消费者，也就是说同组消费者是<strong>竞争</strong>关系，加快消息处理速度。</li>
<li>消息标识，消费者组维护一个标识，记录<strong>最后一个被处理的消息</strong>，即使宕机，也会从标识开始读取消息。<ul>
<li>消息确认，消费者获取消息后，消息处于<code>pending</code>状态，并存入<code>pending-list</code>。处理完成后通过<code>XACK</code>确认消息，标记为已处理，从<code>pending-list</code>移除。</li>
</ul>
</li>
</ul>
<p><strong>创建消费者组</strong></p>
<p><code>XGROUP CREATE key groupName ID [MKSTREAM]</code></p>
<ul>
<li>key：队列名称</li>
<li>groupName：消费者组名称</li>
<li>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息</li>
<li>MKSTREAM：队列不存在时自动创建队列</li>
</ul>
<p> <strong>删除指定的消费者组</strong></p>
<p><code>XGROUP DESTORY key groupName</code></p>
<p> <strong>给指定的消费者组添加消费者</strong></p>
<p><code>XGROUP CREATECONSUMER key groupname consumername</code></p>
<p> <strong>删除消费者组中的指定消费者</strong></p>
<p><code>XGROUP DELCONSUMER key groupname consumername</code></p>
<p>从消费者组读取消息：</p>
<p><code>XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</code></p>
<ul>
<li><p>group：消费组名称</p>
</li>
<li><p>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</p>
</li>
<li><p>count：本次查询的最大数量</p>
</li>
<li><p>BLOCK milliseconds：当没有消息时最长等待时间</p>
</li>
<li><p>NOACK：无需手动ACK，获取到消息后自动确认</p>
</li>
<li><p>STREAMS key：指定队列名称</p>
</li>
<li><p>ID：获取消息的起始ID：</p>
<ul>
<li>“&gt;”：从下一个未消费的消息开始</li>
<li>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</li>
</ul>
</li>
</ul>
<img src="/pic/redis消息队列对比.png" style="zoom: 80%;" />

<h3 id="使用stream实现秒杀"><a href="#使用stream实现秒杀" class="headerlink" title="使用stream实现秒杀"></a>使用stream实现秒杀</h3><ul>
<li>创建一个Stream类型的消息队列，名为stream.orders</li>
<li>修改之前的秒杀下单Lua脚本，添加生产者，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li>
<li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</li>
</ul>
<h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据key获取value</span></span><br><span class="line">get key</span><br><span class="line"><span class="comment">// 判断element是否是集合元素</span></span><br><span class="line">sismember array element</span><br><span class="line"><span class="comment">// 改变key对应的value，value -= 1</span></span><br><span class="line">incrby key -<span class="number">1</span></span><br><span class="line"><span class="comment">// 向集合array中添加元素element</span></span><br><span class="line">sadd array element</span><br></pre></td></tr></table></figure>



<h2 id="Lua语法"><a href="#Lua语法" class="headerlink" title="Lua语法"></a>Lua语法</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 弱类型语言，局部变量用local修饰，全局变量直接赋值</span></span><br><span class="line"><span class="comment">-- lua索引从1开始</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- lua中字符串拼接用..</span></span><br><span class="line"><span class="keyword">local</span> key = <span class="string">&quot;seckill:order:&quot;</span> .. voucherId</span><br><span class="line"><span class="comment">-- if语句格式</span></span><br><span class="line"><span class="keyword">if</span>() <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 字符串转数字</span></span><br><span class="line"><span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, key))</span><br></pre></td></tr></table></figure>



<h2 id="探店"><a href="#探店" class="headerlink" title="探店"></a>探店</h2><p>上传图片直接保存到本地，D:\Java\Dianping\nginx-1.18.0\html\hmdp\imgs 中</p>
<h3 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h3><p>点赞业务中，每个用户只能点赞一次，且数据经常变化，应该放到redis中。以帖子id作为key，记录已点赞用户的id集合，这里选择set集合。</p>
<h3 id="点赞排行榜"><a href="#点赞排行榜" class="headerlink" title="点赞排行榜"></a>点赞排行榜</h3><p>前端需要展示帖子前五名点赞的用户，点赞用户信息存储在redis的set中，现在要做排序功能，可以使用sorted set和list，list基于链表实现，可以按插入顺序排序，但list不唯一。</p>
<p>在set中查询元素是否存在可以直接用sismember，而zset中没有这个方法，在添加元素时需要指定元素的分数，因此可以使用zscore方法查询元素分数，如果不存在就返回nil。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>从redis中查到用户id列表后，还需要去数据库查询具体的用户信息列表给前端，用<code>where id in (....)</code>语句，但是in语句做查询时是无序的，需要使用<code>order by field(id, ...)</code>指定查询顺序。</p>
<h3 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h3><p>交集问题，可以用set做，因此需要在redis中存储用户的关注列表。</p>
<h3 id="关注推送"><a href="#关注推送" class="headerlink" title="关注推送"></a>关注推送</h3><p>关注推送也叫<strong>Feed流</strong>，直译为投喂，为用户持续提供 ”沉浸式“ 的体验，通过无限下拉刷新获取新的消息。</p>
<p>对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容</p>
<img src="/pic/传统信息获取.png" alt="1653808641260" style="zoom:67%;" />



<p>对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。</p>
<img src="/pic/feed流.png" alt="1653808993693" style="zoom:67%;" />

<h2 id="Feed流"><a href="#Feed流" class="headerlink" title="Feed流"></a>Feed流</h2><h3 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h3><p>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈</p>
<ul>
<li>优点：信息全面，不会有缺失。并且实现也相对简单</li>
<li>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li>
</ul>
<p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p>
<ul>
<li>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷</li>
<li>缺点：如果算法不精准，可能起到反作用</li>
</ul>
<p>我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可</p>
<p>，因此采用Timeline的模式。该模式的实现方案有三种：</p>
<ul>
<li>拉模式</li>
<li>推模式</li>
<li>推拉结合</li>
</ul>
<h4 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h4><p>也叫做读扩散</p>
<p>该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六<strong>要读</strong>取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的<strong>信息全部都进行拉取</strong>，然后在进行排序</p>
<p>优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。</p>
<p>缺点：比较延迟，<strong>当用户读取数据时才去关注的人里边去读取数据</strong>，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。</p>
<img src="/pic/拉模式.png" style="zoom:67%;" />

<h4 id="推模式"><a href="#推模式" class="headerlink" title="推模式"></a>推模式</h4><p>也叫做写扩散。</p>
<p>推模式是没有写邮箱的，当张三写了一个内容，此时会<strong>主动的把张三写的内容发送到他的粉丝收件箱中</strong>去，假设此时李四再来读取，就不用再去临时拉取了</p>
<p>优点：时效快，不用临时拉取</p>
<p>缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去</p>
<img src="/pic/推模式.png" style="zoom:67%;" />

<h4 id="推拉结合模式"><a href="#推拉结合模式" class="headerlink" title="推拉结合模式"></a>推拉结合模式</h4><p>也叫做读写混合，兼具推和拉两种模式的优点。</p>
<p>推拉模式是一个折中的方案，站在发件人这一端，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力</p>
<p>如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到<strong>活跃粉丝收件箱</strong>里边去</p>
<p>现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">拉模式</th>
<th align="center">推模式</th>
<th align="center">推拉结合</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>写比例</strong></td>
<td align="center">低</td>
<td align="center">高</td>
<td align="center">中</td>
</tr>
<tr>
<td align="center"><strong>读比例</strong></td>
<td align="center">高</td>
<td align="center">低</td>
<td align="center">中</td>
</tr>
<tr>
<td align="center"><strong>用户读取延迟</strong></td>
<td align="center">高</td>
<td align="center">低</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center"><strong>实现难度</strong></td>
<td align="center">复杂</td>
<td align="center">简单</td>
<td align="center">很复杂</td>
</tr>
<tr>
<td align="center"><strong>使用场景</strong></td>
<td align="center">很少使用</td>
<td align="center">用户量少、没有大V</td>
<td align="center">过千万的用户量，有大V</td>
</tr>
</tbody></table>
<p>这里我们使用推模式。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul>
<li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li>
<li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li>
<li>查询收件箱数据时，可以实现<strong>分页查询</strong></li>
</ul>
<p>Feed流中的数据会不断更新，所以数据的下标也在变化，因此不能采用传统的分页模式。</p>
<h3 id="滚动分页"><a href="#滚动分页" class="headerlink" title="滚动分页"></a>滚动分页</h3><p>不能按下标查，可以使用<strong>zset</strong>，<strong>按分数查</strong>，并且记录每次查询的最后一条的分数，下一次从这个位置开始读取数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按分数倒序范围查询 分数范围从max-min(1000-0) 返回结果带分数 从&lt;=1000的后offset(0)条开始查出count(3)条数据</span></span><br><span class="line">ZREVRANGEBYSCORE key 1000 0 WITHSCORES LIMIT 0 3</span><br></pre></td></tr></table></figure>

<p>因此每次分页查询需要四个参数</p>
<ul>
<li>max: 分数范围最大值，就是上一次查询的最后一条的分数。第一个查询就给当前时间戳</li>
<li>min: 分数范围最小值，固定为0即可</li>
<li>offset: 上一次查询结果中，与最小值一样的元素的个数</li>
<li>count: 每页的数据量，也是固定值</li>
</ul>
<h2 id="附近商户"><a href="#附近商户" class="headerlink" title="附近商户"></a>附近商户</h2><p>附近功能是基于地理位置进行检索。</p>
<h3 id="GEO数据结构"><a href="#GEO数据结构" class="headerlink" title="GEO数据结构"></a>GEO数据结构</h3><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许<strong>存储地理坐标信息</strong>（底层使用zset），帮助我们根据经纬度来检索数据。</p>
<ul>
<li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）<ul>
<li><code>GEOADD g1 100 100 nanjingnan 100 200 nanjingzhan</code></li>
</ul>
</li>
<li>GEODIST：计算指定的两个点之间的距离并返回<ul>
<li><code>GEODIST g1 nanjingnan nanjingzhan km</code></li>
</ul>
</li>
<li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li>
<li>GEOPOS：返回指定member的坐标</li>
<li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃</li>
<li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能<ul>
<li><code>GEOSEARCH g1 FROMLONLAT 100 100 BYRADIUS 10 km WITHDIST</code></li>
</ul>
</li>
<li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li>
</ul>
<h3 id="将商铺信息导入GEO"><a href="#将商铺信息导入GEO" class="headerlink" title="将商铺信息导入GEO"></a>将商铺信息导入GEO</h3><p>GEO中除了要存储经度和维度，还需要保存值，这个值保存商铺id即可。</p>
<p>系统中有个功能是按商品类型进行筛选，但redis中没有存储类型字段。</p>
<ul>
<li>类型是固定的，可以提前设置类型，同类商品分组，以typeId为key存入GEO中</li>
</ul>
<img src="/pic/GEO分组.png" style="zoom:67%;" />



<h2 id="用户签到"><a href="#用户签到" class="headerlink" title="用户签到"></a>用户签到</h2><h3 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h3><p>假如用mysql来做签到功能，用户一次签到，就是一条记录。假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条。</p>
<p>Bitmap 存储的是<strong>连续的二进制数字</strong>（0 和 1），通过 Bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 ，Bitmap 可以极大的节省储存空间。</p>
<p>Redis用String实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。可以按月来统计用户签到信息，签到记录为1，未签到则记录为0。把每一个bit位对应当月的每一天，形成映射关系，用0和1标示业务状态。</p>
<ul>
<li>SETBIT：向指定位置（offset）存入一个0或1</li>
<li>GETBIT ：获取指定位置（offset）的bit值</li>
<li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li>
<li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li>
<li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li>
<li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li>
<li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li>
</ul>
<p>把用户id和年月作为bitMap的key，然后保存到一个bitMap中</p>
<h3 id="签到统计"><a href="#签到统计" class="headerlink" title="签到统计"></a>签到统计</h3><p>如何计算连续签到天数？</p>
<ul>
<li>从最后一次签到开始向前统计，直到遇到第一次未签到为止。</li>
</ul>
<p>如何从后向前遍历每个bit位？</p>
<ul>
<li><strong>不断重复与1做与运算，每次都能得到最后一个bit位，随后右移一位，前一个bit位就又成了最后一位</strong><ul>
<li>1001 &amp; 1 &#x3D; 1</li>
<li>1001 &gt;&gt; 1 &#x3D; 100</li>
<li>100 &amp; 1 &#x3D; 0</li>
<li>100 &gt;&gt; 1 &#x3D; 10</li>
<li>…</li>
</ul>
</li>
</ul>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>缓存穿透问题，可以将数据库的数据，所对应的id写入到一个容器中，当用户过来访问的时候，我们直接去判断容器中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在容器中，则直接返回，如果容器中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。</p>
<p>这个容器就可以用bitmap。</p>
<h2 id="UV统计"><a href="#UV统计" class="headerlink" title="UV统计"></a>UV统计</h2><ul>
<li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。<strong>1天内同一个用户多次访问该网站，只记录1次</strong>。</li>
<li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li>
</ul>
<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。</p>
<p>Redis中的HLL是基于string结构实现的，单个HLL的内存<strong>永远小于16kb</strong>，<strong>内存占用很低</strong>。作为代价，其测量结果有小于0.81％的误差。不过对于UV统计来说，这完全可以忽略。</p>
<img src="/pic/UV统计.png" style="zoom:67%;" />



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line">stringRedisTemplate.opsForHyperLogLog().add(<span class="string">&quot;key1&quot;</span>, users);</span><br><span class="line"><span class="comment">// 统计</span></span><br><span class="line">stringRedisTemplate.opsForHyperLogLog().size(<span class="string">&quot;key1&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2024/03/06/11-00-37/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>redis是一个基于 C 语言开发的开源 NoSQL 数据库，Redis 的数据是保存在内存中的（内存数据库，支持持久化）</p>
<span id="more"></span>

<p>⭐⭐ Redis快在哪？</p>
<ul>
<li>基于内存</li>
<li>基于 <strong>Reactor 模式</strong><ul>
<li>通过一个或多个输入同时传递给服务处理器的服务请求的<strong>事件驱动处理模式</strong>，服务端程序处理传入<strong>多路请求</strong> (IO多路复用)，并将它们同步分派给请求对应的处理线程。</li>
</ul>
</li>
<li>优化数据结构</li>
</ul>
<img src="/pic/redis数据结构.jpg" alt="Redis 数据类型概览" style="zoom:67%;" />

<p>⭐ 为什么要用redis&#x2F;缓存？</p>
<ul>
<li>高性能<ul>
<li>操作缓存就是直接操作内存，所以速度相当快。</li>
</ul>
</li>
<li>高并发<ul>
<li>MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g），使用 Redis 缓存之后很容易达到 10w+</li>
</ul>
</li>
</ul>
<h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>单线程或单进程<strong>同时监测若干个文件描述符</strong>是否可以执行IO操作的能力。多路指的是<strong>多个socket连接</strong>，复用指的是复用一个线程。多路复用主要有三种技术：select，poll，epoll。</p>
<p>epoll是最新的也是目前最好的多路复用技术。采用多路 I&#x2F;O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。</p>
<h2 id="三种常见的缓存读写策略"><a href="#三种常见的缓存读写策略" class="headerlink" title="三种常见的缓存读写策略"></a>三种常见的缓存读写策略</h2><h3 id="Cache-Aside-Pattern（旁路缓存模式）"><a href="#Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="Cache Aside Pattern（旁路缓存模式）"></a>Cache Aside Pattern（旁路缓存模式）</h3><p>服务端需要<strong>同时维系 db 和 cache</strong>，并且是以 db 的结果为准。</p>
<p><strong>写</strong>：</p>
<ul>
<li>先更新 db</li>
<li>然后直接删除 cache 。</li>
</ul>
<p><strong>读</strong> :</p>
<ul>
<li>从 cache 中读取数据，读取到就直接返回</li>
<li>cache 中读取不到的话，就从 db 中读取数据返回</li>
<li>再把数据放到 cache 中。</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>首次请求数据一定不在 cache<ul>
<li>将热点数据可以提前放入 cache 中。</li>
</ul>
</li>
<li>写操作频繁，导致 cache 中的数据会被频繁被删除，这样会影响缓存命中率 。</li>
</ul>
<h3 id="Read-x2F-Write-Through-Pattern（读写穿透）"><a href="#Read-x2F-Write-Through-Pattern（读写穿透）" class="headerlink" title="Read&#x2F;Write Through Pattern（读写穿透）"></a>Read&#x2F;Write Through Pattern（读写穿透）</h3><p>服务端<strong>把 cache 视为主要数据存储</strong>，从中读取数据并将数据写入其中。<strong>cache 服务负责与db的同步</strong>，从而减轻了应用程序的职责。</p>
<p>但是开发中很少见， Redis 并没有提供 cache 将数据写入 db 的功能。</p>
<p><strong>写：</strong></p>
<ul>
<li>先查 cache，cache 中不存在，直接更新 db。</li>
<li>cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（<strong>同步更新 cache 和 db</strong>）。</li>
</ul>
<p><strong>读：</strong></p>
<ul>
<li>从 cache 中读取数据，读取到就直接返回 。</li>
<li>读取不到的话，由cache服务自己从 db 加载，写入到 cache 后返回响应。</li>
</ul>
<p>Read-Through Pattern 实际只是在 Cache-Aside Pattern 之上进行了封装。在 Cache-Aside Pattern 下，发生读请求的时候，如果 cache 中不存在对应的数据，是由客户端自己负责把数据写入 cache，而 Read Through Pattern 则是 <strong>cache 服务自己来写入缓存</strong>的，这对客户端是透明的。</p>
<h3 id="Write-Behind-Pattern（异步缓存写入）"><a href="#Write-Behind-Pattern（异步缓存写入）" class="headerlink" title="Write Behind Pattern（异步缓存写入）"></a>Write Behind Pattern（异步缓存写入）</h3><p> 和 Read&#x2F;Write Through Pattern 很相似，两者都是<strong>由 cache 服务来负责同步数据</strong>。</p>
<p>不同之处在于：Read&#x2F;Write Through 是同步更新 cache 和 db，而 Write Behind 则是<strong>只更新缓存</strong>，不直接更新 db，而是改为<strong>异步批量的方式来更新 db</strong>。</p>
<p>适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p>
<h2 id="RediSearch-VS-ES"><a href="#RediSearch-VS-ES" class="headerlink" title="RediSearch VS ES"></a>RediSearch VS ES</h2><p>Redis 是可以实现全文搜索引擎功能的，需要借助 <strong>RediSearch</strong> ，这是一个基于 Redis 的搜索引擎模块。</p>
<p>RediSearch 支持中文分词、聚合统计、停用词、同义词、拼写检查、标签查询、向量相似度查询、多关键词搜索、分页搜索等功能，算是一个功能比较完善的全文搜索引擎了。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>性能更优秀：依赖 Redis 自身的高性能，基于内存操作（Elasticsearch 基于磁盘）。</p>
</li>
<li><p>较低内存占用实现快速索引：RediSearch 内部使用<strong>压缩的倒排索引</strong>，所以可以用较低的内存占用来实现索引的快速构建。</p>
</li>
</ul>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li><p>数据量限制：Elasticsearch 可以支持 PB 级别的数据量，可以轻松扩展到多个节点，利用分片机制提高可用性和性能。RedisSearch 是基于 Redis 实现的，其能存储的数据量受限于 Redis 的内存容量，不太适合存储大规模的数据（内存昂贵，扩展能力较差）。</p>
</li>
<li><p>分布式能力较差：Elasticsearch 是为分布式环境设计的，可以轻松扩展到多个节点。虽然 RedisSearch 支持分布式部署，但在实际应用中可能会面临一些挑战，如数据分片、节点间通信、数据一致性等问题。</p>
</li>
<li><p>聚合功能较弱：Elasticsearch 提供了丰富的聚合功能，而 RediSearch 的聚合功能相对较弱，只支持简单的聚合操作。</p>
</li>
<li><p>生态较差：Elasticsearch 可以轻松和常见的一些系统&#x2F;软件集成比如 Hadoop、Spark、Kibana，而 RedisSearch 则不具备该优势</p>
</li>
</ul>
<p>Elasticsearch 适用于全文搜索、复杂查询、实时数据分析和聚合的场景，而 RediSearch 适用于快速数据存储、缓存和简单查询的场景。</p>
<h2 id="sorted-set底层实现"><a href="#sorted-set底层实现" class="headerlink" title="sorted set底层实现"></a>sorted set底层实现</h2><p>Redis 有个比较常用的数据结构叫<strong>有序集合(sorted set，简称 zset)<strong>，可以保证有序且元素唯一，经常用于排行榜等需要进行统计排列的场景，是</strong>基于跳表和压缩表实现</strong>的。</p>
<ul>
<li>当有序集合对象同时满足以下两个条件时，使用 ziplist：<ol>
<li>键值对数量少于 128 个；</li>
<li>每个元素的长度小于 64 字节。</li>
</ol>
</li>
<li>如果不满足上述两个条件，那么使用 skiplist</li>
</ul>
<h3 id="ziplist"><a href="#ziplist" class="headerlink" title="ziplist"></a>ziplist</h3><p>ziplist是一块<strong>连续的内存空间</strong>，元素之间紧挨着存储，没有任何冗余空隙。它的设计目标就是为了提高存储效率。ziplist可以用于存储字符串或整数，其中整数是按真正的<strong>二进制表示进行编码</strong>的，而不是编码成字符串序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ziplist</span>&lt;</span>T&gt; &#123;</span><br><span class="line">    int32 zlbytes;       <span class="comment">// 整个压缩列表占用字节数，包含本身</span></span><br><span class="line">    int32 zltail_offset; <span class="comment">// 最后一个元素距离压缩列表起始位置的偏移量，用于快速定位到最后一个节点，从而可以在ziplist尾部快速的执行push，pop操作</span></span><br><span class="line">    int16 zllength;      <span class="comment">// 元素个数,最大值为2^16-1，若元素数量超出最大值，该字段失效</span></span><br><span class="line">    T[] entries;         <span class="comment">// 元素内容列表，挨个挨个紧凑存储</span></span><br><span class="line">    int8 zlend;          <span class="comment">// ziplist最后一个字节，标志压缩列表的结束，值恒为 0xFF（255）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="skiplist"><a href="#skiplist" class="headerlink" title="skiplist"></a>skiplist</h3><p>跳表在原始<strong>链表</strong>基础上，<strong>建立多级索引</strong>将增删改查的时间复杂度变为O(log n)。</p>
<p>以下图跳表为例，其原始链表存储按序存储 1-10，有 2 级索引，每级索引的索引个数都是基于下层元素个数的一半。</p>
<img src="/pic/跳表1.png" alt="img" style="zoom: 80%;" />

<p>查询元素 6：</p>
<ul>
<li>从 2 级索引开始，先来到节点 4。</li>
<li>查看 4 的后继节点，是 8 的 2 级索引，这个值大于 6，说明 2 级索引后续的索引都是大于 6 的，没有再往后搜寻的必要，我们索引向下查找。</li>
<li>来到 4 的 1 级索引，比对其后继节点为 6，查找结束。</li>
</ul>
<p>索引需要尽可能保证每一个上<strong>级索引都是下级索引的一半</strong>。</p>
<p>另外在增删元素是还伴随索引的增加和删除。</p>
<h4 id="vs-平衡树"><a href="#vs-平衡树" class="headerlink" title="vs 平衡树"></a>vs 平衡树</h4><p>平衡树的插入、删除和查询的时间复杂度和跳表一样都是 **O(log n)**。但是平衡树的每一次插入或者删除操作都需要保证整颗树左右节点的绝对平衡，只要不平衡就要通过旋转操作来保持平衡，这个过程是比较耗时的。</p>
<p>跳表是一种可以用来代替平衡树的数据结构。跳表使用<strong>概率平衡</strong>而不是严格强制的平衡，因此，跳表中的插入和删除算法比平衡树的等效算法简单得多，速度也快得多。</p>
<h4 id="vs-红黑树"><a href="#vs-红黑树" class="headerlink" title="vs 红黑树"></a>vs 红黑树</h4><p>红黑树是一个<strong>黑平衡树</strong>，相较于平衡树，维持平衡的开销要小一些。跳表的实现更简单，效率也更高。</p>
<h4 id="vs-B-树"><a href="#vs-B-树" class="headerlink" title="vs B+树"></a>vs B+树</h4><p>B+树更适合作为数据库和文件系统中常用的索引结构之一，它的核心思想是通过尽可能少的 IO ，定位到尽可能多的索引来获得查询数据。</p>
<p>对于 Redis 这种内存数据库来说，它对这些并不感冒，因为 Redis 作为内存数据库它不可能存储大量的数据，所以对于索引不需要通过 B+树这种方式进行维护，只需按照概率进行随机维护即可，节约内存。</p>
<p>而且使用跳表实现 zset 时相较前者来说更简单一些，在进行插入时只需通过索引将数据插入到链表中合适的位置再随机维护一定高度的索引即可，也不需要像 B+树那样插入时发现失衡时还需要对节点分裂与合并。</p>
<h2 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><p>Redis Database。通过创建<strong>快照</strong>获得数据在 <strong>某个时间点</strong> 上的副本，快照持久化是 Redis <strong>默认</strong>采用的持久化方式，在 <code>redis.conf</code> 配置文件中默认有此下配置</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">save <span class="number">900</span> <span class="number">1</span>    #在<span class="number">900</span>秒(<span class="number">15</span>分钟)之后，如果至少有<span class="number">1</span>个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><span class="line">save <span class="number">300</span> <span class="number">10</span>   #在<span class="number">300</span>秒(<span class="number">5</span>分钟)之后，如果至少有<span class="number">10</span>个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span> #在<span class="number">60</span>秒(<span class="number">1</span>分钟)之后，如果至少有<span class="number">10000</span>个key发生变化，Redis就会自动触发bgsave命令创建快照。</span><br></pre></td></tr></table></figure>

<p>redis提供了两个命令生成快照</p>
<ul>
<li>save，同步操作，会阻塞主线程</li>
<li>bgsave，fork一个子线程，不阻塞主线程，<strong>默认</strong>。</li>
</ul>
<h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><p>Append-only file。与快照持久化相比，AOF 持久化的<strong>实时性</strong>更好。开启 AOF 持久化后，每执行一条更改数据的命令，Redis 就会将该命令写入到 AOF 缓冲区 <code>server.aof_buf</code> 中，然后再写入到 AOF 文件中（此时还在系统内核缓存区未同步到磁盘），最后再根据持久化方式（ <code>fsync</code>策略）的配置来决定何时将系统内核缓存区的数据同步到硬盘中。</p>
<img src="/pic/AOF流程.png" alt="AOF 工作基本流程"  />

<ul>
<li>write：写入系统内核缓冲区后直接返回，不会立刻同步到硬盘。</li>
<li>fsync：强制刷新系统内核缓冲区 (同步到磁盘)</li>
</ul>
<h4 id="fsync策略"><a href="#fsync策略" class="headerlink" title="fsync策略"></a>fsync策略</h4><ul>
<li><code>appendfsync always</code><ul>
<li>主线程调用 <code>write</code> 执行写操作后，后台线程（ <code>aof_fsync</code> 线程）<strong>立即</strong>会调用 <code>fsync</code> 函数同步 AOF 文件（刷盘），<code>fsync</code> 完成后线程返回，这样会严重降低 Redis 的性能（<code>write</code> + <code>fsync</code>）。</li>
</ul>
</li>
<li><code>appendfsync everysec</code><ul>
<li>主线程调用 <code>write</code> 执行写操作后立即返回，由后台线程（ <code>aof_fsync</code> 线程）<strong>每秒钟</strong>调用 <code>fsync</code> 函数（系统调用）同步一次 AOF 文件（<code>write</code>+<code>fsync</code>，<code>fsync</code>间隔为 1 秒）</li>
</ul>
</li>
<li><code>appendfsync no</code><ul>
<li>主线程调用 <code>write</code> 执行写操作后立即返回，让<strong>操作系统决定</strong>何时进行同步，Linux 下一般为 30 秒一次（<code>write</code>但不<code>fsync</code>，<code>fsync</code> 的时机由操作系统决定）。</li>
</ul>
</li>
</ul>
<h4 id="记录AOF日志文件"><a href="#记录AOF日志文件" class="headerlink" title="记录AOF日志文件"></a>记录AOF日志文件</h4><p>关系型数据库（如 MySQL）通常都是执行命令之前记录日志（方便故障恢复），而 Redis AOF 持久化机制是在<strong>执行完命令之后</strong>再记录日志</p>
<ul>
<li>避免额外的检查开销，AOF记录日志不会对命令进行语法检查</li>
<li>执行命令完之后再记录，不会阻塞当前命令的执行。</li>
</ul>
<p>风险</p>
<ul>
<li>刚执行完命令就宕机，导致对应的修改丢失</li>
<li>可能阻塞后续其他命令的执行 (AOF记录日志在主线程进行)</li>
</ul>
<h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>AOF文件过大时，redis会在后台自动重写产生新的AOF文件，数据一样但体积更小。重写期间的redis命令会写到AOF<strong>重写缓冲区</strong>，当重写完成后，重写缓冲区中的所有内容被追加到新AOF文件的末尾，并替代旧的AOF文件。</p>
<h4 id="AOF校验"><a href="#AOF校验" class="headerlink" title="AOF校验"></a>AOF校验</h4><p>Redis 在启动时对 AOF 文件进行检查，以判断文件是否完整，是否有损坏或者丢失的数据。通过<strong>校验和</strong> (对整个 AOF 文件内容进行 CRC64 算法计算得出的数字) 验证AOF文件。</p>
<p>如果发现文件有问题，Redis 就会拒绝启动并提供相应的错误信息。</p>
<h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。</p>
<h3 id="RDB-VS-AOF"><a href="#RDB-VS-AOF" class="headerlink" title="RDB VS AOF"></a>RDB VS AOF</h3><p><strong>RDB</strong></p>
<ul>
<li><p>RDB 文件存储的内容是经过压缩的二进制数据， 保存着某个时间点的数据集，文件很小，适合做数据的备份，灾难恢复。AOF 文件存储的是每一次写命令，类似于 MySQL 的 binlog 日志，通常会比 RDB 文件大很多。</p>
</li>
<li><p>使用 RDB 文件恢复数据，直接解析还原数据即可，不需要一条一条地执行命令，速度非常快。而 AOF 则需要依次执行每个写命令，速度非常慢。也就是说，与 AOF 相比，恢复大数据集的时候，RDB 速度更快。</p>
</li>
</ul>
<p><strong>AOF</strong></p>
<ul>
<li>RDB 的数据安全性不如 AOF，没有办法实时或者秒级持久化数据。生成 RDB 文件的过程是比较繁重的， 虽然 BGSAVE 子进程写入 RDB 文件的工作不会阻塞主线程，但会对机器的 CPU 资源和内存资源产生影响，严重的情况下甚至会直接把 Redis 服务干宕机。AOF 支持秒级数据丢失（取决 fsync 策略，如果是 everysec，最多丢失 1 秒的数据），仅仅是追加命令到 AOF 文件，操作轻量。</li>
<li>RDB 文件是以特定的二进制格式保存的，并且在 Redis 版本演进中有多个版本的 RDB，所以存在老版本的 Redis 服务不兼容新版本的 RDB 格式的问题。</li>
<li>AOF 以一种易于理解和解析的格式包含所有操作的日志。你可以轻松地导出 AOF 文件进行分析，你也可以直接操作 AOF 文件来解决一些问题。比如，如果执行<code>FLUSHALL</code>命令意外地刷新了所有内容后，只要 AOF 文件没有被重写，删除最新命令并重启即可恢复之前的状态。</li>
</ul>
<h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><p>对于<strong>读写命令</strong>来说，Redis 一直是<strong>单线程</strong>模型。不过，在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作， Redis 6.0 版本之后引入了多线程来处理网络请求。</p>
<h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p>Redis基于Reactor模型 (高性能 IO 的基石) 设计了一套高效的事件处理模型。Redis 采用<strong>事件驱动机制</strong>来处理大量的网络IO。开发了自己的<strong>网络事件处理器</strong>，称为<strong>文本事件处理器</strong>。通过IO多路复用程序同时监听多个套接字，将套接字关联到不同的事件处理器。</p>
<p>文件事件处理器（file event handler）主要是包含 4 个部分：</p>
<ul>
<li>多个 socket（客户端连接）</li>
<li>IO 多路复用程序（支持多个客户端连接的关键）</li>
<li>文件事件分派器（将 socket 关联到相应的事件处理器）</li>
<li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li>
</ul>
<p>大体上说，6.0之前主要使用单线程进行处理，为什么不使用多线程？</p>
<ul>
<li>单线程容易并且更容易维护</li>
<li>Redis 的性能瓶颈不在 CPU ，主要在内存和网络</li>
<li>多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>为了提高网络IO读写性能，Redis 6.0引入多线程，默认是禁用的，需要修改redis.conf配置文件：<code>io-threads-do-reads yes</code>来开启支持。开启多线程后，还需要设置线程数，否则是不生效的。同样修改redis.conf配置文件<code>io-threads 4</code></p>
<p><img src="/pic/redis%E5%A4%9A%E7%BA%BF%E7%A8%8B" alt="图片"></p>
<h3 id="后台线程"><a href="#后台线程" class="headerlink" title="后台线程"></a>后台线程</h3><p>实际还有一些后台线程用于执行一些比较耗时的操作</p>
<ul>
<li><p>通过 <code>bio_close_file</code> 后台线程来释放 AOF &#x2F; RDB 等过程中产生的临时文件资源。</p>
</li>
<li><p>通过 <code>bio_aof_fsync</code> 后台线程调用 <code>fsync</code> 函数将系统内核缓冲区 还未同步到到磁盘 的数据 强制刷到磁盘（ AOF 文件）。</p>
</li>
<li><p>通过 <code>bio_lazy_free</code>后台线程释放 大对象（已删除）占用的内存空间.</p>
</li>
</ul>
<h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h3><p>一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。</p>
<ul>
<li>节省内存<ul>
<li>因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。</li>
</ul>
</li>
<li>业务方便<ul>
<li>验证码有效期</li>
</ul>
</li>
</ul>
<h3 id="redis判断过期原理"><a href="#redis判断过期原理" class="headerlink" title="redis判断过期原理"></a>redis判断过期原理</h3><p>Redis 通过 <strong>过期字典</strong>（可以看作是 hash 表）来保存数据过期的时间，过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    dict *dict;     <span class="comment">//数据库键空间,保存着数据库中所有键值对</span></span><br><span class="line">    dict *expires   <span class="comment">// 过期字典,保存着键的过期时间</span></span><br><span class="line">    ...</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure>

<h3 id="过期删除策略"><a href="#过期删除策略" class="headerlink" title="过期删除策略"></a>过期删除策略</h3><p>redis怎么删除过期的数据呢</p>
<h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h4><p>只会在取出 key 的时候才对数据进行过期检查。这样<strong>对 CPU 最友好</strong>，但是可能会造成太多过期 key 没有被删除。</p>
<h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h4><p>每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。对<strong>内存友好</strong>。</p>
<p>Redis 采用的是 <strong>定期删除+惰性&#x2F;懒汉式删除</strong> 。</p>
<h3 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h3><p><strong>和操作系统内存淘汰类似</strong>，Redis 提供 6 种数据淘汰策略，按是否设置过期时间可以分为两种，volatile前缀是从已设置过期时间的数据中选；allkeys前缀是从全局数据中选</p>
<ol>
<li><p>volatile-lru（least recently used）：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选<strong>最近最少使用</strong>的数据淘汰。</p>
</li>
<li><p>volatile-ttl：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选<strong>将要过期</strong>的数据淘汰。</p>
</li>
<li><p>volatile-random：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中<strong>任意选择</strong>数据淘汰。</p>
</li>
<li><p>allkeys-lru（least recently used）：当内存不足以容纳新写入数据时，在键空间中，移除<strong>最近最少使用</strong>的 key（这个是最常用的）。</p>
</li>
<li><p>allkeys-random：从数据集（<code>server.db[i].dict</code>）中任<strong>意选择</strong>数据淘汰。</p>
</li>
<li><p>no-eviction：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧</p>
</li>
</ol>
<p>4.0 版本后增加以下两种：</p>
<ol>
<li>volatile-lfu（least frequently used）：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选<strong>最不经常使用</strong>的数据淘汰。</li>
<li>allkeys-lfu（least frequently used）：当内存不足以容纳新写入数据时，在整个键空间中，移除<strong>最不经常使用</strong>的 key。</li>
</ol>
<p>⭐⭐ 如何保证redis里的是热点数据？</p>
<ul>
<li>可以使用内存淘汰机制实现，使用allkeys-lru淘汰策略，频繁被访问的数据会被保留下来。</li>
</ul>
<h2 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h2><p>Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。注意<strong>不要和sql中的事务混淆</strong>，redis事务不满足原子性和持久性，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。</p>
<p>在实际开发中，通常使用<strong>Lua</strong>脚本代替事务的功能。但是使用Lua脚本也无法实现原子性，Lua脚本不会回滚。</p>
<h3 id="对比sql事务"><a href="#对比sql事务" class="headerlink" title="对比sql事务"></a>对比sql事务</h3><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>redis事务不满足原子性，如果有命令出错了，其他的命令仍能正常运行；并且不支持回滚。</p>
<p>redis事务不满足持久性，AOF持久化策略中，no和everysec都会存在数据丢失的情况，always性能太差，基本不用。</p>
<h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>mysql的事务基于<strong>undo&#x2F;redo日志</strong>实现。undo记录修改前状态，rollback基于undo日志实现；redo记录修改后的状态，commit基于redo日志实现。<strong>redo日志是innodb专有的</strong>，所以innodb会支持事务</p>
<p>redis实现事务，是基于<strong>commands队列</strong></p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="减少网络传输"><a href="#减少网络传输" class="headerlink" title="减少网络传输"></a>减少网络传输</h3><p>Redis 命令的执行可以简化为以下 4 步：</p>
<ul>
<li>发送命令</li>
<li>命令排队</li>
<li>命令执行</li>
<li>返回结果</li>
</ul>
<p>耗费时间之和称为 <strong>Round Trip Time (RTT,往返时间)</strong> ，也就是<strong>数据在网络上传输的时间</strong>。</p>
<h4 id="原生批量操作"><a href="#原生批量操作" class="headerlink" title="原生批量操作"></a>原生批量操作</h4><p>使用批量操作可以减少网络传输次数，进而有效减小网络开销，大幅减少 RTT。Redis 中有一些原生支持批量操作的命令</p>
<ul>
<li><p><code>MGET</code>(获取一个或多个指定 key 的值)、<code>MSET</code>(设置一个或多个指定 key 的值)</p>
</li>
<li><p><code>SADD</code>（向指定集合添加一个或多个元素）</p>
</li>
</ul>
<h4 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h4><p>对于不支持批量操作的命令，我们可以利用 <strong>pipeline（流水线)</strong> 将一批 Redis 命令封装成一组，这些 Redis 命令会被一次性提交到 Redis 服务器，只需要一次网络传输。</p>
<ul>
<li><p>原生批量操作命令是原子操作，pipeline 是非原子操作。</p>
</li>
<li><p>pipeline 可以打包不同的命令，原生批量操作命令不可以。</p>
</li>
<li><p>原生批量操作命令是 Redis 服务端支持实现的，而 pipeline 需要服务端和客户端的共同实现</p>
</li>
</ul>
<h4 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h4><h3 id="BigKey"><a href="#BigKey" class="headerlink" title="BigKey"></a>BigKey</h3><p>如果一个 key 对应的 <strong>value 所占用的内存比较大</strong>，那这个 key 就可以看作是 bigkey</p>
<p><img src="/pic/bigkey%E5%88%A4%E5%AE%9A%E6%A0%87%E5%87%86.png" alt="bigkey 判定标准"></p>
<h4 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h4><ul>
<li>程序设计不当，比如直接使用 String 类型存储较大的文件对应的二进制数据。</li>
<li>对于业务的数据规模考虑不周到，比如使用集合类型的时候没有考虑到数据量的快速增长。</li>
<li>未及时清理垃圾数据，比如哈希中冗余了大量的无用键值对。</li>
</ul>
<h4 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h4><ul>
<li><p>客户端超时阻塞：由于 Redis 执行命令是单线程处理，然后在操作大 key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。</p>
</li>
<li><p>网络阻塞：每次获取大 key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。</p>
</li>
<li><p>工作线程阻塞：如果使用 del 删除大 key 时，会阻塞工作线程，这样就没办法处理后续的命令</p>
</li>
</ul>
<h4 id="发现bigkey"><a href="#发现bigkey" class="headerlink" title="发现bigkey"></a>发现bigkey</h4><ul>
<li>使用 Redis 自带的 <code>--bigkeys</code> 参数来查找。</li>
<li>使用 Redis 自带的 SCAN 命令</li>
<li>借助公有云的 Redis 分析服务</li>
</ul>
<h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><ul>
<li><p><strong>分割 bigkey</strong>：将一个 bigkey 分割为多个小 key。例如，将一个含有上万字段数量的 Hash 按照一定策略（比如二次哈希）拆分为多个 Hash。</p>
</li>
<li><p><strong>手动清理</strong>：Redis 4.0+ 可以使用 <code>UNLINK</code> 命令来异步删除一个或多个指定的 key。Redis 4.0 以下可以考虑使用 <code>SCAN</code> 命令结合 <code>DEL</code> 命令来分批次删除。</p>
</li>
<li><p><strong>采用合适的数据结构</strong>：例如，文件二进制数据不使用 String 保存、使用 HyperLogLog 统计页面 UV、Bitmap 保存状态信息（0&#x2F;1）。</p>
</li>
<li><p><strong>开启 lazy-free（惰性删除&#x2F;延迟释放）</strong>：lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。</p>
</li>
</ul>
<h3 id="hotKey"><a href="#hotKey" class="headerlink" title="hotKey"></a>hotKey</h3><p>hotkey 出现的原因主要是某个热点数据访问量暴增，如重大的热搜事件、参与秒杀的商品。</p>
<h4 id="危害-1"><a href="#危害-1" class="headerlink" title="危害"></a>危害</h4><p>处理 hotkey 会占用大量的 CPU 和带宽，可能会影响 Redis 实例对其他请求的正常处理。会引发缓存击穿问题。</p>
<h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><ul>
<li><p>使用 Redis 自带的 <code>--hotkeys</code> 参数来查找。</p>
</li>
<li><p>使用<code>MONITOR</code> 命令</p>
<ul>
<li>实时查看redis所有操作，对性能影响很大，禁止长时间开启。</li>
</ul>
</li>
<li><p>根据业务情况提前预估。</p>
</li>
</ul>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ul>
<li>读写分离<ul>
<li>主节点处理写请求，从节点处理读请求</li>
</ul>
</li>
<li>使用redis cluster<ul>
<li>将热点数据分散存储在多个redis节点上</li>
</ul>
</li>
<li>二级缓存<ul>
<li>hotkey 采用二级缓存的方式进行处理，将 hotkey 存放一份到 JVM 本地内存中</li>
</ul>
</li>
</ul>
<h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><h4 id="定位慢查询命令"><a href="#定位慢查询命令" class="headerlink" title="定位慢查询命令"></a>定位慢查询命令</h4><p>在 <code>redis.conf</code> 文件中，我们可以使用 <code>slowlog-log-slower-than</code> 参数设置耗时命令的阈值，并使用 <code>slowlog-max-len</code> 参数设置耗时命令的最大记录条数。redis服务器会把执行时间超过阈值的命令记录在<strong>慢查询日志</strong>中。</p>
<p>使用<code>SLOWLOG GET</code>命令获取日志内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLOWLOG GET      <span class="comment">#慢日志查询</span></span><br><span class="line">   1) (<span class="built_in">integer</span>) 5                <span class="comment">#唯一渐进的日志标识符。</span></span><br><span class="line">   2) (<span class="built_in">integer</span>) 1684326682       <span class="comment">#处理记录命令的 Unix 时间戳</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12000            <span class="comment">#执行所需的时间量，以微秒为单位</span></span><br><span class="line">   4) 1) <span class="string">&quot;KEYS&quot;</span>                  <span class="comment">#组成命令参数的数组</span></span><br><span class="line">      2) <span class="string">&quot;*&quot;</span></span><br><span class="line">   5) <span class="string">&quot;172.17.0.1:61152&quot;</span>         <span class="comment">#客户端 IP 地址和端口</span></span><br><span class="line">   6) <span class="string">&quot;&quot;</span>                         <span class="comment">#客户端名称</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis内存碎片"><a href="#Redis内存碎片" class="headerlink" title="Redis内存碎片"></a>Redis内存碎片</h2><h3 id="产生原因-1"><a href="#产生原因-1" class="headerlink" title="产生原因"></a>产生原因</h3><ul>
<li>Redis 存储数据时向操作系统<strong>申请</strong>的内存空间可能会<strong>大于</strong>数据<strong>实际需要</strong>的存储空间。</li>
<li>频繁修改 Redis 中的数据也会产生内存碎片。</li>
</ul>
<h3 id="查看内存碎片"><a href="#查看内存碎片" class="headerlink" title="查看内存碎片"></a>查看内存碎片</h3><p>使用 <code>info memory</code> 命令即可查看 Redis 内存相关的信息</p>
<p>Redis 内存碎片率的计算公式：<code>mem_fragmentation_ratio</code> （内存碎片率）&#x3D; <code>used_memory_rss</code> (操作系统实际分配给 Redis 的物理内存空间大小)&#x2F; <code>used_memory</code>(Redis 内存分配器为了存储数据实际申请使用的内存空间大小)</p>
<p>通常<code>mem_fragmentation_ratio &gt; 1.5</code> 的话才需要清理内存碎片。</p>
<h3 id="清理碎片"><a href="#清理碎片" class="headerlink" title="清理碎片"></a>清理碎片</h3><p>通过 <code>config set</code> 命令将 <code>activedefrag</code> 配置项设置为 <code>yes</code> 即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> activedefrag <span class="built_in">yes</span></span><br></pre></td></tr></table></figure>

<p>具体什么时候清理需要通过下面两个参数控制：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存碎片占用空间达到 500mb 的时候开始清理</span></span><br><span class="line">config <span class="built_in">set</span> active-defrag-ignore-bytes 500mb</span><br><span class="line"><span class="comment"># 内存碎片率大于 1.5 的时候开始清理</span></span><br><span class="line">config <span class="built_in">set</span> active-defrag-threshold-lower 50</span><br></pre></td></tr></table></figure>

<p>通过 Redis 自动内存碎片清理机制可能会对 Redis 的性能产生影响，我们可以通过下面两个参数来减少对 Redis 性能的影响：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存碎片清理所占用 CPU 时间的比例不低于 20%</span></span><br><span class="line">config <span class="built_in">set</span> active-defrag-cycle-min 20</span><br><span class="line"><span class="comment"># 内存碎片清理所占用 CPU 时间的比例不高于 50%</span></span><br><span class="line">config <span class="built_in">set</span> active-defrag-cycle-max 50</span><br></pre></td></tr></table></figure>

<p>另外，重启节点可以做到内存碎片重新整理。</p>
<h2 id="常见阻塞原因"><a href="#常见阻塞原因" class="headerlink" title="常见阻塞原因"></a>常见阻塞原因</h2><ul>
<li>O(n)命令</li>
<li>RDB快照</li>
<li>AOF<ul>
<li>日志记录</li>
<li>刷盘</li>
<li>重写</li>
</ul>
</li>
<li>bigkey<ul>
<li>操作时</li>
<li>查找时</li>
<li>删除时</li>
</ul>
</li>
<li>CPU竞争</li>
<li>网络问题</li>
</ul>
]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发</title>
    <url>/2024/03/09/11-00-37/</url>
    <content><![CDATA[<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p><strong>进程是资源分配的基本单位，线程是cpu调度的基本单位</strong>。</p>
<p>同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多。</p>
<span id="more"></span>

<p><strong>一个 Java 程序的运行是 main 线程和多个其他线程同时运行</strong></p>
<p>⭐程序计数器为什么私有？</p>
<p>程序计数器的用于记录指令执行的位置和地址，私有是为了线程切换后能恢复到正确的执行位置，</p>
<p>⭐虚拟机栈和本地方法栈为什么私有？</p>
<p>为了<strong>保证线程中的局部变量不被别的线程访问到</strong></p>
<h3 id="用户线程和内核线程"><a href="#用户线程和内核线程" class="headerlink" title="用户线程和内核线程"></a>用户线程和内核线程</h3><p>用户线程是由<strong>用户空间程序</strong>管理和调度的线程，运行在用户空间（专门给应用程序使用）。</p>
<p>内核线程是由<strong>操作系统内核</strong>管理和调度的线程，运行在内核空间（只有内核程序可以访问）。</p>
<p><strong>现在的 Java 线程的本质其实就是操作系统的线程</strong>。</p>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>线程模型是用户线程和内核线程之间的关联方式，常见的有三种：</p>
<ul>
<li>一对一（一个用户线程对应一个内核线程）</li>
<li>多对一（多个用户线程映射到一个内核线程）</li>
<li>多对多（多个用户线程映射到多个内核线程）</li>
</ul>
<p>在 Windows 和 Linux 等主流操作系统中，Java 线程采用的是一对一的线程模型</p>
<h3 id="java线程生命周期"><a href="#java线程生命周期" class="headerlink" title="java线程生命周期"></a>java线程生命周期</h3><p>NEW: 初始状态，线程被创建出来但没有被调用 <code>start()</code> 。</p>
<p>RUNNABLE: 运行状态，线程被调用了 <code>start()</code>等待运行的状态。</p>
<p>BLOCKED：阻塞状态，需要等待锁释放。</p>
<p>WAITING：等待状态，表示该线程需要等待其他线程做出一些特定动作（通知或中断）。</p>
<p>TIME_WAITING：超时等待状态，可以在指定的时间后自行返回而不是像 WAITING 那样一直等待。</p>
<p>TERMINATED：终止状态，表示该线程已经运行完毕</p>
<img src="/pic/java线程状态转换图.png" alt="Java 线程状态变迁图" style="zoom: 80%;" />

<p>在java中，没有区分RUNNING和READY</p>
<h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>当出现如下情况的时候，线程会从占用 CPU 状态中退出。</p>
<ul>
<li><p>主动让出 CPU，比如调用了 <code>sleep()</code>, <code>wait()</code> 等。</p>
</li>
<li><p>时间片用完，因为操作系统要防止一个线程或者进程长时间占用 CPU 导致其他线程或者进程饿死。</p>
</li>
<li><p>调用了阻塞类型的系统中断，比如请求 IO，线程被阻塞。</p>
</li>
<li><p>被终止或结束运行</p>
</li>
</ul>
<p>这其中前三种都会发生线程切换，线程切换意味着需要保存当前线程的上下文，留待线程下次占用 CPU 的时候恢复现场。并加载下一个将要占用 CPU 的线程上下文。这就是所谓的 <strong>上下文切换</strong>。</p>
<h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p>多个线程<strong>同时被阻塞</strong>，它们中的一个或者全部都在<strong>等待某个资源</strong>被释放。由于线程被无限期地阻塞，因此程序不可能正常终止。（占有且等待）</p>
<h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><ul>
<li>互斥<ul>
<li>资源只能由一个线程占用</li>
</ul>
</li>
<li>请求与保持<ul>
<li>线程占有资源的同时申请资源</li>
</ul>
</li>
<li>不可剥夺<ul>
<li>线程已获得的资源在未使用完之前不能强行剥夺，只有自己使用完才释放</li>
</ul>
</li>
<li>循环等待<ul>
<li>若干线程间形成头尾相接的循环等待资源关系</li>
</ul>
</li>
</ul>
<h3 id="sleep-vs-wait"><a href="#sleep-vs-wait" class="headerlink" title="sleep vs wait"></a>sleep vs wait</h3><p>两者都可以暂停线程的执行。</p>
<ul>
<li><strong><code>sleep()</code> 方法没有释放锁，而 <code>wait()</code> 方法释放了锁</strong> 。</li>
<li><code>wait()</code> 通常被用于线程间交互&#x2F;通信，<code>sleep()</code>通常被用于暂停执行。</li>
<li><code>wait()</code> 方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code>或者 <code>notifyAll()</code> 方法。<code>sleep()</code>方法执行完成后，线程会自动苏醒，或者也可以使用 <code>wait(long timeout)</code> 超时后线程会自动苏醒。</li>
<li><code>sleep()</code> 是 <code>Thread</code> 类的静态本地方法，<code>wait()</code> 则是 <code>Object</code> 类的本地方法。<ul>
<li>wait是让获得对象锁的线程实现等待，会自动释放锁，既然要释放当前线程占有的对象锁，自然要操作对应的对象(Object)，而不是当前的线程(Thread)</li>
</ul>
</li>
</ul>
<p>⭐可以直接调用Thread 类的 run 方法吗？</p>
<p>调用 <code>start()</code>方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。<code>start()</code> 会执行线程的相应准备工作，然后自动执行 <code>run()</code> 方法的内容，这是真正的多线程工作。</p>
<p> 但是，直接执行 <code>run()</code> 方法，会把 <code>run()</code> 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p>
<h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>(Java 内存模型)主要定义了对于一个<strong>共享变量</strong>，当另一个线程对这个共享变量执行写操作后，这个线程对这个共享变量的可见性。</p>
<h3 id="指令重排序"><a href="#指令重排序" class="headerlink" title="指令重排序"></a>指令重排序</h3><p>系统在执行代码的时候并不一定按照代码的顺序依次执行，为了执行速度，计算机会对指令进行重排序。</p>
<ul>
<li>编译器优化重排</li>
<li>指令并行重排<ul>
<li>现代处理器使用了指令级并行技术，将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li>
</ul>
</li>
</ul>
<p>java源代码会经历 编译器优化重排 –&gt; 指令并行重排。</p>
<p><strong>指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>。</p>
<h3 id="JMM的作用"><a href="#JMM的作用" class="headerlink" title="JMM的作用"></a>JMM的作用</h3><p>不同操作系统内存模型不同，java是跨平台的，需要自己提供一套内存模型以屏蔽系统差异。并且定义了一组规范，可以简化多线程编程，增强程序可移植性。</p>
<h3 id="主内存和本地内存"><a href="#主内存和本地内存" class="headerlink" title="主内存和本地内存"></a>主内存和本地内存</h3><p>所有线程创建的实例对象都存放在<strong>主内存</strong>中，主内存是所有线程共享的内存。</p>
<p>每个线程都有一个私有的<strong>本地内存</strong>，本地内存存储了该线程用以读写的<strong>共享变量的副本</strong>，这是JMM抽象出来的概念，不真实存在。</p>
<p><img src="/pic/JMM.png" alt="JMM(Java 内存模型)"></p>
<p>如果线程1和线程2想通过变量通信，要经过两个步骤</p>
<ul>
<li>线程1把本地内存中修改过的共享变量副本的值同步到主内存中</li>
<li>线程2到主内存读取对应的共享变量的值</li>
</ul>
<p>在多线程环境下，对主内存中的一个共享变量操作会诱发线程安全问题。JMM定义了八种同步操作来规范主内存与本地内存的交互协议。（了解即可）</p>
<ul>
<li>锁定  把共享变量标记成线程独享变量。</li>
<li>解锁  </li>
<li>读取  把共享变量传输到本地内存</li>
<li>载入  把读取操作得到的变量放入共享变量副本中</li>
<li>使用  把本地内存中一个变量的值传给执行引擎</li>
<li>赋值  把从执行引擎接收到的值赋给本地内存的变量</li>
<li>存储  把本地内存中的变量的值传送到主内存</li>
<li>写入  把存储操作的值放到主内存变量中</li>
</ul>
<h3 id="JVM内存区域-VS-JMM"><a href="#JVM内存区域-VS-JMM" class="headerlink" title="JVM内存区域 VS JMM"></a>JVM内存区域 VS JMM</h3><ul>
<li><p>JVM 内存结构和 Java 虚拟机的运行时区域相关，定义了 JVM 在运行时如何<strong>分区存储程序数据</strong>，就比如说堆主要用于存放对象实例。</p>
</li>
<li><p>Java 内存模型和 Java 的<strong>并发编程</strong>相关，抽象了线程和主内存之间的关系。比如说线程之间的共享变量必须存储在主内存中，其主要目的是为了简化多线程编程，增强程序可移植性的。</p>
</li>
</ul>
<h3 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h3><p>逻辑时钟并不度量时间本身，仅区分<strong>事件发生的前后顺序</strong>，其本质就是定义了一种 happens-before 关系。</p>
<p>happens-before 原则的设计思想其实非常简单：</p>
<ul>
<li>为了对编译器和处理器的约束尽可能少，只要不改变程序的执行结果，编译器和处理器怎么进行重排序优化都行。</li>
<li>对于会改变程序执行结果的重排序，JMM 要求编译器和处理器必须禁止这种重排序。</li>
</ul>
<p> happens-before 原则的定义：</p>
<ul>
<li>如果一个操作 happens-before 另一个操作，那么<strong>第一个操作的执行结果将对第二个操作可见</strong>，并且第一个操作的执行顺序排在第二个操作之前。</li>
<li>两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须要按照 happens-before 关系指定的顺序来执行。如果重排序之后的执行结果，与按 happens-before 关系来执行的结果一致，那么 JMM 也允许这样的重排序。</li>
</ul>
<p>happens-before 原则表达的意义其实并不是一个操作发生在另外一个操作的前面，虽然这从程序员的角度上来说也并无大碍。更准确地来说，它更想表达的意义是前一个操作的结果对于后一个操作是可见的，无论这两个操作是否在同一个线程里。</p>
<h3 id="并发编程重要特性"><a href="#并发编程重要特性" class="headerlink" title="并发编程重要特性"></a>并发编程重要特性</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>在 Java 中，可以借助<code>synchronized</code>、各种 <code>Lock</code> 以及各种原子类实现原子性。各种原子类是利用 CAS (compare and swap) 操作（可能也会用到 <code>volatile</code>或者<code>final</code>关键字）来保证原子操作。</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。</p>
<p>在 Java 中，可以借助<code>synchronized</code>、<code>volatile</code> 以及各种 <code>Lock</code> 实现可见性。</p>
<p>如果将变量声明为 <code>volatile</code> ，这就指示 JVM，这个变量是<strong>共享且不稳定</strong>的，每次使用它都到主存中进行读取。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>由于指令重排序问题，代码的执行顺序未必就是编写代码时候的顺序</p>
<p>在 Java 中，<code>volatile</code> 关键字可以禁止指令进行重排序优化。</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>上面说到，volatile可以保证可见性和有序性。</p>
<h4 id="双重锁校验实现单例模式"><a href="#双重锁校验实现单例模式" class="headerlink" title="双重锁校验实现单例模式"></a>双重锁校验实现单例模式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变量用volatile修饰  这是必要的，原因在new那行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//第一次校验，当多次调用本函数时，不需要加锁也能返回那个单例</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">// 第二次校验</span></span><br><span class="line">                <span class="comment">// 防止二次创建实例，多个线程先后都执行完第一个if，如果没有这个if，后面的线程就不用做判断，会创建多个实例</span></span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 这条语句有三个阶段，1 为singleton 分配空间 2 初始化singleton 3 将创建的singleton实列指向分配的内存空间</span></span><br><span class="line">                    <span class="comment">// 上面的volatile是为了禁止重排序，防止132的顺序出现，把实例指向空的空间</span></span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是要注意，volatile不保证原子性。</p>
<h3 id="乐观锁的问题"><a href="#乐观锁的问题" class="headerlink" title="乐观锁的问题"></a>乐观锁的问题</h3><h4 id="ABA"><a href="#ABA" class="headerlink" title="ABA"></a>ABA</h4><p>乐观锁在修改变量前，先比较最新变量值和当初取出的值是否一致，<strong>一致说明此变量没修改过</strong>。这是有问题的！如果这个变量起初是A，被改为B后又被改为A，值没变，CAS算法就认为它没被修改过。这就是ABA问题。</p>
<p>解决思路是在变量前面追加上<strong>版本号或者时间戳</strong>。</p>
<h4 id="循环时间长开销大"><a href="#循环时间长开销大" class="headerlink" title="循环时间长开销大"></a>循环时间长开销大</h4><p>CAS 经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给 CPU 带来非常大的执行开销。</p>
<h4 id="只能保证一个共享变量的原子操作"><a href="#只能保证一个共享变量的原子操作" class="headerlink" title="只能保证一个共享变量的原子操作"></a>只能保证一个共享变量的原子操作</h4><p>CAS 只对单个共享变量有效，但从JDK1.5开始，提供了<code>AtomicReference</code>类保证引用对象之间的原子性，可以把多个变量放在一个对象里进行CAS操作，所以我们可以使用锁或者利用<code>AtomicReference</code>类把多个共享变量合并成一个共享变量来操作。</p>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p><code>synchronized</code> 是 Java 中的一个关键字，主要解决的是<strong>多个线程之间访问资源的同步性</strong>，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p>
<p>JDK1.6后，引入了大量优化，因此效率提升了很多，JDK源码也大量使用了<code>synchronized</code>。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p>
<p>当执行 <code>monitorenter</code> 指令时，线程试图获取锁也就是获取 <strong>对象监视器 <code>monitor</code></strong> 的持有权，如果锁的计数器为 0 则表示锁可以被获取，获取后将锁计数器设为 1 也就是加 1。</p>
<p>对象锁的的拥有者线程才可以执行 <code>monitorexit</code> 指令来释放锁。在执行 <code>monitorexit</code> 指令后，将锁计数器设为 0，表明锁被释放，其他线程可以尝试获取锁。</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>在 Java 6 之后， <code>synchronized</code> 引入了大量的优化如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销，这些优化让 <code>synchronized</code> 锁的效率提升了很多。</p>
<p>锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li><p>修饰实例方法 <code>synchronized void method()&#123;&#125;</code></p>
</li>
<li><p>修饰静态方法 <code>synchronized static void method()&#123;&#125;</code></p>
</li>
<li><p>修饰代码块 (锁指定对象&#x2F;类)  <code>synchronized(this) &#123;&#125;</code></p>
<ul>
<li><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置</li>
</ul>
</li>
<li><p>构造方法<strong>不能</strong>修饰，构造方法本身线程安全</p>
</li>
</ul>
<h4 id="vs-volatile"><a href="#vs-volatile" class="headerlink" title="vs volatile"></a>vs volatile</h4><p>他俩互补</p>
<ul>
<li><code>volatile</code> 关键字是线程同步的轻量级实现，所以 <code>volatile</code>性能肯定比<code>synchronized</code>关键字要好 。但是 <code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块 。</li>
<li><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</li>
<li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</li>
</ul>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><code>ReentrantLock</code> 实现了 <code>Lock</code> 接口，是一个<strong>可重入且独占式</strong>的锁，和 <code>synchronized</code> 关键字类似。不过，<code>ReentrantLock</code> 更灵活、更强大，增加了轮询、超时、中断、公平锁和非公平锁等高级功能。</p>
<p><code>ReentrantLock</code> 默认使用非公平锁，也可以通过构造器来显式的指定使用公平锁。</p>
<ul>
<li>公平锁：先申请的先得到，保证时间上的绝对顺序，上下文切换更频繁，性能较差</li>
<li>非公平锁：后申请的可能先得到锁，性能好，但可能导致某些线程很难得到锁</li>
</ul>
<h3 id="vs-synchronized"><a href="#vs-synchronized" class="headerlink" title="vs synchronized"></a>vs synchronized</h3><ul>
<li>都是可重入锁</li>
<li>synchronized依赖JVM，ReentrantLock依赖于API</li>
<li>ReentrantLock增加了高级功能<ul>
<li>等待可中断<ul>
<li>正在等待的线程可以选择放弃等待，改为处理其他事情</li>
</ul>
</li>
<li>可实现公平锁</li>
<li>可实现选择性通知</li>
</ul>
</li>
</ul>
<h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><code>ThreadLocal</code>类主要解决的就是让每个线程绑定自己的值，即<strong>每个线程的私有数据</strong>。</p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>先来看<code>Thread</code>类的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">inheritableThreadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ThreadLocalMap</code> 可以理解为<code>ThreadLocal</code> 类实现的定制化的 <code>HashMap</code></p>
<p><code>ThreadLocal</code>类的<code>set()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前请求的线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">//取出 Thread 类内部的 threadLocals 变量(哈希表结构)</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 将需要存储的值放入到这个哈希表中</span></span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，最终的变量是放在了当前线程的<code>ThreadLocalMap</code>，并不是存放在<code>ThreadLocal</code>上，它只是<code>ThreadLocalMap</code>的封装，传递了变量值。</p>
<p><strong>概括</strong></p>
<p><code>ThreadLocal</code>中封装了<code>ThreadLocalMap</code>，变量是存储在<code>ThreadLocalMap</code>中。</p>
<h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用，而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。</p>
<p>这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 Entry。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露。</p>
<p><code>ThreadLocalMap</code> 实现中已经考虑了这种情况，在调用 <code>set()</code>、<code>get()</code>、<code>remove()</code> 方法的时候，会清理掉 key 为 null 的记录。使用完 <code>ThreadLocal</code>方法后最好手动调用<code>remove()</code>方法</p>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。</p>
<p><strong>线程池</strong>提供了一种限制和管理资源（包括执行一个任务）的方式。 每个<strong>线程池</strong>还维护一些基本统计信息，例如已完成任务的数量。</p>
<ul>
<li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>
<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
</ul>
<h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p><strong>通过<code>ThreadPoolExecutor</code>构造函数来创建（推荐）</strong></p>
<p><img src="/pic/ThreadPoolExecutor.png" alt="通过构造方法实现"></p>
<p><strong>通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来创建。</strong>可以创建多种类型的<code>ThreadPoolExecutor</code></p>
<ul>
<li><code>FixedThreadPool</code>：该方法返回一个固定线程数量的线程池。</li>
<li><code>SingleThreadExecutor</code>： 该方法返回一个只有一个线程的线程池</li>
<li>当线程池中的线程少于所需线程时，没分到线程的任务只能在<strong>任务队列</strong>中等待。堆积的大量请求可能导致OOM。</li>
</ul>
<p>在阿里开发手册中提到，不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加<strong>明确线程池的运行规则</strong>，规避资源耗尽的风险</p>
<h4 id="ThreadPoolExecutor构造函数"><a href="#ThreadPoolExecutor构造函数" class="headerlink" title="ThreadPoolExecutor构造函数"></a><code>ThreadPoolExecutor</code>构造函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//线程池的核心线程数量</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,//线程池的最大线程数</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span><br><span class="line"><span class="params">                          TimeUnit unit,//时间单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span><br><span class="line"><span class="params">                         )</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>见<a href="https://fangjun120.github.io/2023/11/01/19-00-37/">java多线程</a>。注意只有当队列满了才创建临时线程。</p>
<p><img src="/pic/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%81%E7%A8%8B.png" alt="图解线程池实现原理"></p>
<h3 id="如何选择合适的线程池大小"><a href="#如何选择合适的线程池大小" class="headerlink" title="如何选择合适的线程池大小"></a>如何选择合适的线程池大小</h3><p><strong>CPU 密集型任务(N+1)：</strong> 这种任务消耗的主要是 CPU 资源，可以将线程数设置为 N（CPU 核心数）+1。比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。</p>
<p><strong>I&#x2F;O 密集型任务(2N)：</strong> 这种任务应用起来，系统会用大部分的时间来处理 I&#x2F;O 交互，而线程在处理 I&#x2F;O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在 I&#x2F;O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。</p>
<h3 id="任务策略"><a href="#任务策略" class="headerlink" title="任务策略"></a>任务策略</h3><ul>
<li>直接执行策略。线程池无法接受新任务时，由提交任务的线程直接执行提交的任务</li>
<li>抛弃策略。</li>
<li>默认策略。抛弃并抛异常</li>
<li>抛弃最老策略。</li>
<li>自定义</li>
</ul>
<h3 id="线程池参数动态配置"><a href="#线程池参数动态配置" class="headerlink" title="线程池参数动态配置"></a>线程池参数动态配置</h3><p>美团技术团队的思路是主要对线程池的<strong>核心参数</strong>实现自定义可配置。这三个核心参数是：</p>
<ul>
<li><strong><code>corePoolSize</code> :</strong> 核心线程数线程数定义了最小可以同时运行的线程数量。</li>
<li><strong><code>maximumPoolSize</code> :</strong> 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li>
<li><strong><code>workQueue</code>:</strong> 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li>
</ul>
<p><code>ThreadPoolExecutor</code> 提供了一些set方法</p>
<p><img src="/pic/%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.png" alt="img"></p>
<h3 id="设计根据优先级执行的线程池"><a href="#设计根据优先级执行的线程池" class="headerlink" title="设计根据优先级执行的线程池"></a>设计根据优先级执行的线程池</h3><p>使用 <code>PriorityBlockingQueue</code> （优先级阻塞队列）作为任务队列</p>
]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>MTR课表</title>
    <url>/2024/03/16/11-00-37/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/huahuahuaz/article/details/125554369?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522171057631616800185863173%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=171057631616800185863173&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125554369-null-null.142%5Ev99%5Epc_search_result_base8&utm_term=%E7%89%9B%E5%AE%A2%E8%AE%BA%E5%9D%9B&spm=1018.2226.3001.4187">项目总结</a></p>
<span id="more"></span>

<h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统。把数据存储在硬盘里，这一点好像与kafka的高性能相违背。</p>
<p>其实磁盘读写的快慢取决于你怎么使用它，也就是顺序读写或者随机读写。在顺序读写的情况下，磁盘的顺序读写速度和内存持平。因为硬盘是机械结构，每次读写都会寻址-&gt;写入，其中寻址是一个“机械动作”，它是最耗时的。所以硬盘最讨厌随机I&#x2F;O，最喜欢顺序I&#x2F;O。为了提高读写硬盘的速度，Kafka就是使用顺序I&#x2F;O。并且读取数据实现了零拷贝。</p>
<ul>
<li>订阅发布模式，一条消息可以被多个消费者消费。</li>
<li>消息持久化</li>
<li>分区机制，broker端支持消息分区</li>
<li>多副本，分为主从副本，</li>
</ul>
<h3 id="spring整合"><a href="#spring整合" class="headerlink" title="spring整合"></a>spring整合</h3><p>创建主题 (broker的名字) ，创建副本，创建分区</p>
<ul>
<li>添加依赖</li>
<li>添加配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=<span class="string">localhost:9092</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.group-id</span>=<span class="string">community-consumer-group</span></span><br><span class="line"><span class="comment"># 是否自动提交消费者的偏移量</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.enable-auto-commit</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 自动提交频率</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.auto-commit-interval</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaProducer kafkaProducer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testKafka</span><span class="params">()</span> &#123;</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        kafkaProducer.sendMessage(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;在吗&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KafkaProducer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String topic, String content)</span>&#123;</span><br><span class="line">        kafkaTemplate.send(topic, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KafkaConsumer</span> &#123;</span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;test&quot;&#125;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">     	System.out.println(record.value());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="系统通知"><a href="#系统通知" class="headerlink" title="系统通知"></a>系统通知</h3><img src="/pic/系统通知.png" alt="image-20240316154933236"  />



<p>针对评论、点赞和关注三类通知，定义三个主题。开发<strong>事件类</strong>，对所需数据进行封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// &#123;事件触发的人&#125; 对 &#123;作者&#125; 产生了 &#123;实体类型&#125;, &#123;事件id&#125;为...</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">    <span class="comment">// 主题，也是事件类型</span></span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="comment">// 事件触发的人</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="comment">// 实体类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityType;</span><br><span class="line">    <span class="comment">// 实体id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityId;</span><br><span class="line">    <span class="comment">// 作者id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityUserId;</span><br><span class="line">    <span class="comment">// 扩展性 </span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生产者类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="comment">// 将事件发布到指定的主题</span></span><br><span class="line">        kafkaTemplate.send(event.getTopic(), JSONObject.toJSONString(event));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>消费者类，这里在收到事件后，直接写入数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;comment&quot;, &quot;like&quot;, &quot;follow&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(ConsumerRecord record)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (record == <span class="literal">null</span> || record.value() == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;消息的内容为空!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;消息格式错误!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送站内通知</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        message.setFromId(SYSTEM_USER_ID);</span><br><span class="line">        message.setToId(event.getEntityUserId());</span><br><span class="line">        message.setConversationId(event.getTopic());</span><br><span class="line">        message.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; content = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        content.put(<span class="string">&quot;userId&quot;</span>, event.getUserId());</span><br><span class="line">        content.put(<span class="string">&quot;entityType&quot;</span>, event.getEntityType());</span><br><span class="line">        content.put(<span class="string">&quot;entityId&quot;</span>, event.getEntityId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!event.getData().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : event.getData().entrySet()) &#123;</span><br><span class="line">                content.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        message.setContent(JSONObject.toJSONString(content));</span><br><span class="line">        messageService.addMessage(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p><a href="https://fangjun120.github.io/2024/01/22/21-57-37/">介绍和原理</a></p>
<h3 id="spring整合-1"><a href="#spring整合-1" class="headerlink" title="spring整合"></a>spring整合</h3><ul>
<li>导入依赖</li>
<li>添加配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="attr">spring.data.elasticsearch.cluster-name</span>=<span class="string">nowcoder</span></span><br><span class="line"><span class="comment"># 节点</span></span><br><span class="line"><span class="attr">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure>

<p>redis 和 es 底层都基于netty。二者有冲突，在启动redis时会设置netty处理器，es又设置就会抛异常。netty底层留了一个开关，当<code>es.set.netty.runtime.available.processors</code>配置项为false时，跳过检查。</p>
<p>在Application类中配置，因为这个类最先加载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommunityApplication</span> &#123;</span><br><span class="line">    <span class="comment">// 这个注解的作用是在Servlet初始化之前加载一些缓存数据</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 解决netty启动冲突问题</span></span><br><span class="line">        <span class="comment">// see Netty4Utils.setAvailableProcessors()</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;es.set.netty.runtime.available.processors&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(CommunityApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring除了提供ES客户类<code>ElasticsearchTemplate </code>，还提供了一个封装类<code>ElasticsearchRepository</code>，定义好了对ES服务器访问的增删改查方法。</p>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p>像操作普通数据库一样实现Elasticsearch的CRUD</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES对象映射</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;discussport&quot;, type = &quot;_doc&quot;, shards = 6, replicas = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscussPost</span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个分词器，保存时尽可能多地拆分，查询时尽可能贴切地查</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;, searchAnalyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;, searchAnalyzer = &quot;ik_smart&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Date)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> commentCount;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建接口<code>DiscussPostRepository</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiscussPostRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;DiscussPost, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把数据库中的数据<strong>插入</strong>到ES中，不存在的索引会自动创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> &#123;</span><br><span class="line">    discussRepository.save(discussMapper.selectDiscussPostById(<span class="number">241</span>));</span><br><span class="line">    discussRepository.save(discussMapper.selectDiscussPostById(<span class="number">242</span>));</span><br><span class="line">    discussRepository.save(discussMapper.selectDiscussPostById(<span class="number">243</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DiscussPost</span> <span class="variable">post</span> <span class="operator">=</span> discussMapper.selectDiscussPostById(<span class="number">231</span>);</span><br><span class="line">    post.setContent(<span class="string">&quot;我是新人,使劲灌水.&quot;</span>);</span><br><span class="line">    discussRepository.save(post);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>删除数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// discussRepository.deleteById(231);</span></span><br><span class="line">    discussRepository.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>搜索数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造查询条件：SearchQuery</span></span><br><span class="line"><span class="comment">//搜索条件构造：QueryBuilders</span></span><br><span class="line"><span class="comment">//排序条件构造：SortBuilders</span></span><br><span class="line"><span class="comment">//分页查询条件：PageRequest</span></span><br><span class="line"><span class="comment">//高亮条件：HighlightBuilder</span></span><br><span class="line"><span class="comment">//es会返回两份数据，一份原始数据，一份高亮显示数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSearchByRepository</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">        <span class="comment">// 搜索条件，关键词，从title和content中搜</span></span><br><span class="line">        .withQuery(QueryBuilders.multiMatchQuery(<span class="string">&quot;互联网寒冬&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">        .withSort(SortBuilders.fieldSort(<span class="string">&quot;type&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">        .withSort(SortBuilders.fieldSort(<span class="string">&quot;score&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">        .withSort(SortBuilders.fieldSort(<span class="string">&quot;createTime&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">        .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">        <span class="comment">// 高亮显示的原理是给匹配的搜索词加标签</span></span><br><span class="line">        .withHighlightFields(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;title&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">        ).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 底层通过queryForPage获取得到了高亮显示的值, 但是没有返回.</span></span><br><span class="line">    <span class="comment">// elasticTemplate.queryForPage(searchQuery, class, SearchResultMapper)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// repository只能拿到没有高亮的结果</span></span><br><span class="line">    Page&lt;DiscussPost&gt; page = discussRepository.search(searchQuery);</span><br><span class="line">    <span class="comment">// 输出数据</span></span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.getNumber());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    <span class="keyword">for</span> (DiscussPost post : page) &#123;</span><br><span class="line">        System.out.println(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用template可以拿到高亮结果</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSearchByTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">            .withQuery(QueryBuilders.multiMatchQuery(<span class="string">&quot;互联网寒冬&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;type&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;score&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;createTime&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withPageable(PageRequest.of(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line">            .withHighlightFields(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;title&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">            ).build();</span><br><span class="line"></span><br><span class="line">    Page&lt;DiscussPost&gt; page = elasticTemplate.queryForPage(searchQuery, DiscussPost.class, <span class="keyword">new</span> <span class="title class_">SearchResultMapper</span>() &#123;</span><br><span class="line">        <span class="comment">// 重写方法，返回高亮数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; AggregatedPage&lt;T&gt; <span class="title function_">mapResults</span><span class="params">(SearchResponse response, Class&lt;T&gt; aClass, Pageable pageable)</span> &#123;</span><br><span class="line">            <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">            <span class="keyword">if</span> (hits.getTotalHits() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            List&lt;DiscussPost&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">                <span class="type">DiscussPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiscussPost</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">                post.setId(Integer.valueOf(id));</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">                post.setUserId(Integer.valueOf(userId));</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">                post.setTitle(title);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;content&quot;</span>).toString();</span><br><span class="line">                post.setContent(content);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;status&quot;</span>).toString();</span><br><span class="line">                post.setStatus(Integer.valueOf(status));</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;createTime&quot;</span>).toString();</span><br><span class="line">                post.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(Long.valueOf(createTime)));</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">commentCount</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;commentCount&quot;</span>).toString();</span><br><span class="line">                post.setCommentCount(Integer.valueOf(commentCount));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 处理高亮显示的结果</span></span><br><span class="line">                <span class="type">HighlightField</span> <span class="variable">titleField</span> <span class="operator">=</span> hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (titleField != <span class="literal">null</span>) &#123;</span><br><span class="line">                    post.setTitle(titleField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">HighlightField</span> <span class="variable">contentField</span> <span class="operator">=</span> hit.getHighlightFields().get(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (contentField != <span class="literal">null</span>) &#123;</span><br><span class="line">                    post.setContent(contentField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                list.add(post);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AggregatedPageImpl</span>(list, pageable,</span><br><span class="line">                    hits.getTotalHits(), response.getAggregations(), response.getScrollId(), hits.getMaxScore());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(page.getTotalElements());</span><br><span class="line">    System.out.println(page.getTotalPages());</span><br><span class="line">    System.out.println(page.getNumber());</span><br><span class="line">    System.out.println(page.getSize());</span><br><span class="line">    <span class="keyword">for</span> (DiscussPost post : page) &#123;</span><br><span class="line">        System.out.println(post);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="开发搜索功能"><a href="#开发搜索功能" class="headerlink" title="开发搜索功能"></a>开发搜索功能</h3><p>搜索服务</p>
<ul>
<li>保存帖子到ES</li>
<li>从ES删除</li>
<li>从ES搜素</li>
</ul>
<p>发布事件</p>
<ul>
<li>发布帖子时，异步处理</li>
<li>增加评论时，异步处理</li>
</ul>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SearchController</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchService elasticsearchService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LikeService likeService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// search?keyword=xxx</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/search&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(String keyword, Page page, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 搜索帖子</span></span><br><span class="line">        org.springframework.data.domain.Page&lt;DiscussPost&gt; searchResult =</span><br><span class="line">                elasticsearchService.searchDiscussPost(keyword, page.getCurrent() - <span class="number">1</span>, page.getLimit());</span><br><span class="line">        <span class="comment">// 聚合数据</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; discussPosts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (searchResult != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (DiscussPost post : searchResult) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                <span class="comment">// 帖子</span></span><br><span class="line">                map.put(<span class="string">&quot;post&quot;</span>, post);</span><br><span class="line">                <span class="comment">// 作者</span></span><br><span class="line">                map.put(<span class="string">&quot;user&quot;</span>, userService.findUserById(post.getUserId()));</span><br><span class="line">                <span class="comment">// 点赞数量</span></span><br><span class="line">                map.put(<span class="string">&quot;likeCount&quot;</span>, likeService.findEntityLikeCount(ENTITY_TYPE_POST, post.getId()));</span><br><span class="line"></span><br><span class="line">                discussPosts.add(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;discussPosts&quot;</span>, discussPosts);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;keyword&quot;</span>, keyword);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页信息</span></span><br><span class="line">        page.setPath(<span class="string">&quot;/search?keyword=&quot;</span> + keyword);</span><br><span class="line">        page.setRows(searchResult == <span class="literal">null</span> ? <span class="number">0</span> : (<span class="type">int</span>) searchResult.getTotalElements());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/search&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscussPostRepository discussRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveDiscussPost</span><span class="params">(DiscussPost post)</span> &#123;</span><br><span class="line">        discussRepository.save(post);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDiscussPost</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        discussRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数：关键字，第几页，每页几条数据</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;DiscussPost&gt; <span class="title function_">searchDiscussPost</span><span class="params">(String keyword, <span class="type">int</span> current, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">        <span class="type">SearchQuery</span> <span class="variable">searchQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">            .withQuery(QueryBuilders.multiMatchQuery(keyword, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;type&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;score&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withSort(SortBuilders.fieldSort(<span class="string">&quot;createTime&quot;</span>).order(SortOrder.DESC))</span><br><span class="line">            .withPageable(PageRequest.of(current, limit))</span><br><span class="line">            .withHighlightFields(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;title&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>.Field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/em&gt;&quot;</span>)</span><br><span class="line">            ).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elasticTemplate.queryForPage(searchQuery, DiscussPost.class, <span class="keyword">new</span> <span class="title class_">SearchResultMapper</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;T&gt; AggregatedPage&lt;T&gt; <span class="title function_">mapResults</span><span class="params">(SearchResponse response, Class&lt;T&gt; aClass, Pageable pageable)</span> &#123;</span><br><span class="line">                <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">                <span class="keyword">if</span> (hits.getTotalHits() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                List&lt;DiscussPost&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">                    <span class="type">DiscussPost</span> <span class="variable">post</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiscussPost</span>();</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;id&quot;</span>).toString();</span><br><span class="line">                    post.setId(Integer.valueOf(id));</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;userId&quot;</span>).toString();</span><br><span class="line">                    post.setUserId(Integer.valueOf(userId));</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;title&quot;</span>).toString();</span><br><span class="line">                    post.setTitle(title);</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;content&quot;</span>).toString();</span><br><span class="line">                    post.setContent(content);</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;status&quot;</span>).toString();</span><br><span class="line">                    post.setStatus(Integer.valueOf(status));</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">createTime</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;createTime&quot;</span>).toString();</span><br><span class="line">                    post.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>(Long.valueOf(createTime)));</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">commentCount</span> <span class="operator">=</span> hit.getSourceAsMap().get(<span class="string">&quot;commentCount&quot;</span>).toString();</span><br><span class="line">                    post.setCommentCount(Integer.valueOf(commentCount));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 处理高亮显示的结果</span></span><br><span class="line">                    <span class="type">HighlightField</span> <span class="variable">titleField</span> <span class="operator">=</span> hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (titleField != <span class="literal">null</span>) &#123;</span><br><span class="line">                        post.setTitle(titleField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">HighlightField</span> <span class="variable">contentField</span> <span class="operator">=</span> hit.getHighlightFields().get(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (contentField != <span class="literal">null</span>) &#123;</span><br><span class="line">                        post.setContent(contentField.getFragments()[<span class="number">0</span>].toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    list.add(post);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AggregatedPageImpl</span>(list, pageable,</span><br><span class="line">                        hits.getTotalHits(), response.getAggregations(), response.getScrollId(), hits.getMaxScore());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>框架</title>
    <url>/2024/03/18/11-00-37/</url>
    <content><![CDATA[<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p><strong>IoC（Inversion of Control:控制反转）</strong> 是一种<strong>设计思想</strong>，而不是一个具体的技术实现，它是依赖注入的一种实现方式。IoC 的思想就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。不过， IoC 并非 Spring 特有，在其他语言中也有应用。</p>
<span id="more"></span>

<p>不通过 new 关键字来创建对象，而是通过 IoC 容器(Spring 框架) 来帮助我们实例化对象。我们需要哪个对象，直接从 IoC 容器里面去取即可。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>面向切面编程，将<strong>横切关注点</strong> (如日志记录等) 从核心业务逻辑中分离出来，通过动态代理、字节码操作等技术。实现代码的复用和解耦。</p>
<p>OOP (面向对象编程) 的目的是将业务逻辑按照对象的属性和行为进行封装，实现代码的模块化和层次化（也能实现代码的复用），提高代码的可读性和可维护性</p>
<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>AOP 的常见实现方式有动态代理、字节码操作等方式。</p>
<p>Spring AOP 就是基于动态代理的，如果要代理的对象，实现了某个接口，那么 Spring AOP 会使用 <strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候 Spring AOP 会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理。</p>
]]></content>
      <categories>
        <category>八股</category>
      </categories>
      <tags>
        <tag>八股</tag>
      </tags>
  </entry>
  <entry>
    <title>项目介绍</title>
    <url>/2024/03/15/11-00-37/</url>
    <content><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><span id="more"></span>

<p>面试官好，我叫xx，是一名南京理工大学的硕士研究生，专业是计算机技术。在校期间，我参与完成了MTR课表程序，帮南理工的同学们快捷查询课表、成绩等教务信息。同时在研究所实习期间完成了多个横向，主要是参与巡逻无人车的开发。</p>
<h2 id="介绍MTR课表"><a href="#介绍MTR课表" class="headerlink" title="介绍MTR课表"></a>介绍MTR课表</h2><h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><p>MTR课表是我在去年和组里同学一起开发的项目，初衷是帮南理工的同学们查询课表、成绩等教务信息。主要的技术栈是springboot、mybatis-plus、redis、mysql、es做搜索、kafka做消息队列。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>做这个是因为我们学校的教务信息查看很麻烦，手机上只能打开浏览器，进入学校网站才能查看。所以就想着开发一下这个小程序，方便同学们查询这些信息。</p>
<h3 id="我的模块"><a href="#我的模块" class="headerlink" title="我的模块"></a>我的模块</h3><p>我主要负责登陆模块和论坛模块。</p>
<h3 id="如何获取教务信息"><a href="#如何获取教务信息" class="headerlink" title="如何获取教务信息"></a>如何获取教务信息</h3><p>学校的教务网站有个统一的入口，通过这个入口就可以访问各种信息，课表、考试教室、考试成绩等等，具体实现是我们可以登录教务系统拿到一个cookie，然后之后就可以直接带着cookie访问来查询这些信息了。</p>
<h3 id="登陆模块"><a href="#登陆模块" class="headerlink" title="登陆模块"></a>登陆模块</h3><p>第一个版本使用的是最常规的Session的登录方式（session-localStorage方案），后来改了多服务器以后，Session这种方式就出现了问题，首先就是Session不共享的问题。</p>
<p>我们最后选择了JWT，解决了Session共享的问题，用户登陆时，服务器端生成一个token令牌响应给前端。后续的请求中需要携带令牌到服务器端，服务器端可以解析token，得到用户信息做校验。</p>
<p><a href="https://fangjun120.github.io/2023/11/12/11-00-37/">jwt</a>是目前最流行的跨域认证的解决方案，是基于token的认证授权机制。本质是一组字符串，由3个部分组成。</p>
<h4 id="CSRF攻击"><a href="#CSRF攻击" class="headerlink" title="CSRF攻击"></a>CSRF攻击</h4><p>跨站请求伪造，通常发生在受害者已经登录了一个网站时，攻击者通过欺骗方式诱导受害者在其他网站上执行操作，从而利用受害者在原始网站上的身份进行操作。用jwt可以避免CSRF攻击，因为在发起请求时，cookie会自动把token请求出去，而jwt不会。</p>
<h4 id="jwt优点"><a href="#jwt优点" class="headerlink" title="jwt优点"></a>jwt优点</h4><ul>
<li>不用服务器存储，节省服务器资源</li>
<li>避免CSRF攻击，由前端保存在localstorage中</li>
<li>集群可用</li>
</ul>
<h3 id="论坛模块"><a href="#论坛模块" class="headerlink" title="论坛模块"></a>论坛模块</h3><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>帖子表：帖子id、发布者id、标题、内容、发布时间、评论数量</p>
<p>评论表：评论id、帖子id、评论用户id、评论时间、内容、回复用户id</p>
<p>评论图片表：帖子id、图片链接</p>
<h4 id="评论实现方式"><a href="#评论实现方式" class="headerlink" title="评论实现方式"></a>评论实现方式</h4><p>把评论和回复都当做评论，按时间排序。因为我们回复评论的情况较少，实现起来也比较简单。</p>
<h4 id="多线程评论数量不同步"><a href="#多线程评论数量不同步" class="headerlink" title="多线程评论数量不同步"></a>多线程评论数量不同步</h4><p>一开始使用sycronized锁实现，不同管锁的获取和释放，挺方便的。后来因为使用了多个服务器，单机锁不适用了（集群环境下由于JVM不同，内部的锁监视器也不同）。</p>
<p>后来抱着学习的心态使用了redis的<strong>分布式锁</strong>，原本打算用<strong>setnx</strong>做一个简单的分布式锁。考虑到可能出现客户端宕机，没有释放锁，导致死锁。于是加了<strong>过期时间</strong>。</p>
<p>但是如果过期时间到了，程序还没执行完呢？万一把别人的锁释放了，可以使用uuid标识，防止释放别人的锁。没有超时续约，使用redission，watchDog机制优雅续期。</p>
<p>为什么不直接用redis统计评论数？</p>
<ul>
<li>因为想要数据直接持久化在数据库里，redis只作为工具。</li>
</ul>
<p>单机为什么不用事务呢？</p>
<ul>
<li><strong>事务不能解决并发问题</strong>啊，事务只是保证事务不出错，而不是不执行。</li>
</ul>
<h3 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h3><p>因为我们的主要点击量还是在课表查询，成绩查询之类的。所以主要限制我们的还是cpu资源，因为后来用户量上去了，用的是2核4G的学生机，用的都是公网，在云服务器上面看监控，看到cpu资源已经很满了。所以后来就打算多搞几台机子，本来搞两台的学生机应该也够用了，但是想以后又不太够用就比较麻烦，最后就弄了3台机子。然后采用Nginx做反向代理，采用的是<strong>轮询</strong>的方式，进行负载均衡。</p>
<p>出现过问题吗？</p>
<ul>
<li>有一段时间经常有人攻击，后来查了nginx访问日志，发现有些ip的请求不像普通用户，短时间内发了很多条，所以就把那些人的ip给封了，怎么封的？在nginx上直接deny。</li>
</ul>
<p>正向代理 代表客户端</p>
<p>反向代理 代表服务器</p>
<h4 id="Nginx负载均衡策略"><a href="#Nginx负载均衡策略" class="headerlink" title="Nginx负载均衡策略"></a>Nginx负载均衡策略</h4><ul>
<li>轮询</li>
<li>权重</li>
<li>最少连接</li>
</ul>
<h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>配置动静分离</p>
<p>把图片分配在静态目录下</p>
<h4 id="Nginx限流"><a href="#Nginx限流" class="headerlink" title="Nginx限流"></a>Nginx限流</h4><p><strong>令牌桶算法：</strong></p>
<p>令牌以固定速率产生，缓存到令牌桶里面。令牌桶放满时，多余的令牌被丢弃。每次请求要消耗等比例的令牌才能被处理。令牌不够的时候，请求被缓存。<strong>允许某种程度的突发处理（可能有一段时间执行的快）。</strong></p>
<p><strong>漏桶算法：</strong></p>
<p>缓存请求（请求放进桶里），然后匀速处理请求（处理漏出来的水），请求满了，就丢弃（水溢出桶）。<strong>对突发容量不做额外处理（永远保持匀速）</strong></p>
<h3 id="打包步骤"><a href="#打包步骤" class="headerlink" title="打包步骤"></a>打包步骤</h3><ol>
<li>mvn clean</li>
<li>mvn install</li>
<li>在target里找到jar包</li>
<li>Java -jar xx.jar运行，可以用nohup 后台运行</li>
</ol>
<h2 id="介绍校园探店"><a href="#介绍校园探店" class="headerlink" title="介绍校园探店"></a>介绍校园探店</h2><h3 id="总体介绍-1"><a href="#总体介绍-1" class="headerlink" title="总体介绍"></a>总体介绍</h3><p>校园探店是我仿照大众点评开发的练手项目，主要是想学习redis的相关知识，因为之前使用redis只是用来做缓存，后来做MTR课表发现redis有很多其他功能，比如分布式锁等。</p>
<p>因为是个练手项目，所以对比大众点评不是十分完整，主要有登录注册、店铺查询、秒杀优惠、UV统计等功能。</p>
<p>主要技术栈有springboot、mybatis-plus、redis、mysql、redission</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>vivo</title>
    <url>/2024/03/19/11-00-37/</url>
    <content><![CDATA[<h2 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h2><p>自我介绍</p>
<p>两个项目哪个参与度高？</p>
<span id="more"></span>

<p>缓存和数据库的双写一致性，具体怎么操作</p>
<ul>
<li><strong>先更新数据库再删除缓存</strong>。数据库操作比redis耗时，如果先删缓存，更新数据库时有新的访问，从数据库中读到数据后又更新了缓存，那就相当于没删除缓存。</li>
</ul>
<p>哪些数据放到redis 里(校园探店)</p>
<ul>
<li>手机号验证码</li>
<li>用户信息</li>
<li>商铺信息</li>
<li>优惠券库存信息</li>
</ul>
<p>项目最大的收获</p>
<ul>
<li>学redis</li>
<li>关注性能</li>
</ul>
<p>分布式锁用的是redis哪个命令</p>
<ul>
<li>setnx</li>
</ul>
<p>kafka做通知具体是怎么做的</p>
<ul>
<li>websocket实时返回</li>
</ul>
<p>数据是怎么同步到ES里去的</p>
<ul>
<li>发布帖子时，将帖子异步提交到ES</li>
<li>删除帖子时，将帖子异步删除</li>
</ul>
<p>写入不成功怎么办</p>
<ul>
<li>延迟后重试，若仍失败，则从数据库删除新加入的帖子并返回错误信息，记录日志</li>
</ul>
<p>Stringbuilder和Stringbuffer底层</p>
<ul>
<li>char数组，加锁和不加锁</li>
</ul>
<p>Object类中有哪些方法</p>
<ul>
<li>equals</li>
<li>clone</li>
<li>hashcode</li>
<li>toString</li>
</ul>
<p>深拷贝、浅拷贝、引用拷贝</p>
<ul>
<li>浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>
<li>深拷贝完全复制整个对象，包括这个对象包含的内部对象</li>
<li>引用拷贝是两个不同的引用指向同一个对象</li>
</ul>
<p>get和post的区别</p>
<ul>
<li>语义：get用于获取；post用于创建</li>
<li>幂等：get幂等；post不幂等</li>
<li>格式：get请求参数在URL中，post在body里</li>
<li>缓存：get可以缓存，post不可以</li>
<li>安全：get比post更容易泄露敏感数据</li>
</ul>
<p>字面量定义和new定义字符串的区别</p>
<ul>
<li>存储位置不同：字符串常量池和堆区</li>
<li>字符串常量池有共享</li>
</ul>
<p>sql优化的步骤</p>
<ul>
<li>避免使用SELECT *</li>
<li>分页优化</li>
<li>避免多表作join</li>
<li>避免使用外键和级联操作</li>
<li>选择合适的字段类型</li>
<li>尽量⽤ UNION ALL 代替 UNION</li>
<li>批量操作</li>
<li>优化慢SQL查询</li>
<li>正确使用索引</li>
</ul>
<p>where条件哪些写法用不到索引</p>
<ul>
<li>以%开头的LIKE模糊查询</li>
<li>表达式计算</li>
<li>隐式转换</li>
</ul>
<p>乐观锁的实现方式</p>
<ul>
<li>CAS</li>
<li>版本号</li>
</ul>
<p>反问环节</p>
<h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2><p>对vivo的了解</p>
<p>本科是保研还是考的？</p>
<p>家庭情况</p>
<p>实习做了什么</p>
<p>期望工作地点</p>
<p>期望薪资</p>
<p>🌟想从实习中获得什么</p>
<p>🌟未来规划</p>
<p>🌟读研带来最大的提升</p>
<p>做好这个岗位需要的核心能力</p>
<p>实习时间</p>
<p>倾向于什么类型的企业</p>
<p>反问环节</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
